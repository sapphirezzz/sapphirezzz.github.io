{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/tencent8407463772477251935.txt","path":"tencent8407463772477251935.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/uploads/avatar.jpeg","path":"uploads/avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0679e5fe7539bf333c4a1db2c58c562689d88768","modified":1582787238723},{"_id":"source/CNAME","hash":"f0c7488e51f196bfc1e383dbfc7c02f005417c6d","modified":1582644188580},{"_id":"source/tencent8407463772477251935.txt","hash":"44882e53c532072f629a2f80ccca39c4f65a7188","modified":1582644188607},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1582785308784},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1582785308784},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1582785308784},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1582785308785},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1582785308785},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1582785308785},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1582785308785},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1582785308785},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1582785308785},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1582785308786},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1582785308786},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1582785308786},{"_id":"themes/next/_config.yml","hash":"30b642579ec5df34e455efe6578da2ee3eadfc45","modified":1582789611839},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1582785308786},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1582785308786},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1582785308800},{"_id":"source/categories/index.md","hash":"601e67e05754b27f09a8be584985a9bfd6cbd629","modified":1582644188606},{"_id":"source/tags/index.md","hash":"09d44ebe41df08c02895c354ee8ec5901225313b","modified":1582644188607},{"_id":"source/_posts/.DS_Store","hash":"4f747b80de3d3e67d5961ca054b4564699ee8c84","modified":1582644867679},{"_id":"source/_posts/2015-02-22-scroll-to-top-for-my-octopress-blog.md","hash":"848d93f76775fdb3bfb6914d09953ddae4c568e2","modified":1582644188581},{"_id":"source/_posts/2015-02-22-show-summary-of-post.md","hash":"fe5ca7a043925b687d0583f16a8f777476e6978b","modified":1582644188581},{"_id":"source/_posts/2015-02-22-start-a-blog-on-github-pages-base-on-octopress.md","hash":"2004d9674e146799a97976cd8514bc962dc27742","modified":1582644188581},{"_id":"source/_posts/2015-03-07-share-some-experience-in-using-git-in-my-project.md","hash":"90e69a7abf9a53c2b26e1ae28295ec99de21c63d","modified":1582644188581},{"_id":"source/_posts/2015-03-16-happiness-which-has-gone.md","hash":"9f40633cd2e0c9f1349bd57f7fa99209d3f0c7fd","modified":1582644188581},{"_id":"source/_posts/2015-06-01-add-comment-component-to-octopress.md","hash":"3a0fbc8f796c3717d2ddd3061e95bd10c91fb3d0","modified":1582644188581},{"_id":"source/_posts/2015-06-01-add-visitors-counter-to-octopress.md","hash":"ad69011cb08abda5f5fd3239961ec2b3997b2672","modified":1582644188581},{"_id":"source/_posts/2015-06-06-use-code-block-without-analysis.md","hash":"69bbba7d132ed24012afae30f69c96ab5a44c921","modified":1582644188582},{"_id":"source/_posts/2015-06-07-add-category-to-octopress.md","hash":"474f3a1e7d4b3483a55b52001805592bc8f4d28a","modified":1582644188582},{"_id":"source/_posts/2015-06-07-github-pages-ruby-markdown-jekyll-octopress.md","hash":"dc695b46ac8e756703c23aa014f785fc0c805d8d","modified":1582644188582},{"_id":"source/_posts/2015-06-07-make-visit-faster.md","hash":"9ed88ceda3326e6ec230949edec09deb0d053f88","modified":1582644188582},{"_id":"source/_posts/2015-06-07-new-a-page-on-navigation.md","hash":"8caaf3b2d43b4d56deff19b07304afb66e7a2f64","modified":1582644188582},{"_id":"source/_posts/2015-06-07-seo-about-octopress.md","hash":"8e0ad82077a95c8dba9e62617143dd568b2f0ca7","modified":1582644188582},{"_id":"source/_posts/2015-06-07-sitemap-of-your-octopress-blog.md","hash":"63a894c8546915d856d17123b2c5863322c3e967","modified":1582644188582},{"_id":"source/_posts/2015-07-23-the-most-normal-but-warm-moment.md","hash":"30f13f193bfd5d1ebfedb48e97fc90e7c6f53c00","modified":1582644188582},{"_id":"source/_posts/2015-09-14-going-hiking-through-the-tung-west-chung-coast.md","hash":"66244070ccc23b6b1cb907972ff6d4afcdf9576c","modified":1582644188582},{"_id":"source/_posts/2015-09-29-adapt-to-xcode-7-and-ios-9.md","hash":"8df54a449c151c71f0f032deab13433e191fa331","modified":1582644188583},{"_id":"source/_posts/2015-12-05-review-of-the-devil's-advocate.md","hash":"2eb57179abf840d31f47473c703112d23d4a0753","modified":1582644188583},{"_id":"source/_posts/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails.md","hash":"9b5125c46ffbac99127f5c4d3ed06280d60cb2c0","modified":1582644188583},{"_id":"source/_posts/2016-01-17-ios-devices-info.md","hash":"7559bd5391bc2e7581c612d86086db615f72c6fd","modified":1582644188583},{"_id":"source/_posts/2016-01-26-universal-links.md","hash":"7cbd90ee8f7ba3470c917ea5411e80cc1a6b3e03","modified":1582644188583},{"_id":"source/_posts/2016-02-26-app-image-compress-upload-to-server.md","hash":"c3c3217427ecd1569be56ce42bf05ed80dfdfa14","modified":1582644188584},{"_id":"source/_posts/2016-03-06-board-games-I-recommended.md","hash":"619a770c2c95ff0a9cd45ef13ca96356f81ca622","modified":1582644188584},{"_id":"source/_posts/2016-03-06-migrate-to-hexo-from-octopress.md","hash":"049e6b7679af90307d54c3da3acb2c6e91b288dc","modified":1582644188584},{"_id":"source/_posts/2016-04-24-handle-collectionview-tableview-with-grace.md","hash":"3b51757969bbfb3abd46e5f0c7bc43b55fb24c85","modified":1582644188584},{"_id":"source/_posts/2016-05-31-ios-in-app-purchase-iap.md","hash":"58316e9cba59fdd92c6f925e9727396ff83b8320","modified":1582644188584},{"_id":"source/_posts/2016-07-24-shell-keng.md","hash":"ff4533af2c3fc74c06a63625ae0cd7388309f2f1","modified":1582644188587},{"_id":"source/_posts/2016-07-31-ios-live-comment-praise.md","hash":"d12a94aa5a6c0287964f5d1320f14fb3a8c513fb","modified":1582644188588},{"_id":"source/_posts/2016-10-14-publish-new-or-updated-libraries-to-CocoaPods.md","hash":"d6563cc2792fe8a53c35f0d16fa63731a873b324","modified":1582644188594},{"_id":"source/_posts/2016-10-26-config-different-ssh-key-for-multiple-git-accounts.md","hash":"3b2ce77b2dc82abce3326e7eb886c74e1a95b139","modified":1582644188595},{"_id":"source/_posts/2017-11-14-swift-code-conventions.md","hash":"9fd718e2c42e6baeb6b5dcb86a720f42be943b46","modified":1582644188595},{"_id":"source/_posts/2018-02-07-ios-device-model-identifier.md","hash":"0313152b74e8fe37553a370b3b50bcc4d44ad820","modified":1582644188595},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension.md","hash":"d33ba5cb341b5f224ef0fa9dbce4d75e191ef841","modified":1582644188595},{"_id":"source/_posts/2019-08-03-mac-app-drag-and-drop-produce-app-icon.md","hash":"43265da3b002994c217a3d9fabea92d73bc300e0","modified":1582644188601},{"_id":"source/_posts/2019-09-22-scrollview-auto-play-video.md","hash":"765ebfab7364e420e5aba1f297b210b6533acbf9","modified":1582644188603},{"_id":"source/_posts/2020-02-25-2020-family.md","hash":"7e094d73e333a6818ad6f50d4e7260a26127d432","modified":1582790147437},{"_id":"source/uploads/.DS_Store","hash":"6ab5c438413fb1a820ece53620a9bf2554251a2c","modified":1582788696432},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1582785308778},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1582785308780},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1582784950292},{"_id":"themes/next/.git/index","hash":"ebbc61aa92a68406ebc1280ee31a074b2ac24d77","modified":1582785308861},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1582785308776},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1582785308784},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1582785308784},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1582785308784},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1582785308785},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1582785308787},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1582785308787},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1582785308787},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1582785308787},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1582785308787},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1582785308787},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1582785308787},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1582785308787},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1582785308787},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1582785308788},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1582785308788},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1582785308788},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1582785308788},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1582785308788},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1582785308788},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1582785308788},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1582785308789},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1582785308799},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1582785308799},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1582785308799},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1582785308800},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1582785308800},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1582785308800},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1582785308800},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1582785308800},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1582785308801},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1582785308860},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1582785308860},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1582785308860},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308820},{"_id":"source/_posts/2016-01-17-ios-devices-info/304530-f1e621f5f6cd6666.gif","hash":"8251ceb202689f36918b49af5539035cd783187f","modified":1582644188583},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1582784950293},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1582784950293},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1582784950292},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1582784950293},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1582784950294},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1582784950293},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1582784950293},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1582784950294},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1582784950293},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1582784950293},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1582784950294},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1582784950292},{"_id":"themes/next/.git/logs/HEAD","hash":"d460088af12542c7a7bd3254c3a405deef90af82","modified":1582785308779},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1582785308789},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1582785308789},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1582785308789},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1582785308789},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1582785308790},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1582785308790},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1582785308790},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1582785308790},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1582785308790},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1582785308790},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1582785308791},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1582785308791},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1582785308791},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1582785308791},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1582785308791},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1582785308792},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1582785308792},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1582785308793},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1582785308797},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1582785308797},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1582785308797},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1582785308797},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1582785308798},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1582785308798},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1582785308798},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1582785308801},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1582785308801},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1582785308801},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1582785308802},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1582785308802},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1582785308802},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1582785308802},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1582785308802},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1582785308802},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1582785308820},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582785308821},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582785308821},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1582785308821},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1582785308821},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1582785308821},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1582785308822},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1582785308822},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1582785308822},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1582785308822},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1582785308822},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582785308823},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582785308823},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582785308823},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1582785308823},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582785308823},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1582785308823},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1582785308823},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1582785308824},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308793},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308793},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308815},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308815},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308815},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308820},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582785308820},{"_id":"source/uploads/avatar.jpeg","hash":"fb035dd27f6635d5da49509ef5f54253aad3f115","modified":1582787234461},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1582785308779},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1582785308791},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1582785308791},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1582785308791},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1582785308792},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1582785308792},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1582785308792},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1582785308792},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1582785308792},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1582785308792},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1582785308792},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1582785308793},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1582785308793},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1582785308793},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1582785308794},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1582785308795},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1582785308795},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1582785308795},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1582785308795},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1582785308795},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1582785308795},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1582785308796},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1582785308797},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1582785308797},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1582785308798},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1582785308799},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1582785308799},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1582785308799},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1582785308815},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1582785308815},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1582785308815},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1582785308815},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1582785308819},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1582785308820},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1582785308820},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1582785308820},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1582785308824},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1582785308824},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1582785308824},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1582785308824},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1582785308824},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1582785308825},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1582785308825},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1582785308825},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1582785308825},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1582785308825},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1582785308826},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1582785308829},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1582785308832},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1582785308832},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1582785308832},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1582785308833},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1582785308836},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1582785308836},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1582785308836},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1582785308836},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1582785308837},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1582785308837},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1582785308837},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1582785308838},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1582785308838},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1582785308847},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1582785308848},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1582785308849},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1582785308849},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1582785308849},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1582785308849},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1582785308849},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1582785308850},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1582785308850},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1582785308850},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1582785308850},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1582785308851},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1582785308852},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1582785308853},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1582785308853},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1582785308853},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1582785308854},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1582785308857},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1582785308857},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582785308859},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1582785308860},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582785308860},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424135311.jpg","hash":"a78fe15d73c0651592dd574582cbea6c92df455b","modified":1582644188596},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1582785308848},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150404.jpg","hash":"82e48c9b99d16831873f1dec473cc7803531bece","modified":1582644188599},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150422.jpg","hash":"38d9733111bcdbb749d6ec10ed8ea75c26b1cbe9","modified":1582644188600},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150437.jpg","hash":"464720ed2257cf3dd50b2be68aaabe7d4a8d1402","modified":1582644188601},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d460088af12542c7a7bd3254c3a405deef90af82","modified":1582785308779},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1582785308778},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1582785308798},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1582785308798},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1582785308803},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1582785308803},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1582785308803},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1582785308803},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1582785308810},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1582785308813},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1582785308813},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1582785308814},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1582785308814},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1582785308814},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1582785308814},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1582785308814},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1582785308816},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1582785308817},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1582785308817},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1582785308817},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1582785308818},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1582785308818},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1582785308818},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1582785308818},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1582785308818},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1582785308819},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1582785308819},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1582785308819},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1582785308819},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1582785308819},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1582785308825},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1582785308829},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1582785308828},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582785308833},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582785308833},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582785308833},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582785308833},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1582785308835},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1582785308835},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1582785308836},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1582785308837},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1582785308837},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582785308838},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1582785308838},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582785308839},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1582785308857},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1582785308857},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424135633.jpg","hash":"41a9b83fa1264e4f414dfb09ce020c9c0cd1beb0","modified":1582644188597},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424145603.jpg","hash":"f9e4dc28835f96439362ef10c89a803206c6a463","modified":1582644188598},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1582785308827},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1582785308828},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582785308847},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582785308847},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1582785308859},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d460088af12542c7a7bd3254c3a405deef90af82","modified":1582785308778},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1582785308804},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1582785308805},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1582785308806},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1582785308807},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1582785308808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1582785308809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1582785308810},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1582785308811},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1582785308811},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1582785308811},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1582785308811},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1582785308811},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1582785308812},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1582785308813},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1582785308813},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1582785308813},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1582785308813},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1582785308817},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1582785308817},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1582785308818},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1582785308826},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1582785308827},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1582785308827},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1582785308827},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1582785308827},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1582785308834},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582785308835},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1582785308835},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1582785308840},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582785308842},{"_id":"source/_posts/2019-08-03-mac-app-drag-and-drop-produce-app-icon/readme.gif","hash":"59aa0a98e2b8d4e6f74a57599dbd6d840010acd3","modified":1582644188603},{"_id":"themes/next/.git/objects/pack/pack-e1b0433fdb3f944f563f84c1ef69bced7bbfa610.idx","hash":"e845e439f50b10c7acb85021677b37ce116bf85f","modified":1582785308770},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1582785308846},{"_id":"source/_posts/2016-05-31-ios-in-app-purchase-iap/304530-8e271b6afd1bc2eb.png","hash":"f745d941229a55030c9e8f850230247d05ac235b","modified":1582644188586},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1582785308831},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1582785308845},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1582785308856},{"_id":"source/_posts/2016-05-31-ios-in-app-purchase-iap/304530-e6031ed92ab8fac0.png","hash":"d33dde30e24fd7d8910962826720795416b67d35","modified":1582644188587},{"_id":"source/_posts/2019-09-22-scrollview-auto-play-video/demo.gif","hash":"c259ae4c26f3b75fafba9e6996e4809147b735b9","modified":1582644188606},{"_id":"source/_posts/2016-07-31-ios-live-comment-praise/304530-9c6fd4a095528f98.gif","hash":"9994f56a048a497db309501ed95c56217bf270e4","modified":1582644188594},{"_id":"themes/next/.git/objects/pack/pack-e1b0433fdb3f944f563f84c1ef69bced7bbfa610.pack","hash":"0fd44cb3db2b8a210b2fa86cfa9485830ba9c3ab","modified":1582785308767},{"_id":"public/baidusitemap.xml","hash":"43821e18effde6246c7fb3b9b34a487ce0f638ce","modified":1582790217389},{"_id":"public/sitemap.xml","hash":"ef21e789f9f9b32e2c401b719ce62209801b76f0","modified":1582790217389},{"_id":"public/categories/index.html","hash":"7ee57f92445e61328c144808429f23fdc86713bc","modified":1582790217417},{"_id":"public/tags/index.html","hash":"c8db4574580c596a6bdaf7eff1b82a6cf24e6f12","modified":1582790217417},{"_id":"public/categories/blog/page/2/index.html","hash":"72317e7d7420a81b036fd07576e14d3626783520","modified":1582790217418},{"_id":"public/categories/iOS/page/2/index.html","hash":"7e19921ad33d3ae25ddce07220dea85813bd42f0","modified":1582790217418},{"_id":"public/categories/macOS/index.html","hash":"42506d1b91eb42e60db695871fdb2f88b3235d0b","modified":1582790217418},{"_id":"public/tags/Octopress/page/2/index.html","hash":"396b4ba188c1972282cb153b4d79fa0273a1e414","modified":1582790217418},{"_id":"public/tags/git/index.html","hash":"44c9f79c536a352445a27db25627c76128346469","modified":1582790217418},{"_id":"public/tags/blog/index.html","hash":"b6cf364d686ebf522c6a7f645d457066e273c0b5","modified":1582790217418},{"_id":"public/tags/SEO/index.html","hash":"0070bb15f08743405c9e670c0c4ab1e2380fbce5","modified":1582790217418},{"_id":"public/tags/Sitemap/index.html","hash":"7ceabae822c225ba0547021ee62ce1304eafe5e2","modified":1582790217418},{"_id":"public/tags/iOS/page/2/index.html","hash":"f3ee0f99ba88ef937cdf4ad58aa9dbf734c73630","modified":1582790217418},{"_id":"public/tags/Universal-Links/index.html","hash":"a58b7f5cbe2ea5be894a32244a98ea11b092986b","modified":1582790217418},{"_id":"public/tags/持续集成/index.html","hash":"89f0e74d7677151227d06d1cfb93b361a994aaba","modified":1582790217418},{"_id":"public/tags/shell/index.html","hash":"73c8f96636271ac64fcb8fbf820b2f6fb053d8b8","modified":1582790217419},{"_id":"public/tags/图片压缩/index.html","hash":"606e712a0258492cc79314fb9423bcafcec5b862","modified":1582790217419},{"_id":"public/tags/Hexo/index.html","hash":"70cfb44fa95981d172134283128655d40c1e6177","modified":1582790217419},{"_id":"public/tags/IAP/index.html","hash":"0bbc6cdc66dfaac24bf6589c299f2718a09df9a7","modified":1582790217419},{"_id":"public/tags/直播/index.html","hash":"73651f3959b91dfe8dd22ee19c7bde8d9f3cd4fd","modified":1582790217419},{"_id":"public/tags/CocoaPods/index.html","hash":"79bcebdc7628f0121ce51e6d02cff8f784e373a3","modified":1582790217419},{"_id":"public/tags/ssh/index.html","hash":"511ad06966030dbcf990cc2f8b2b16fbf8c85fd1","modified":1582790217419},{"_id":"public/tags/swift/index.html","hash":"010657c4efab83d1cfe27c278c54c316654dfa46","modified":1582790217419},{"_id":"public/tags/Xcode插件/index.html","hash":"a9f886f1e59536bfd521d21806796f239fc6e99c","modified":1582790217419},{"_id":"public/tags/macOS/index.html","hash":"a5c9357ad1da64e14a008f357081eaf886f9dbeb","modified":1582790217419},{"_id":"public/archives/2015/02/index.html","hash":"51c2379916f48b0f66fc5efef4326f9bdb41b28f","modified":1582790217417},{"_id":"public/archives/2015/03/index.html","hash":"164deecc6e1bf7ccba52a319224b218e5ad2774f","modified":1582790217417},{"_id":"public/archives/2015/07/index.html","hash":"ba56af1fc2db12bc99d67a742dd862922162dd60","modified":1582790217417},{"_id":"public/archives/2015/09/index.html","hash":"29788213fb8a146bdf9d0ca60eb3443a899d8454","modified":1582790217417},{"_id":"public/archives/2015/12/index.html","hash":"027cb971eb53b4907145e10ddebb695267fb70da","modified":1582790217418},{"_id":"public/archives/2016/page/2/index.html","hash":"c1d3c35223d1090f2ddeae4a67a34a636fbb8b34","modified":1582790217418},{"_id":"public/archives/2016/01/index.html","hash":"c54c1b2abb1e4ec87603496d35a6b81f398e6b4a","modified":1582790217418},{"_id":"public/archives/2016/02/index.html","hash":"e657145b83d8a1f4e63f1dda1bd2455fd93a33cb","modified":1582790217418},{"_id":"public/archives/2016/03/index.html","hash":"8f7959fee6dfa51a770c6ba383bf32cac8676784","modified":1582790217418},{"_id":"public/archives/2016/04/index.html","hash":"0af523436210578b05a3aee46df85ebd3909177c","modified":1582790217418},{"_id":"public/archives/2016/05/index.html","hash":"891f071e5184116caadc49107c9fb73ca37e697a","modified":1582790217418},{"_id":"public/archives/2016/07/index.html","hash":"58e3a6966d9ca9720165c672e16c9f79ebc9800a","modified":1582790217418},{"_id":"public/archives/2016/10/index.html","hash":"1d29ba6745eb4db7245a30059dc3164afc21b339","modified":1582790217418},{"_id":"public/archives/2017/index.html","hash":"097d31554a233a08ff7777e4eeea19579bb2aac2","modified":1582790217418},{"_id":"public/archives/2017/11/index.html","hash":"5039dd1dc6526eac85006bfc4272b84321083b4c","modified":1582790217418},{"_id":"public/archives/2018/index.html","hash":"2b3cf9a51e8c17fb1a22cd0c43072bd5a4020b2a","modified":1582790217418},{"_id":"public/archives/2018/02/index.html","hash":"efa1f7e7a84f1f9a903d31e9d9e57b739527c71c","modified":1582790217418},{"_id":"public/archives/2019/04/index.html","hash":"79c12088cd158f8ca7ef1a15f1b9ad89d7479d18","modified":1582790217418},{"_id":"public/archives/2019/08/index.html","hash":"45eb73e152a030d599a31052f26ba253d9ff503d","modified":1582790217418},{"_id":"public/archives/2019/09/index.html","hash":"35864554d9e9ec1f0413c6b9566d9490faa9e02f","modified":1582790217418},{"_id":"public/archives/2020/index.html","hash":"fb09e6d57a2e3eec69b91d06330a105bc3f0ae70","modified":1582790217418},{"_id":"public/archives/2020/02/index.html","hash":"93a9d010a9b67668d00ed78ed5a7bd29d4c61567","modified":1582790217418},{"_id":"public/2020/02/25/2020-family/index.html","hash":"2f9dc960bce719e296545c0ee3f5d49333db9689","modified":1582790217419},{"_id":"public/2019/09/22/scrollview-auto-play-video/index.html","hash":"4add7fc217d0d302188b0f916e5c7844fd7bad9f","modified":1582790217419},{"_id":"public/2019/08/03/mac-app-drag-and-drop-produce-app-icon/index.html","hash":"ebb61e2254321f4f2a8dca2abb52cba58d144cce","modified":1582790217419},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/index.html","hash":"896c71f722bd826cd8585a9a5b4b08497140ca3d","modified":1582790217419},{"_id":"public/2018/02/07/ios-device-model-identifier/index.html","hash":"fd9980154a2145753df76494ee96fe187549e22b","modified":1582790217419},{"_id":"public/2017/11/14/swift-code-conventions/index.html","hash":"cff403bc372db48318454307f89da4c48b6a28e0","modified":1582790217419},{"_id":"public/2016/10/26/config-different-ssh-key-for-multiple-git-accounts/index.html","hash":"360d5cfd5502f4ed89e85af89783ccfa3984baaf","modified":1582790217419},{"_id":"public/2016/10/14/publish-new-or-updated-libraries-to-CocoaPods/index.html","hash":"6533a3d9581e224677b16e49c5f8442f15d050c8","modified":1582790217419},{"_id":"public/2016/07/31/ios-live-comment-praise/index.html","hash":"0c3218f558a0f480b5c971a71bb068b2b24b5c28","modified":1582790217419},{"_id":"public/2016/07/24/shell-keng/index.html","hash":"df8326241bf232f0803db17cb92265131de4d201","modified":1582790217419},{"_id":"public/2016/05/31/ios-in-app-purchase-iap/index.html","hash":"6be76355cf99e3f625a910a6ae0b729c7bd84e9a","modified":1582790217419},{"_id":"public/2016/03/06/board-games-I-recommended/index.html","hash":"a82c015af04a5df8270c3f1679e0d33ab98c05e9","modified":1582790217419},{"_id":"public/2016/04/24/handle-collectionview-tableview-with-grace/index.html","hash":"71bee114bea56b2c8eaa556580ace896c3368f09","modified":1582790217419},{"_id":"public/2016/03/06/migrate-to-hexo-from-octopress/index.html","hash":"6adb90a8500ccebb195d75acaee182699173d5cc","modified":1582790217420},{"_id":"public/2016/02/26/app-image-compress-upload-to-server/index.html","hash":"0b414de608e273c2684671da7ddb93d6e1407a95","modified":1582790217420},{"_id":"public/2016/01/26/universal-links/index.html","hash":"d9f2c96df8be2adbbffe87ccaabcfca5a2a4302f","modified":1582790217420},{"_id":"public/2016/01/17/ios-devices-info/index.html","hash":"508a9b0ea5d0c5d32e7fadbd9528d3872afc1722","modified":1582790217420},{"_id":"public/2015/12/27/an-automated-script-for-building-archiving-submission-sending-emails/index.html","hash":"0ffc8bf9f6bbb6a6a7f51a8ffbd01b1eeaec3201","modified":1582790217420},{"_id":"public/2015/09/29/adapt-to-xcode-7-and-ios-9/index.html","hash":"ec8c81646071f7c5b9966c4c41d317fff1a561dc","modified":1582790217420},{"_id":"public/2015/12/05/review-of-the-devil's-advocate/index.html","hash":"438912854bb06b6d208c71c6c83da4d42adc2447","modified":1582790217420},{"_id":"public/2015/09/14/going-hiking-through-the-tung-west-chung-coast/index.html","hash":"84106fe7ee49ebe58af47b662df16c21767d0579","modified":1582790217420},{"_id":"public/2015/07/23/the-most-normal-but-warm-moment/index.html","hash":"bd589776cdb088572b421aac4886834b5a7cdb33","modified":1582790217420},{"_id":"public/2015/06/07/add-category-to-octopress/index.html","hash":"cdf5abd36a1f3d287eff996351b5b3a5f9cc05f9","modified":1582790217420},{"_id":"public/2015/06/07/github-pages-ruby-markdown-jekyll-octopress/index.html","hash":"8fd76043ccd9596e77117acc57f85fd96c669d17","modified":1582790217420},{"_id":"public/2015/06/07/make-visit-faster/index.html","hash":"c65cc38ac7a316788bb2814dd20cf1868a2f753c","modified":1582790217420},{"_id":"public/2015/06/07/new-a-page-on-navigation/index.html","hash":"776ecf4603fb3536b47f14b2412f1e7bb196fbd1","modified":1582790217420},{"_id":"public/2015/06/07/sitemap-of-your-octopress-blog/index.html","hash":"8ae8883418a74d7b6e9af66179c9a3955fea89de","modified":1582790217420},{"_id":"public/2015/06/07/seo-about-octopress/index.html","hash":"cdaee67275b75bdb8cc4a3d9d9abf454dafaf696","modified":1582790217420},{"_id":"public/2015/06/06/use-code-block-without-analysis/index.html","hash":"079fe45530f6c12eb3995523662c6c05905c56b4","modified":1582790217420},{"_id":"public/2015/06/01/add-visitors-counter-to-octopress/index.html","hash":"42acbe3f343165e5cea5a409808e3e67941e416f","modified":1582790217420},{"_id":"public/2015/06/01/add-comment-component-to-octopress/index.html","hash":"ca586740dc13407d01f070dfd9b0d5f7d1fc18b7","modified":1582790217420},{"_id":"public/2015/03/16/happiness-which-has-gone/index.html","hash":"d68347ea4290fd11d5da1791343e81834911cbe4","modified":1582790217420},{"_id":"public/2015/03/07/share-some-experience-in-using-git-in-my-project/index.html","hash":"b1c6e6f986cea70ee36b43cc15d7c73e7a89074a","modified":1582790217420},{"_id":"public/2015/02/22/scroll-to-top-for-my-octopress-blog/index.html","hash":"82fff51a2ef5dcb12b6ffeaacc67e246aa828106","modified":1582790217420},{"_id":"public/2015/02/22/show-summary-of-post/index.html","hash":"04e669c6d8bf31e4ed0af8873b5d49ce30b6320a","modified":1582790217420},{"_id":"public/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/index.html","hash":"da8206eef4a51b78de232afb5a145283f9cfc682","modified":1582790217421},{"_id":"public/categories/blog/index.html","hash":"ad715652282ba1ed91a390d044c936bd41e6ae68","modified":1582790217421},{"_id":"public/categories/life/index.html","hash":"a347aa4e94596d233146a9575e47609e0551e85d","modified":1582790217421},{"_id":"public/categories/Tech/index.html","hash":"d55d44a53ff420e4034164b1b8e7102aff67450a","modified":1582790217421},{"_id":"public/categories/iOS/index.html","hash":"76f9ec50a6f1944b462caf881c7f4aa2567d8621","modified":1582790217421},{"_id":"public/index.html","hash":"3cb9627e107759a1db9375df27caa7cedd17a674","modified":1582790217421},{"_id":"public/page/2/index.html","hash":"eab4f981f57fd33cadc76722c582302adbdb8cde","modified":1582790217421},{"_id":"public/tags/Octopress/index.html","hash":"7b22a88e0dc0f45b499e3e56ba2e9b1ff5b0cb28","modified":1582790217421},{"_id":"public/tags/life/index.html","hash":"0d1deefcad14e18f9ba62db703a710a98b1e7df2","modified":1582790217421},{"_id":"public/tags/iOS/index.html","hash":"b1d4b2682a2af2c7ddc8a40f24dc36cb4d137fbf","modified":1582790217421},{"_id":"public/archives/index.html","hash":"f2ebc3e9b9bb0c955a6c126d460e751aae7b4786","modified":1582790217421},{"_id":"public/archives/page/2/index.html","hash":"3794efe92d03a405307471fae50a3152aaaa6fe4","modified":1582790217421},{"_id":"public/archives/page/3/index.html","hash":"b7232d82cd34da0cec4bd5a9681b65aca75e0700","modified":1582790217421},{"_id":"public/archives/2015/index.html","hash":"db218628baebcc7d68f6e7381825fe2dbbcd0d5a","modified":1582790217421},{"_id":"public/archives/page/4/index.html","hash":"f7a3e43a4e862792753851fcd2287d1f6624600f","modified":1582790217421},{"_id":"public/archives/2015/page/2/index.html","hash":"adc357626ffc7e9b669caf57b57388d7892f6c94","modified":1582790217421},{"_id":"public/archives/2015/06/index.html","hash":"c833796d1c2df29a1d386dc5334c887df4e0ee74","modified":1582790217421},{"_id":"public/archives/2016/index.html","hash":"8c44adca924fb7af71ba751b035642f94494642d","modified":1582790217421},{"_id":"public/archives/2019/index.html","hash":"d5f58cae045d29f92a793d0bc2518e14ceee6d33","modified":1582790217418},{"_id":"public/CNAME","hash":"f0c7488e51f196bfc1e383dbfc7c02f005417c6d","modified":1582790217433},{"_id":"public/tencent8407463772477251935.txt","hash":"44882e53c532072f629a2f80ccca39c4f65a7188","modified":1582790217433},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582790217433},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1582790217433},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582790217433},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1582790217433},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1582790217433},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1582790217433},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1582790217433},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1582790217433},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1582790217433},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1582790217433},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582790217433},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1582790217434},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582790217433},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582790217434},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582790217434},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1582790217434},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1582790217434},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1582790217434},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1582790217434},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1582790217434},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582790217434},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582790217434},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582790217434},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582790217434},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582790217434},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582790217434},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1582790217434},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1582790217434},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1582790217434},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1582790217434},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1582790217434},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1582790217435},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582790217435},{"_id":"public/2016/01/17/ios-devices-info/304530-f1e621f5f6cd6666.gif","hash":"8251ceb202689f36918b49af5539035cd783187f","modified":1582790217435},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582790217764},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582790217769},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1582790217780},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1582790217780},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1582790217780},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1582790217780},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1582790217780},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1582790217780},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1582790217780},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1582790217780},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1582790217780},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1582790217780},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1582790217780},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1582790217780},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1582790217780},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1582790217780},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1582790217780},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1582790217780},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1582790217780},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1582790217780},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1582790217780},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1582790217780},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1582790217780},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1582790217781},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1582790217781},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1582790217781},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1582790217781},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582790217781},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1582790217781},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1582790217781},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1582790217781},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1582790217781},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1582790217781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582790217781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1582790217781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1582790217781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582790217781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1582790217781},{"_id":"public/lib/fastclick/README.html","hash":"e25da2e29e6947b704b43611b325e8ad65134e42","modified":1582790217781},{"_id":"public/lib/jquery_lazyload/README.html","hash":"14c63ba441fb49b26032e72e9cb67c67c8df19f1","modified":1582790217781},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1582790217781},{"_id":"public/css/main.css","hash":"7fb01ec3318cd9833ae7a7209b1f06403944e43e","modified":1582790217782},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1582790217782},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1582790217782},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1582790217782},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1582790217782},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1582790217782},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582790217782},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1582790217782},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1582790217782},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1582790217782},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1582790217782},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1582790217782},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1582790217782},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1582790217782},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582790217782},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582790217782},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1582790217783},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1582790217782},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1582790217783},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1582790217783},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1582790217783},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1582790217783},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582790217783},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1582790217784},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135311.jpg","hash":"a78fe15d73c0651592dd574582cbea6c92df455b","modified":1582790217784},{"_id":"public/uploads/avatar.jpeg","hash":"fb035dd27f6635d5da49509ef5f54253aad3f115","modified":1582790217793},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150437.jpg","hash":"464720ed2257cf3dd50b2be68aaabe7d4a8d1402","modified":1582790217793},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150422.jpg","hash":"38d9733111bcdbb749d6ec10ed8ea75c26b1cbe9","modified":1582790217795},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135633.jpg","hash":"41a9b83fa1264e4f414dfb09ce020c9c0cd1beb0","modified":1582790217795},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424145603.jpg","hash":"f9e4dc28835f96439362ef10c89a803206c6a463","modified":1582790217795},{"_id":"public/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150404.jpg","hash":"82e48c9b99d16831873f1dec473cc7803531bece","modified":1582790217795},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1582790217802},{"_id":"public/2019/08/03/mac-app-drag-and-drop-produce-app-icon/readme.gif","hash":"59aa0a98e2b8d4e6f74a57599dbd6d840010acd3","modified":1582790217802},{"_id":"public/2016/05/31/ios-in-app-purchase-iap/304530-8e271b6afd1bc2eb.png","hash":"f745d941229a55030c9e8f850230247d05ac235b","modified":1582790217801},{"_id":"public/2016/05/31/ios-in-app-purchase-iap/304530-e6031ed92ab8fac0.png","hash":"d33dde30e24fd7d8910962826720795416b67d35","modified":1582790217803},{"_id":"public/2019/09/22/scrollview-auto-play-video/demo.gif","hash":"c259ae4c26f3b75fafba9e6996e4809147b735b9","modified":1582790217806},{"_id":"public/2016/07/31/ios-live-comment-praise/304530-9c6fd4a095528f98.gif","hash":"9994f56a048a497db309501ed95c56217bf270e4","modified":1582790217808}],"Category":[{"name":"blog","_id":"ck74fy7pb000407eifclv4o6a"},{"name":"life","_id":"ck74fy7pm000m07eig5y32biu"},{"name":"Tech","_id":"ck74fy7po000u07eid7lxus7y"},{"name":"iOS","_id":"ck74fy7pv001l07eiyqhlgh5l"},{"name":"macOS","_id":"ck74fy7qc003807ei022mrayk"}],"Data":[],"Page":[{"title":"categories","date":"2015-03-07T08:00:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2015-03-07 16:00:00\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-02-25T15:23:08.606Z","path":"categories/index.html","layout":"page","_id":"ck74fy7p5000007ei8gyavq52","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2015-03-07T08:00:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2015-03-07 16:00:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-02-25T15:23:08.607Z","path":"tags/index.html","layout":"page","_id":"ck74fy7p9000207ei5drmipra","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"为基于Octopress的博客添加“回到顶部”的功能","date":"2015-02-22T08:00:00.000Z","keywords":"blog Octopress","description":"为基于Octopress的博客添加“回到顶部”的功能","_content":"\n\n\n> <http://www.scrolltotop.com/>\n\n这个网站提供了数十种回到顶部的样式，可以根据自己的需要，添加所中意的widget。\n\n### 如何添加\n\n在source\\_includes\\custom目录下新建scroll_to_top.html，存放widget代码。\n\n```\n<script type=\"text/javascript\" src=\"http://arrow.scrolltotop.com/arrow64.js\"></script>\n<noscript>Not seeing a <a href=\"http://www.scrolltotop.com/\">Scroll to Top Button</a>? Go to our FAQ page for more info.</noscript>\n```\n\n默认Octopress引入了jquery.min.js，所以没有必要再次引入。\n\n回到顶部功能，不仅仅要在文章页生效，同时也需要对类似归档页面有效才完美。于是需要找一个公用的位置。这个位置就是source\\_layouts\\default.html。\n\n修改default.html文件,在body体末尾添加:\n\n```\n{% raw %}{% include custom/scroll_to_top.html %}{% endraw %}\n```\n\n到这里，“回到顶部”的功能完成。\n\n### 相关链接\n\nOctopress添加回到顶部功能\n\n> <http://www.tuicool.com/articles/qu6ZfiV>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-02-22-scroll-to-top-for-my-octopress-blog.md","raw":"---\ntitle: 为基于Octopress的博客添加“回到顶部”的功能\ndate: 2015-02-22 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 为基于Octopress的博客添加“回到顶部”的功能\n---\n\n\n\n> <http://www.scrolltotop.com/>\n\n这个网站提供了数十种回到顶部的样式，可以根据自己的需要，添加所中意的widget。\n\n### 如何添加\n\n在source\\_includes\\custom目录下新建scroll_to_top.html，存放widget代码。\n\n```\n<script type=\"text/javascript\" src=\"http://arrow.scrolltotop.com/arrow64.js\"></script>\n<noscript>Not seeing a <a href=\"http://www.scrolltotop.com/\">Scroll to Top Button</a>? Go to our FAQ page for more info.</noscript>\n```\n\n默认Octopress引入了jquery.min.js，所以没有必要再次引入。\n\n回到顶部功能，不仅仅要在文章页生效，同时也需要对类似归档页面有效才完美。于是需要找一个公用的位置。这个位置就是source\\_layouts\\default.html。\n\n修改default.html文件,在body体末尾添加:\n\n```\n{% raw %}{% include custom/scroll_to_top.html %}{% endraw %}\n```\n\n到这里，“回到顶部”的功能完成。\n\n### 相关链接\n\nOctopress添加回到顶部功能\n\n> <http://www.tuicool.com/articles/qu6ZfiV>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"scroll-to-top-for-my-octopress-blog","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7p6000107eikz1xx57q","content":"<blockquote>\n<p><a href=\"http://www.scrolltotop.com/\" target=\"_blank\" rel=\"noopener\">http://www.scrolltotop.com/</a></p>\n</blockquote>\n<p>这个网站提供了数十种回到顶部的样式，可以根据自己的需要，添加所中意的widget。</p>\n<h3 id=\"如何添加\"><a href=\"#如何添加\" class=\"headerlink\" title=\"如何添加\"></a>如何添加</h3><p>在source_includes\\custom目录下新建scroll_to_top.html，存放widget代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://arrow.scrolltotop.com/arrow64.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;noscript&gt;Not seeing a &lt;a href=&quot;http://www.scrolltotop.com/&quot;&gt;Scroll to Top Button&lt;/a&gt;? Go to our FAQ page for more info.&lt;/noscript&gt;</span><br></pre></td></tr></table></figure>\n\n<p>默认Octopress引入了jquery.min.js，所以没有必要再次引入。</p>\n<p>回到顶部功能，不仅仅要在文章页生效，同时也需要对类似归档页面有效才完美。于是需要找一个公用的位置。这个位置就是source_layouts\\default.html。</p>\n<p>修改default.html文件,在body体末尾添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% include custom/scroll_to_top.html %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，“回到顶部”的功能完成。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>Octopress添加回到顶部功能</p>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/qu6ZfiV\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/qu6ZfiV</a></p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"http://www.scrolltotop.com/\" target=\"_blank\" rel=\"noopener\">http://www.scrolltotop.com/</a></p>\n</blockquote>\n<p>这个网站提供了数十种回到顶部的样式，可以根据自己的需要，添加所中意的widget。</p>\n<h3 id=\"如何添加\"><a href=\"#如何添加\" class=\"headerlink\" title=\"如何添加\"></a>如何添加</h3><p>在source_includes\\custom目录下新建scroll_to_top.html，存放widget代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://arrow.scrolltotop.com/arrow64.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;noscript&gt;Not seeing a &lt;a href=&quot;http://www.scrolltotop.com/&quot;&gt;Scroll to Top Button&lt;/a&gt;? Go to our FAQ page for more info.&lt;/noscript&gt;</span><br></pre></td></tr></table></figure>\n\n<p>默认Octopress引入了jquery.min.js，所以没有必要再次引入。</p>\n<p>回到顶部功能，不仅仅要在文章页生效，同时也需要对类似归档页面有效才完美。于是需要找一个公用的位置。这个位置就是source_layouts\\default.html。</p>\n<p>修改default.html文件,在body体末尾添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% include custom/scroll_to_top.html %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，“回到顶部”的功能完成。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>Octopress添加回到顶部功能</p>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/qu6ZfiV\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/qu6ZfiV</a></p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"让Octopress博文列表显示摘要","date":"2015-02-22T08:00:00.000Z","keywords":"blog Octopress","description":"让Octopress博文列表显示摘要","_content":"\n默认情况下，博客首页文章列表会展示文章全文，可以配置成只展现一部分。\n\n首先在每篇文章你想展示的缩略部分最后增加标记：\n\n```\n<!-- more -->\n```\n\n修改_config.yml中的对应设置项为：\n\n```\nexcerpt_link: \"阅读更多 →\"\n```\n\n然后文件保存为UTF-8字符编码格式。\n\n如果希望默认不显示摘要和内容，并且在新建的时候就配置好，可以修改 Rakefile 文件。\n\n```\nputs \"Creating new post: #{filename}\"\n\topen(filename, 'w') do |post|\n\tpost.puts \"---\"\n    ......\n```\n\n在上面一段的最后面加上：\n\n```\npost.puts \"<!-- more -->\"\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-02-22-show-summary-of-post.md","raw":"---\ntitle: 让Octopress博文列表显示摘要\ndate: 2015-02-22 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 让Octopress博文列表显示摘要\n---\n\n默认情况下，博客首页文章列表会展示文章全文，可以配置成只展现一部分。\n\n首先在每篇文章你想展示的缩略部分最后增加标记：\n\n```\n<!-- more -->\n```\n\n修改_config.yml中的对应设置项为：\n\n```\nexcerpt_link: \"阅读更多 →\"\n```\n\n然后文件保存为UTF-8字符编码格式。\n\n如果希望默认不显示摘要和内容，并且在新建的时候就配置好，可以修改 Rakefile 文件。\n\n```\nputs \"Creating new post: #{filename}\"\n\topen(filename, 'w') do |post|\n\tpost.puts \"---\"\n    ......\n```\n\n在上面一段的最后面加上：\n\n```\npost.puts \"<!-- more -->\"\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"show-summary-of-post","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7p9000307eixteg8hyf","content":"<p>默认情况下，博客首页文章列表会展示文章全文，可以配置成只展现一部分。</p>\n<p>首先在每篇文章你想展示的缩略部分最后增加标记：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改_config.yml中的对应设置项为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link: &quot;阅读更多 →&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后文件保存为UTF-8字符编码格式。</p>\n<p>如果希望默认不显示摘要和内容，并且在新建的时候就配置好，可以修改 Rakefile 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new post: #&#123;filename&#125;&quot;</span><br><span class=\"line\">\topen(filename, &apos;w&apos;) do |post|</span><br><span class=\"line\">\tpost.puts &quot;---&quot;</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n\n<p>在上面一段的最后面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post.puts &quot;&lt;!-- more --&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>默认情况下，博客首页文章列表会展示文章全文，可以配置成只展现一部分。</p>\n<p>首先在每篇文章你想展示的缩略部分最后增加标记：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改_config.yml中的对应设置项为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link: &quot;阅读更多 →&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后文件保存为UTF-8字符编码格式。</p>\n<p>如果希望默认不显示摘要和内容，并且在新建的时候就配置好，可以修改 Rakefile 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new post: #&#123;filename&#125;&quot;</span><br><span class=\"line\">\topen(filename, &apos;w&apos;) do |post|</span><br><span class=\"line\">\tpost.puts &quot;---&quot;</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n\n<p>在上面一段的最后面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post.puts &quot;&lt;!-- more --&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"Windows下基于Github Pages创建Octopress博客","date":"2015-02-22T08:00:00.000Z","keywords":"blog Octopress","description":"Windows下基于Github Pages创建Octopress博客","_content":"\n# 安装和配置必要环境\n\n## Git\n\n> <http://git-scm.com/downloads>\n\n1. 安装后在github上新建仓库，命名格式为*USERNAME*.github.io\n2. 配置SSH密钥：<https://help.github.com/articles/generating-ssh-keys/>\n\n## Ruby\n\n> <http://rubyinstaller.org/downloads/>\n\n（Windows操作系统的还需额外安装**RubyDevKit**，下载地址同上）\n\nRubyDevKit下载后解压，进入解压后的文件夹，执行\n\n```\nruby dk.rb init\n```\n\n注：两个安装路径中都不能有空格。\n\n如果安装有多个ruby版本，请修改DevKit安装目录下的config.yml。\n\n```\nruby dk.rb install\n```\n\n## Octopress\n\n```\ngit clone git://github.com/imathis/octopress.git YOUR_BLOG_PATH\ncd YOUR_BLOG_PATH\ngem install bundler\nbundle install\nrake install（安装Octopress默认主题）\nrake setup_github_pages(根据提示输入仓库地址)\nrake generate（生成静态页面，把source的内容放到public）\nrake preview（可在http://localhost:4000预览）\n```\n\n如果网速较慢可以切换到淘宝源：\n\n```\ngem sources -a https://ruby.taobao.org/\n```\n\n在执行`bundle install`的时候使用的源是目录下的Gemfile文件中的第一行，可以修改后再执行：\n\n```\nsource 'https://ruby.taobao.org/'\n```\n\n## 配置博客\n\n修改 _config.yml 文件，这个文件包含 Main Configs、Jekyll & Plugins 和 3rd Party Settings 三个部分。在这里，我们只需要修改 Main Configs 中的 title 、 subtitle 和 author 。注意如果包含中文则保存为UTF-8。\n\n```\ntitle: XXX\nsubtitle: XXX\nauthor: XXX\n```\n\n# 域名购买和配置\n\n- 在godaddy网站购买域名：[https://www.godaddy.com](https://www.godaddy.com/)\n\n- 登录godaddy，新建一个域名，Domain Name为*YOUR_DOMAIN_NAME*，将Nameservers修改为**F1G1NS1.DNSPOD.NET**和**F1G1NS2.DNSPOD.NET**。\n\n- 在dnspod注册一个帐号：<https://www.dnspod.cn/>\n\n- 登录dnspod，添加域名，然后添加两条记录如下：\n\n| 主机记录 | 记录类型 | 记录值               |\n| -------- | -------- | -------------------- |\n| @        | A        | 199.27.76.133        |\n| www      | CNAME    | *USERNAME.github.io* |\n\n（A记录的记录值可能会变，参考<https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/> ）\n\n- 在*YOUR_BLOG_PATH\\source*目录下创建文本文件，命名为CNAME，输入*YOUR_DOMAIN_NAME*，保存退出。\n\n- 在*YOUR_BLOG_PATH*目录下命令行执行以下命令：\n\n```\nrake generate\nrake deploy\n```\n\n- 完成后打开链接即可看到博客内容。\n\n# 编写博客\n\n安装markdown编辑器，本文使用的是Typora\n\n> <http://typora.io/>\n\n在*YOUR_BLOG_PATH\\source*目录下执行\n\n```\nrake new_post[\"title\"]\n```\n\n此时会在*YOUR_BLOG_PATH\\source_posts*目录下生成一个.markdown文件，文件名格式为**YYYY-MM-DD-word-word.markdown**，用markdown编辑器编辑该文件，编写后执行以下命令：\n\n```\nrake generate\nrake deploy\n```\n\n以上语句可以合并为\n\n```\nrake gen_deploy\n```\n\n要生成页面可以用rake new_page：\n\n```\nrake new_page[\"about\"]\n```\n\n页面即相当于点击导航栏的Blog和Archives看到的页面，Blog和Archives其实就是两个页面。\n\n# 相关说明\n\n*USERNAME*：在github上注册的用户名\n\n*YOUR_BLOG_PATH*：本地存放的博客路径\n\n*YOUR_DOMAIN_NAME*：购买的域名名称\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-02-22-start-a-blog-on-github-pages-base-on-octopress.md","raw":"---\ntitle: Windows下基于Github Pages创建Octopress博客\ndate: 2015-02-22 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: Windows下基于Github Pages创建Octopress博客\n---\n\n# 安装和配置必要环境\n\n## Git\n\n> <http://git-scm.com/downloads>\n\n1. 安装后在github上新建仓库，命名格式为*USERNAME*.github.io\n2. 配置SSH密钥：<https://help.github.com/articles/generating-ssh-keys/>\n\n## Ruby\n\n> <http://rubyinstaller.org/downloads/>\n\n（Windows操作系统的还需额外安装**RubyDevKit**，下载地址同上）\n\nRubyDevKit下载后解压，进入解压后的文件夹，执行\n\n```\nruby dk.rb init\n```\n\n注：两个安装路径中都不能有空格。\n\n如果安装有多个ruby版本，请修改DevKit安装目录下的config.yml。\n\n```\nruby dk.rb install\n```\n\n## Octopress\n\n```\ngit clone git://github.com/imathis/octopress.git YOUR_BLOG_PATH\ncd YOUR_BLOG_PATH\ngem install bundler\nbundle install\nrake install（安装Octopress默认主题）\nrake setup_github_pages(根据提示输入仓库地址)\nrake generate（生成静态页面，把source的内容放到public）\nrake preview（可在http://localhost:4000预览）\n```\n\n如果网速较慢可以切换到淘宝源：\n\n```\ngem sources -a https://ruby.taobao.org/\n```\n\n在执行`bundle install`的时候使用的源是目录下的Gemfile文件中的第一行，可以修改后再执行：\n\n```\nsource 'https://ruby.taobao.org/'\n```\n\n## 配置博客\n\n修改 _config.yml 文件，这个文件包含 Main Configs、Jekyll & Plugins 和 3rd Party Settings 三个部分。在这里，我们只需要修改 Main Configs 中的 title 、 subtitle 和 author 。注意如果包含中文则保存为UTF-8。\n\n```\ntitle: XXX\nsubtitle: XXX\nauthor: XXX\n```\n\n# 域名购买和配置\n\n- 在godaddy网站购买域名：[https://www.godaddy.com](https://www.godaddy.com/)\n\n- 登录godaddy，新建一个域名，Domain Name为*YOUR_DOMAIN_NAME*，将Nameservers修改为**F1G1NS1.DNSPOD.NET**和**F1G1NS2.DNSPOD.NET**。\n\n- 在dnspod注册一个帐号：<https://www.dnspod.cn/>\n\n- 登录dnspod，添加域名，然后添加两条记录如下：\n\n| 主机记录 | 记录类型 | 记录值               |\n| -------- | -------- | -------------------- |\n| @        | A        | 199.27.76.133        |\n| www      | CNAME    | *USERNAME.github.io* |\n\n（A记录的记录值可能会变，参考<https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/> ）\n\n- 在*YOUR_BLOG_PATH\\source*目录下创建文本文件，命名为CNAME，输入*YOUR_DOMAIN_NAME*，保存退出。\n\n- 在*YOUR_BLOG_PATH*目录下命令行执行以下命令：\n\n```\nrake generate\nrake deploy\n```\n\n- 完成后打开链接即可看到博客内容。\n\n# 编写博客\n\n安装markdown编辑器，本文使用的是Typora\n\n> <http://typora.io/>\n\n在*YOUR_BLOG_PATH\\source*目录下执行\n\n```\nrake new_post[\"title\"]\n```\n\n此时会在*YOUR_BLOG_PATH\\source_posts*目录下生成一个.markdown文件，文件名格式为**YYYY-MM-DD-word-word.markdown**，用markdown编辑器编辑该文件，编写后执行以下命令：\n\n```\nrake generate\nrake deploy\n```\n\n以上语句可以合并为\n\n```\nrake gen_deploy\n```\n\n要生成页面可以用rake new_page：\n\n```\nrake new_page[\"about\"]\n```\n\n页面即相当于点击导航栏的Blog和Archives看到的页面，Blog和Archives其实就是两个页面。\n\n# 相关说明\n\n*USERNAME*：在github上注册的用户名\n\n*YOUR_BLOG_PATH*：本地存放的博客路径\n\n*YOUR_DOMAIN_NAME*：购买的域名名称\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"start-a-blog-on-github-pages-base-on-octopress","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pc000607eil6glyie0","content":"<h1 id=\"安装和配置必要环境\"><a href=\"#安装和配置必要环境\" class=\"headerlink\" title=\"安装和配置必要环境\"></a>安装和配置必要环境</h1><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><blockquote>\n<p><a href=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/downloads</a></p>\n</blockquote>\n<ol>\n<li>安装后在github上新建仓库，命名格式为<em>USERNAME</em>.github.io</li>\n<li>配置SSH密钥：<a href=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/generating-ssh-keys/</a></li>\n</ol>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><blockquote>\n<p><a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/downloads/</a></p>\n</blockquote>\n<p>（Windows操作系统的还需额外安装<strong>RubyDevKit</strong>，下载地址同上）</p>\n<p>RubyDevKit下载后解压，进入解压后的文件夹，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby dk.rb init</span><br></pre></td></tr></table></figure>\n\n<p>注：两个安装路径中都不能有空格。</p>\n<p>如果安装有多个ruby版本，请修改DevKit安装目录下的config.yml。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby dk.rb install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Octopress\"><a href=\"#Octopress\" class=\"headerlink\" title=\"Octopress\"></a>Octopress</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/imathis/octopress.git YOUR_BLOG_PATH</span><br><span class=\"line\">cd YOUR_BLOG_PATH</span><br><span class=\"line\">gem install bundler</span><br><span class=\"line\">bundle install</span><br><span class=\"line\">rake install（安装Octopress默认主题）</span><br><span class=\"line\">rake setup_github_pages(根据提示输入仓库地址)</span><br><span class=\"line\">rake generate（生成静态页面，把source的内容放到public）</span><br><span class=\"line\">rake preview（可在http://localhost:4000预览）</span><br></pre></td></tr></table></figure>\n\n<p>如果网速较慢可以切换到淘宝源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>在执行<code>bundle install</code>的时候使用的源是目录下的Gemfile文件中的第一行，可以修改后再执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://ruby.taobao.org/&apos;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><p>修改 _config.yml 文件，这个文件包含 Main Configs、Jekyll &amp; Plugins 和 3rd Party Settings 三个部分。在这里，我们只需要修改 Main Configs 中的 title 、 subtitle 和 author 。注意如果包含中文则保存为UTF-8。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: XXX</span><br><span class=\"line\">subtitle: XXX</span><br><span class=\"line\">author: XXX</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"域名购买和配置\"><a href=\"#域名购买和配置\" class=\"headerlink\" title=\"域名购买和配置\"></a>域名购买和配置</h1><ul>\n<li><p>在godaddy网站购买域名：<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">https://www.godaddy.com</a></p>\n</li>\n<li><p>登录godaddy，新建一个域名，Domain Name为<em>YOUR_DOMAIN_NAME</em>，将Nameservers修改为<strong>F1G1NS1.DNSPOD.NET</strong>和<strong>F1G1NS2.DNSPOD.NET</strong>。</p>\n</li>\n<li><p>在dnspod注册一个帐号：<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">https://www.dnspod.cn/</a></p>\n</li>\n<li><p>登录dnspod，添加域名，然后添加两条记录如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>主机记录</th>\n<th>记录类型</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@</td>\n<td>A</td>\n<td>199.27.76.133</td>\n</tr>\n<tr>\n<td>www</td>\n<td>CNAME</td>\n<td><em>USERNAME.github.io</em></td>\n</tr>\n</tbody></table>\n<p>（A记录的记录值可能会变，参考<a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a> ）</p>\n<ul>\n<li><p>在<em>YOUR_BLOG_PATH\\source</em>目录下创建文本文件，命名为CNAME，输入<em>YOUR_DOMAIN_NAME</em>，保存退出。</p>\n</li>\n<li><p>在<em>YOUR_BLOG_PATH</em>目录下命令行执行以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成后打开链接即可看到博客内容。</li>\n</ul>\n<h1 id=\"编写博客\"><a href=\"#编写博客\" class=\"headerlink\" title=\"编写博客\"></a>编写博客</h1><p>安装markdown编辑器，本文使用的是Typora</p>\n<blockquote>\n<p><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">http://typora.io/</a></p>\n</blockquote>\n<p>在<em>YOUR_BLOG_PATH\\source</em>目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_post[&quot;title&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>此时会在<em>YOUR_BLOG_PATH\\source_posts</em>目录下生成一个.markdown文件，文件名格式为<strong>YYYY-MM-DD-word-word.markdown</strong>，用markdown编辑器编辑该文件，编写后执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br></pre></td></tr></table></figure>\n\n<p>以上语句可以合并为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake gen_deploy</span><br></pre></td></tr></table></figure>\n\n<p>要生成页面可以用rake new_page：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&quot;about&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>页面即相当于点击导航栏的Blog和Archives看到的页面，Blog和Archives其实就是两个页面。</p>\n<h1 id=\"相关说明\"><a href=\"#相关说明\" class=\"headerlink\" title=\"相关说明\"></a>相关说明</h1><p><em>USERNAME</em>：在github上注册的用户名</p>\n<p><em>YOUR_BLOG_PATH</em>：本地存放的博客路径</p>\n<p><em>YOUR_DOMAIN_NAME</em>：购买的域名名称</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装和配置必要环境\"><a href=\"#安装和配置必要环境\" class=\"headerlink\" title=\"安装和配置必要环境\"></a>安装和配置必要环境</h1><h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><blockquote>\n<p><a href=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/downloads</a></p>\n</blockquote>\n<ol>\n<li>安装后在github上新建仓库，命名格式为<em>USERNAME</em>.github.io</li>\n<li>配置SSH密钥：<a href=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/generating-ssh-keys/</a></li>\n</ol>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><blockquote>\n<p><a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">http://rubyinstaller.org/downloads/</a></p>\n</blockquote>\n<p>（Windows操作系统的还需额外安装<strong>RubyDevKit</strong>，下载地址同上）</p>\n<p>RubyDevKit下载后解压，进入解压后的文件夹，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby dk.rb init</span><br></pre></td></tr></table></figure>\n\n<p>注：两个安装路径中都不能有空格。</p>\n<p>如果安装有多个ruby版本，请修改DevKit安装目录下的config.yml。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby dk.rb install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Octopress\"><a href=\"#Octopress\" class=\"headerlink\" title=\"Octopress\"></a>Octopress</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/imathis/octopress.git YOUR_BLOG_PATH</span><br><span class=\"line\">cd YOUR_BLOG_PATH</span><br><span class=\"line\">gem install bundler</span><br><span class=\"line\">bundle install</span><br><span class=\"line\">rake install（安装Octopress默认主题）</span><br><span class=\"line\">rake setup_github_pages(根据提示输入仓库地址)</span><br><span class=\"line\">rake generate（生成静态页面，把source的内容放到public）</span><br><span class=\"line\">rake preview（可在http://localhost:4000预览）</span><br></pre></td></tr></table></figure>\n\n<p>如果网速较慢可以切换到淘宝源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<p>在执行<code>bundle install</code>的时候使用的源是目录下的Gemfile文件中的第一行，可以修改后再执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://ruby.taobao.org/&apos;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><p>修改 _config.yml 文件，这个文件包含 Main Configs、Jekyll &amp; Plugins 和 3rd Party Settings 三个部分。在这里，我们只需要修改 Main Configs 中的 title 、 subtitle 和 author 。注意如果包含中文则保存为UTF-8。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: XXX</span><br><span class=\"line\">subtitle: XXX</span><br><span class=\"line\">author: XXX</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"域名购买和配置\"><a href=\"#域名购买和配置\" class=\"headerlink\" title=\"域名购买和配置\"></a>域名购买和配置</h1><ul>\n<li><p>在godaddy网站购买域名：<a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">https://www.godaddy.com</a></p>\n</li>\n<li><p>登录godaddy，新建一个域名，Domain Name为<em>YOUR_DOMAIN_NAME</em>，将Nameservers修改为<strong>F1G1NS1.DNSPOD.NET</strong>和<strong>F1G1NS2.DNSPOD.NET</strong>。</p>\n</li>\n<li><p>在dnspod注册一个帐号：<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">https://www.dnspod.cn/</a></p>\n</li>\n<li><p>登录dnspod，添加域名，然后添加两条记录如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>主机记录</th>\n<th>记录类型</th>\n<th>记录值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@</td>\n<td>A</td>\n<td>199.27.76.133</td>\n</tr>\n<tr>\n<td>www</td>\n<td>CNAME</td>\n<td><em>USERNAME.github.io</em></td>\n</tr>\n</tbody></table>\n<p>（A记录的记录值可能会变，参考<a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a> ）</p>\n<ul>\n<li><p>在<em>YOUR_BLOG_PATH\\source</em>目录下创建文本文件，命名为CNAME，输入<em>YOUR_DOMAIN_NAME</em>，保存退出。</p>\n</li>\n<li><p>在<em>YOUR_BLOG_PATH</em>目录下命令行执行以下命令：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成后打开链接即可看到博客内容。</li>\n</ul>\n<h1 id=\"编写博客\"><a href=\"#编写博客\" class=\"headerlink\" title=\"编写博客\"></a>编写博客</h1><p>安装markdown编辑器，本文使用的是Typora</p>\n<blockquote>\n<p><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">http://typora.io/</a></p>\n</blockquote>\n<p>在<em>YOUR_BLOG_PATH\\source</em>目录下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_post[&quot;title&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>此时会在<em>YOUR_BLOG_PATH\\source_posts</em>目录下生成一个.markdown文件，文件名格式为<strong>YYYY-MM-DD-word-word.markdown</strong>，用markdown编辑器编辑该文件，编写后执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br></pre></td></tr></table></figure>\n\n<p>以上语句可以合并为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake gen_deploy</span><br></pre></td></tr></table></figure>\n\n<p>要生成页面可以用rake new_page：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&quot;about&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>页面即相当于点击导航栏的Blog和Archives看到的页面，Blog和Archives其实就是两个页面。</p>\n<h1 id=\"相关说明\"><a href=\"#相关说明\" class=\"headerlink\" title=\"相关说明\"></a>相关说明</h1><p><em>USERNAME</em>：在github上注册的用户名</p>\n<p><em>YOUR_BLOG_PATH</em>：本地存放的博客路径</p>\n<p><em>YOUR_DOMAIN_NAME</em>：购买的域名名称</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"那些消逝的美好","date":"2015-03-16T08:00:00.000Z","description":"那些消逝的美好","_content":"\n消逝的美好的事物都占了个大便宜，因为它们已经过去了，所以不会变坏，所以能一直保持着美好，在那些脑海里。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-03-16-happiness-which-has-gone.md","raw":"---\ntitle: 那些消逝的美好\ndate: 2015-03-16 16:00:00\ntags: \n     - life\ncategories: life\ndescription: 那些消逝的美好\n---\n\n消逝的美好的事物都占了个大便宜，因为它们已经过去了，所以不会变坏，所以能一直保持着美好，在那些脑海里。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"happiness-which-has-gone","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pd000707eitvy0wj5t","content":"<p>消逝的美好的事物都占了个大便宜，因为它们已经过去了，所以不会变坏，所以能一直保持着美好，在那些脑海里。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>消逝的美好的事物都占了个大便宜，因为它们已经过去了，所以不会变坏，所以能一直保持着美好，在那些脑海里。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"分享项目中使用Git的一些经验","date":"2015-03-07T08:00:00.000Z","keywords":"git","description":"分享项目中使用Git的一些经验","_content":"# 目录\n- 前言\n- Git必须了解的一些知识\n- Git的GUI客户端\n- 经验之谈\n\n# 前言\n回想了这一年来的经验，觉得好饱满，团队磨合得很快，也非常顺利，一切都有条不紊地进行着。总结一下这一年来使用Git的经验，特别是在项目使用过程中解决提交冲突、版本发布处理和代码回滚修复BUG这些方面的一些经验。\n\n本文不讲使用git命令或者使用Git客户端的操作，这些会另开一篇文章讲解，只讲原理。\n\n文中*斜体字内容*是引用自网上。\n\n# Git必须了解的一些知识\n\n以前在做C++项目时用的是SVN，切换到Git需要一点点适应和慢慢地一些试错，从当前项目的需求来说，两者在提高工作效率方面达到的效果是差不多的。（当然，程序员总是偏执的，大部分总是觉得Git比SVN好，就像觉得Unix/Linux比Windows好）。网上可以搜到很多关于他们区别的文章，有兴趣可以看下。\n\n下面的一些知识，我觉得是比较重要的，特别是有助于准确地解决代码冲突、回滚修复BUG方面。\n\n## 什么是版本控制\n\n我举个简单例子就明白了：原先没有版本控制时，我们习惯用复制整个项目目录的方式来保存不同的版本，用注明时间或者版本号的方法来区分。而现在我们只需打个branch就行了，我们还可以具体看到每个版本间的区别，通过每个文件的log看到文件经过哪几次，什么样的修改。\n\n这样的优劣不明而喻了。\n\n*从根本上来讲 Git 是一套内容寻址 (content-addressable) 文件系统*，我觉得这句话说得很不错！\n\n## 分布式\n\nGit也有集中式版本库或服务器，*但更倾向于被使用于分布式模式*，所以我们从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。\n\n在不联网的情况下，仍然能够**提交文件，查看历史版本记录，创建项目分支**等。所以可以一直本地git commit，等到功能模块完成再git push上去。在实际工作中，我更喜欢短暂性地忽略远程仓库。\n\n可以想像到的一个场景是：在同一个项目中分别和不同工作小组的人相互协作哈哈。\n\nSVN是集中式的，我的理解是，集中式是为了让在不同系统上的开发者协同工作，但显而易见的缺点是中央服务器故障会严重影响协同工作，要是没有备份会有丢失数据的风险。\n\n## 文件的三种状态\n\n*对于任何一个文件，在Git内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库 中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。*\n\n由此可以看到，本地文件流转有三个工作区域：\n\n1. 本地仓库，如果git clone出来的话，就是其中.git的目录。\n2. Git的工作目录，从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的。\n3. 暂存区域。\n\n## 直接记录快照，而非差异比较\n\n*Git只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。*\n\n*Git并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。*\n\n*在保存到Git之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git一无所知。这项特性作为Git的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git都能立即察觉。*\n\n*Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。*\n\n*在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。*\n\n在解决冲突的时候经常会看到一串字母，这串字母就是这些索引了。\n\n## 指针\n\n我的理解，Git的任何的东西，如分支、记录等的实现都是依靠指针。\n\n比如创建一个分支，其实就是创建一个新的分支指针，然后这个指针指向了当前指定的commit对象。\n\n同样的，Git如何知道你当前在哪个分支上工作？它保存着一个名为HEAD的特别指针，指向你正在工作中的本地分支的指针（类似当前分支的别名）。可以试着查看下它的内容：\n\n```\n$ cat .git/HEAD\nref: refs/heads/master\n```\n\n所以有时解决冲突的时候，或者发生什么错误的时候经常可以看到HEAD这个单词。\n\n在解决很多问题的时候，我觉得把所有提交（commit）对象想像成叶子，组成一棵树，所有的分支等都是指针，指向某个commit对象，这样子可以想通很多事情。\n\n## 传输数据的协议\n\n*Git可以使用四种主要的协议来传输数据：本地传输，SSH协议，Git协议和HTTP协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。*\n\n具体上网看看咯，我们用HTTP/S协议。\n\n\n\n# Git的GUI客户端\n\n出于提高工作效率的目的下，选择一款GUI客户端是必要的（不要争论用命令行更好，实践证明很多复杂的操作用客户端更直观实际，这也是客户端存在的原因）。\n\n网上比较多的有几款：\n\n1. Github for Windows，官方客户端，比较美观，功能略少不过也够用\n2. SmartGit，功能较全，UI中规中矩\n3. SourceTree，Msysgit，TortoiseGit\n\n我用的是SmartGit，从普通的提交、拉取、建立分支、打Tag，到进一步的代码回滚、版本控制、解决冲突，都能满足我项目的需求。\n\n\n\n# 经验之谈\n\n纯粹是个人经验，有纰漏有错误的地方恳请指出。\n\n很多东西通过SmartGit完成，限于篇幅和时间关系，这里我只介绍一些原理，可能另开一篇讲解SmartGit的使用，特别是代码回滚和版本打包方面。\n\n## 正常操作流程\n\n正常流程一般是：\n\n1. 功能模块完整完成，并且至少是编译通过的\n2. 选择变动的文件（包括删除的、添加的），将它们变为staged\n3. commit提交\n4. 然后git pull，这时候会拉取线上的修改，可以看到工作目录的内容发生改变\n5. 有冲突的话，解决冲突。将它们变为staged，然后重新commit\n6. git push到所要的分支\n\n## 冲突解决\n\n这一方面Git帮我们处理得很不错了，至少目前发现过任何差错。Git一般会自动帮助我们进行代码的合并，在一些它无法决定的地方会提示出来让我们自己解决。\n\n所以其实冲突解决并不是什么可怕的事情，如果工作组中每个开发人员懂得如何处理，可以省去很多麻烦（不用争着谁先上传谁慢上传）。\n\n冲突发生在拉取远程仓库代码时，本地修改的数据和远程代码有冲突。于是实质就是，两个不同的提交对象造成的冲突。在冲突的文件中，Git会用类似于下面的格式将两个提交对象不同的地方区分开来：\n\n```\n<<<<<<< HEAD\nzzz\n=======\nzzzzz\n>>>>>>> 6853e5ff961e684d3a6c02d4d06183b5ff330dcc\n```\n\n“<<<<<<<”与“=======”之间的内容为本地的内容，“=======”与“>>>>>>>”之间的内容为远程的内容。\n\n上面的冲突情况是：本地某行内容是zzz的与线上代码冲突，冲突内容是zzzzz。你可以选择保留“zzz”或者“zzzzz”，只需把其他无用信息删除即可。\n\n在iOS开发中，冲突有另外两种特别的情况，分别是Storyboard文件冲突和项目文件冲突，特别是项目文件一旦冲突Xcode就无法识别项目文件的组织结构，导致无法显示项目的所有文件。其实解决办法也是一样的，查看该文件内容的时候，也是用上面提到的格式区分开的。\n\nStoryboard文件可以右键open as —> source code，修改冲突的地方后open as —> interface Builder，即可查看是否修改成功。\n\n项目文件只需用能打开文本的方式打开即可，如Vi之类的。\n\n## 版本提交处理和回滚修复BUG\n\n我们团队目前打包提交审核由我一人处理，所以我们的分工和流程如下：\n\n1. 版本开发完提交测试时，我开始在master分支最后一个commit对象处新建一个分支，命名为“当前外部版本号内部版本号”，如“2.8.3/38”。（其实内部版本号对于提交测试时，是个很有用的东西，在提交到App Store被退回的时候我才意识到，但我们一直没怎么用到）\n2. 把该分支push到服务器上\n3. 此时其他iOS开发人员是不需pull该分支的，可以照常在主分支上开发下一个迭代的需求。\n4. 当上一个迭代的版本出现BUG需要修复时，有两个解决方式：一个是在当前主分支修复，push，然后再切换到上一个版本的分支，cherry pick下主分支上修复BUG的commit（有可能需要解决冲突），然后再push，此时就push到上一个迭代版本的分支了。然后再发布上一个版本。二是切换到上一个版本的分支，修复后再回主分支cherry pick。\n5. 我们的流程是，如果是其他开发人员修复，则在主分支修复并push上去，然后我切换到上一个版本的分支，cherry pick后push，然后发布版本。如果是我修复，则看情况，一般采用第一种方便。\n6. 如果修复的内容在当前版本是已经不需要的了（如功能模块已经移除），则切换到上一个版本的分支修复后，主分支不需再cherry pick即可。\n\n\n\n## 关于打Tag\n\n*Tag对象非常像一个commit对象——包含一个标签，一组数据，一个消息和一个指针。最主要的区别就是Tag对象指向一个commit而不是一个tree。它就像是一个分支引用，但是不会变化——永远指向同一个commit，仅仅是提供一个更加友好的名字。*\n\n基于以上对于Tag对象的解释，我暂时还没发现Tag在自己项目中能有什么作用，最多就备注一些信息，但是每个commit提交时都会注明修改了什么，所以。。。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-03-07-share-some-experience-in-using-git-in-my-project.md","raw":"---\ntitle: 分享项目中使用Git的一些经验\ndate: 2015-03-07 16:00:00\ntags: \n     - git\ncategories: Tech\nkeywords: git\ndescription: 分享项目中使用Git的一些经验\n---\n# 目录\n- 前言\n- Git必须了解的一些知识\n- Git的GUI客户端\n- 经验之谈\n\n# 前言\n回想了这一年来的经验，觉得好饱满，团队磨合得很快，也非常顺利，一切都有条不紊地进行着。总结一下这一年来使用Git的经验，特别是在项目使用过程中解决提交冲突、版本发布处理和代码回滚修复BUG这些方面的一些经验。\n\n本文不讲使用git命令或者使用Git客户端的操作，这些会另开一篇文章讲解，只讲原理。\n\n文中*斜体字内容*是引用自网上。\n\n# Git必须了解的一些知识\n\n以前在做C++项目时用的是SVN，切换到Git需要一点点适应和慢慢地一些试错，从当前项目的需求来说，两者在提高工作效率方面达到的效果是差不多的。（当然，程序员总是偏执的，大部分总是觉得Git比SVN好，就像觉得Unix/Linux比Windows好）。网上可以搜到很多关于他们区别的文章，有兴趣可以看下。\n\n下面的一些知识，我觉得是比较重要的，特别是有助于准确地解决代码冲突、回滚修复BUG方面。\n\n## 什么是版本控制\n\n我举个简单例子就明白了：原先没有版本控制时，我们习惯用复制整个项目目录的方式来保存不同的版本，用注明时间或者版本号的方法来区分。而现在我们只需打个branch就行了，我们还可以具体看到每个版本间的区别，通过每个文件的log看到文件经过哪几次，什么样的修改。\n\n这样的优劣不明而喻了。\n\n*从根本上来讲 Git 是一套内容寻址 (content-addressable) 文件系统*，我觉得这句话说得很不错！\n\n## 分布式\n\nGit也有集中式版本库或服务器，*但更倾向于被使用于分布式模式*，所以我们从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。\n\n在不联网的情况下，仍然能够**提交文件，查看历史版本记录，创建项目分支**等。所以可以一直本地git commit，等到功能模块完成再git push上去。在实际工作中，我更喜欢短暂性地忽略远程仓库。\n\n可以想像到的一个场景是：在同一个项目中分别和不同工作小组的人相互协作哈哈。\n\nSVN是集中式的，我的理解是，集中式是为了让在不同系统上的开发者协同工作，但显而易见的缺点是中央服务器故障会严重影响协同工作，要是没有备份会有丢失数据的风险。\n\n## 文件的三种状态\n\n*对于任何一个文件，在Git内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库 中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。*\n\n由此可以看到，本地文件流转有三个工作区域：\n\n1. 本地仓库，如果git clone出来的话，就是其中.git的目录。\n2. Git的工作目录，从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的。\n3. 暂存区域。\n\n## 直接记录快照，而非差异比较\n\n*Git只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。*\n\n*Git并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。*\n\n*在保存到Git之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git一无所知。这项特性作为Git的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git都能立即察觉。*\n\n*Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。*\n\n*在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。*\n\n在解决冲突的时候经常会看到一串字母，这串字母就是这些索引了。\n\n## 指针\n\n我的理解，Git的任何的东西，如分支、记录等的实现都是依靠指针。\n\n比如创建一个分支，其实就是创建一个新的分支指针，然后这个指针指向了当前指定的commit对象。\n\n同样的，Git如何知道你当前在哪个分支上工作？它保存着一个名为HEAD的特别指针，指向你正在工作中的本地分支的指针（类似当前分支的别名）。可以试着查看下它的内容：\n\n```\n$ cat .git/HEAD\nref: refs/heads/master\n```\n\n所以有时解决冲突的时候，或者发生什么错误的时候经常可以看到HEAD这个单词。\n\n在解决很多问题的时候，我觉得把所有提交（commit）对象想像成叶子，组成一棵树，所有的分支等都是指针，指向某个commit对象，这样子可以想通很多事情。\n\n## 传输数据的协议\n\n*Git可以使用四种主要的协议来传输数据：本地传输，SSH协议，Git协议和HTTP协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。*\n\n具体上网看看咯，我们用HTTP/S协议。\n\n\n\n# Git的GUI客户端\n\n出于提高工作效率的目的下，选择一款GUI客户端是必要的（不要争论用命令行更好，实践证明很多复杂的操作用客户端更直观实际，这也是客户端存在的原因）。\n\n网上比较多的有几款：\n\n1. Github for Windows，官方客户端，比较美观，功能略少不过也够用\n2. SmartGit，功能较全，UI中规中矩\n3. SourceTree，Msysgit，TortoiseGit\n\n我用的是SmartGit，从普通的提交、拉取、建立分支、打Tag，到进一步的代码回滚、版本控制、解决冲突，都能满足我项目的需求。\n\n\n\n# 经验之谈\n\n纯粹是个人经验，有纰漏有错误的地方恳请指出。\n\n很多东西通过SmartGit完成，限于篇幅和时间关系，这里我只介绍一些原理，可能另开一篇讲解SmartGit的使用，特别是代码回滚和版本打包方面。\n\n## 正常操作流程\n\n正常流程一般是：\n\n1. 功能模块完整完成，并且至少是编译通过的\n2. 选择变动的文件（包括删除的、添加的），将它们变为staged\n3. commit提交\n4. 然后git pull，这时候会拉取线上的修改，可以看到工作目录的内容发生改变\n5. 有冲突的话，解决冲突。将它们变为staged，然后重新commit\n6. git push到所要的分支\n\n## 冲突解决\n\n这一方面Git帮我们处理得很不错了，至少目前发现过任何差错。Git一般会自动帮助我们进行代码的合并，在一些它无法决定的地方会提示出来让我们自己解决。\n\n所以其实冲突解决并不是什么可怕的事情，如果工作组中每个开发人员懂得如何处理，可以省去很多麻烦（不用争着谁先上传谁慢上传）。\n\n冲突发生在拉取远程仓库代码时，本地修改的数据和远程代码有冲突。于是实质就是，两个不同的提交对象造成的冲突。在冲突的文件中，Git会用类似于下面的格式将两个提交对象不同的地方区分开来：\n\n```\n<<<<<<< HEAD\nzzz\n=======\nzzzzz\n>>>>>>> 6853e5ff961e684d3a6c02d4d06183b5ff330dcc\n```\n\n“<<<<<<<”与“=======”之间的内容为本地的内容，“=======”与“>>>>>>>”之间的内容为远程的内容。\n\n上面的冲突情况是：本地某行内容是zzz的与线上代码冲突，冲突内容是zzzzz。你可以选择保留“zzz”或者“zzzzz”，只需把其他无用信息删除即可。\n\n在iOS开发中，冲突有另外两种特别的情况，分别是Storyboard文件冲突和项目文件冲突，特别是项目文件一旦冲突Xcode就无法识别项目文件的组织结构，导致无法显示项目的所有文件。其实解决办法也是一样的，查看该文件内容的时候，也是用上面提到的格式区分开的。\n\nStoryboard文件可以右键open as —> source code，修改冲突的地方后open as —> interface Builder，即可查看是否修改成功。\n\n项目文件只需用能打开文本的方式打开即可，如Vi之类的。\n\n## 版本提交处理和回滚修复BUG\n\n我们团队目前打包提交审核由我一人处理，所以我们的分工和流程如下：\n\n1. 版本开发完提交测试时，我开始在master分支最后一个commit对象处新建一个分支，命名为“当前外部版本号内部版本号”，如“2.8.3/38”。（其实内部版本号对于提交测试时，是个很有用的东西，在提交到App Store被退回的时候我才意识到，但我们一直没怎么用到）\n2. 把该分支push到服务器上\n3. 此时其他iOS开发人员是不需pull该分支的，可以照常在主分支上开发下一个迭代的需求。\n4. 当上一个迭代的版本出现BUG需要修复时，有两个解决方式：一个是在当前主分支修复，push，然后再切换到上一个版本的分支，cherry pick下主分支上修复BUG的commit（有可能需要解决冲突），然后再push，此时就push到上一个迭代版本的分支了。然后再发布上一个版本。二是切换到上一个版本的分支，修复后再回主分支cherry pick。\n5. 我们的流程是，如果是其他开发人员修复，则在主分支修复并push上去，然后我切换到上一个版本的分支，cherry pick后push，然后发布版本。如果是我修复，则看情况，一般采用第一种方便。\n6. 如果修复的内容在当前版本是已经不需要的了（如功能模块已经移除），则切换到上一个版本的分支修复后，主分支不需再cherry pick即可。\n\n\n\n## 关于打Tag\n\n*Tag对象非常像一个commit对象——包含一个标签，一组数据，一个消息和一个指针。最主要的区别就是Tag对象指向一个commit而不是一个tree。它就像是一个分支引用，但是不会变化——永远指向同一个commit，仅仅是提供一个更加友好的名字。*\n\n基于以上对于Tag对象的解释，我暂时还没发现Tag在自己项目中能有什么作用，最多就备注一些信息，但是每个commit提交时都会注明修改了什么，所以。。。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"share-some-experience-in-using-git-in-my-project","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pe000807eid9499im3","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Git必须了解的一些知识</li>\n<li>Git的GUI客户端</li>\n<li>经验之谈</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>回想了这一年来的经验，觉得好饱满，团队磨合得很快，也非常顺利，一切都有条不紊地进行着。总结一下这一年来使用Git的经验，特别是在项目使用过程中解决提交冲突、版本发布处理和代码回滚修复BUG这些方面的一些经验。</p>\n<p>本文不讲使用git命令或者使用Git客户端的操作，这些会另开一篇文章讲解，只讲原理。</p>\n<p>文中<em>斜体字内容</em>是引用自网上。</p>\n<h1 id=\"Git必须了解的一些知识\"><a href=\"#Git必须了解的一些知识\" class=\"headerlink\" title=\"Git必须了解的一些知识\"></a>Git必须了解的一些知识</h1><p>以前在做C++项目时用的是SVN，切换到Git需要一点点适应和慢慢地一些试错，从当前项目的需求来说，两者在提高工作效率方面达到的效果是差不多的。（当然，程序员总是偏执的，大部分总是觉得Git比SVN好，就像觉得Unix/Linux比Windows好）。网上可以搜到很多关于他们区别的文章，有兴趣可以看下。</p>\n<p>下面的一些知识，我觉得是比较重要的，特别是有助于准确地解决代码冲突、回滚修复BUG方面。</p>\n<h2 id=\"什么是版本控制\"><a href=\"#什么是版本控制\" class=\"headerlink\" title=\"什么是版本控制\"></a>什么是版本控制</h2><p>我举个简单例子就明白了：原先没有版本控制时，我们习惯用复制整个项目目录的方式来保存不同的版本，用注明时间或者版本号的方法来区分。而现在我们只需打个branch就行了，我们还可以具体看到每个版本间的区别，通过每个文件的log看到文件经过哪几次，什么样的修改。</p>\n<p>这样的优劣不明而喻了。</p>\n<p><em>从根本上来讲 Git 是一套内容寻址 (content-addressable) 文件系统</em>，我觉得这句话说得很不错！</p>\n<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><p>Git也有集中式版本库或服务器，<em>但更倾向于被使用于分布式模式</em>，所以我们从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。</p>\n<p>在不联网的情况下，仍然能够<strong>提交文件，查看历史版本记录，创建项目分支</strong>等。所以可以一直本地git commit，等到功能模块完成再git push上去。在实际工作中，我更喜欢短暂性地忽略远程仓库。</p>\n<p>可以想像到的一个场景是：在同一个项目中分别和不同工作小组的人相互协作哈哈。</p>\n<p>SVN是集中式的，我的理解是，集中式是为了让在不同系统上的开发者协同工作，但显而易见的缺点是中央服务器故障会严重影响协同工作，要是没有备份会有丢失数据的风险。</p>\n<h2 id=\"文件的三种状态\"><a href=\"#文件的三种状态\" class=\"headerlink\" title=\"文件的三种状态\"></a>文件的三种状态</h2><p><em>对于任何一个文件，在Git内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库 中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</em></p>\n<p>由此可以看到，本地文件流转有三个工作区域：</p>\n<ol>\n<li>本地仓库，如果git clone出来的话，就是其中.git的目录。</li>\n<li>Git的工作目录，从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的。</li>\n<li>暂存区域。</li>\n</ol>\n<h2 id=\"直接记录快照，而非差异比较\"><a href=\"#直接记录快照，而非差异比较\" class=\"headerlink\" title=\"直接记录快照，而非差异比较\"></a>直接记录快照，而非差异比较</h2><p><em>Git只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。</em></p>\n<p><em>Git并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。</em></p>\n<p><em>在保存到Git之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git一无所知。这项特性作为Git的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git都能立即察觉。</em></p>\n<p><em>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</em></p>\n<p><em>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</em></p>\n<p>在解决冲突的时候经常会看到一串字母，这串字母就是这些索引了。</p>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><p>我的理解，Git的任何的东西，如分支、记录等的实现都是依靠指针。</p>\n<p>比如创建一个分支，其实就是创建一个新的分支指针，然后这个指针指向了当前指定的commit对象。</p>\n<p>同样的，Git如何知道你当前在哪个分支上工作？它保存着一个名为HEAD的特别指针，指向你正在工作中的本地分支的指针（类似当前分支的别名）。可以试着查看下它的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .git/HEAD</span><br><span class=\"line\">ref: refs/heads/master</span><br></pre></td></tr></table></figure>\n\n<p>所以有时解决冲突的时候，或者发生什么错误的时候经常可以看到HEAD这个单词。</p>\n<p>在解决很多问题的时候，我觉得把所有提交（commit）对象想像成叶子，组成一棵树，所有的分支等都是指针，指向某个commit对象，这样子可以想通很多事情。</p>\n<h2 id=\"传输数据的协议\"><a href=\"#传输数据的协议\" class=\"headerlink\" title=\"传输数据的协议\"></a>传输数据的协议</h2><p><em>Git可以使用四种主要的协议来传输数据：本地传输，SSH协议，Git协议和HTTP协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</em></p>\n<p>具体上网看看咯，我们用HTTP/S协议。</p>\n<h1 id=\"Git的GUI客户端\"><a href=\"#Git的GUI客户端\" class=\"headerlink\" title=\"Git的GUI客户端\"></a>Git的GUI客户端</h1><p>出于提高工作效率的目的下，选择一款GUI客户端是必要的（不要争论用命令行更好，实践证明很多复杂的操作用客户端更直观实际，这也是客户端存在的原因）。</p>\n<p>网上比较多的有几款：</p>\n<ol>\n<li>Github for Windows，官方客户端，比较美观，功能略少不过也够用</li>\n<li>SmartGit，功能较全，UI中规中矩</li>\n<li>SourceTree，Msysgit，TortoiseGit</li>\n</ol>\n<p>我用的是SmartGit，从普通的提交、拉取、建立分支、打Tag，到进一步的代码回滚、版本控制、解决冲突，都能满足我项目的需求。</p>\n<h1 id=\"经验之谈\"><a href=\"#经验之谈\" class=\"headerlink\" title=\"经验之谈\"></a>经验之谈</h1><p>纯粹是个人经验，有纰漏有错误的地方恳请指出。</p>\n<p>很多东西通过SmartGit完成，限于篇幅和时间关系，这里我只介绍一些原理，可能另开一篇讲解SmartGit的使用，特别是代码回滚和版本打包方面。</p>\n<h2 id=\"正常操作流程\"><a href=\"#正常操作流程\" class=\"headerlink\" title=\"正常操作流程\"></a>正常操作流程</h2><p>正常流程一般是：</p>\n<ol>\n<li>功能模块完整完成，并且至少是编译通过的</li>\n<li>选择变动的文件（包括删除的、添加的），将它们变为staged</li>\n<li>commit提交</li>\n<li>然后git pull，这时候会拉取线上的修改，可以看到工作目录的内容发生改变</li>\n<li>有冲突的话，解决冲突。将它们变为staged，然后重新commit</li>\n<li>git push到所要的分支</li>\n</ol>\n<h2 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h2><p>这一方面Git帮我们处理得很不错了，至少目前发现过任何差错。Git一般会自动帮助我们进行代码的合并，在一些它无法决定的地方会提示出来让我们自己解决。</p>\n<p>所以其实冲突解决并不是什么可怕的事情，如果工作组中每个开发人员懂得如何处理，可以省去很多麻烦（不用争着谁先上传谁慢上传）。</p>\n<p>冲突发生在拉取远程仓库代码时，本地修改的数据和远程代码有冲突。于是实质就是，两个不同的提交对象造成的冲突。在冲突的文件中，Git会用类似于下面的格式将两个提交对象不同的地方区分开来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">zzz</span><br><span class=\"line\">=======</span><br><span class=\"line\">zzzzz</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dcc</span><br></pre></td></tr></table></figure>\n\n<p>“&lt;&lt;&lt;&lt;&lt;&lt;&lt;”与“=======”之间的内容为本地的内容，“=======”与“&gt;&gt;&gt;&gt;&gt;&gt;&gt;”之间的内容为远程的内容。</p>\n<p>上面的冲突情况是：本地某行内容是zzz的与线上代码冲突，冲突内容是zzzzz。你可以选择保留“zzz”或者“zzzzz”，只需把其他无用信息删除即可。</p>\n<p>在iOS开发中，冲突有另外两种特别的情况，分别是Storyboard文件冲突和项目文件冲突，特别是项目文件一旦冲突Xcode就无法识别项目文件的组织结构，导致无法显示项目的所有文件。其实解决办法也是一样的，查看该文件内容的时候，也是用上面提到的格式区分开的。</p>\n<p>Storyboard文件可以右键open as —&gt; source code，修改冲突的地方后open as —&gt; interface Builder，即可查看是否修改成功。</p>\n<p>项目文件只需用能打开文本的方式打开即可，如Vi之类的。</p>\n<h2 id=\"版本提交处理和回滚修复BUG\"><a href=\"#版本提交处理和回滚修复BUG\" class=\"headerlink\" title=\"版本提交处理和回滚修复BUG\"></a>版本提交处理和回滚修复BUG</h2><p>我们团队目前打包提交审核由我一人处理，所以我们的分工和流程如下：</p>\n<ol>\n<li>版本开发完提交测试时，我开始在master分支最后一个commit对象处新建一个分支，命名为“当前外部版本号内部版本号”，如“2.8.3/38”。（其实内部版本号对于提交测试时，是个很有用的东西，在提交到App Store被退回的时候我才意识到，但我们一直没怎么用到）</li>\n<li>把该分支push到服务器上</li>\n<li>此时其他iOS开发人员是不需pull该分支的，可以照常在主分支上开发下一个迭代的需求。</li>\n<li>当上一个迭代的版本出现BUG需要修复时，有两个解决方式：一个是在当前主分支修复，push，然后再切换到上一个版本的分支，cherry pick下主分支上修复BUG的commit（有可能需要解决冲突），然后再push，此时就push到上一个迭代版本的分支了。然后再发布上一个版本。二是切换到上一个版本的分支，修复后再回主分支cherry pick。</li>\n<li>我们的流程是，如果是其他开发人员修复，则在主分支修复并push上去，然后我切换到上一个版本的分支，cherry pick后push，然后发布版本。如果是我修复，则看情况，一般采用第一种方便。</li>\n<li>如果修复的内容在当前版本是已经不需要的了（如功能模块已经移除），则切换到上一个版本的分支修复后，主分支不需再cherry pick即可。</li>\n</ol>\n<h2 id=\"关于打Tag\"><a href=\"#关于打Tag\" class=\"headerlink\" title=\"关于打Tag\"></a>关于打Tag</h2><p><em>Tag对象非常像一个commit对象——包含一个标签，一组数据，一个消息和一个指针。最主要的区别就是Tag对象指向一个commit而不是一个tree。它就像是一个分支引用，但是不会变化——永远指向同一个commit，仅仅是提供一个更加友好的名字。</em></p>\n<p>基于以上对于Tag对象的解释，我暂时还没发现Tag在自己项目中能有什么作用，最多就备注一些信息，但是每个commit提交时都会注明修改了什么，所以。。。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Git必须了解的一些知识</li>\n<li>Git的GUI客户端</li>\n<li>经验之谈</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>回想了这一年来的经验，觉得好饱满，团队磨合得很快，也非常顺利，一切都有条不紊地进行着。总结一下这一年来使用Git的经验，特别是在项目使用过程中解决提交冲突、版本发布处理和代码回滚修复BUG这些方面的一些经验。</p>\n<p>本文不讲使用git命令或者使用Git客户端的操作，这些会另开一篇文章讲解，只讲原理。</p>\n<p>文中<em>斜体字内容</em>是引用自网上。</p>\n<h1 id=\"Git必须了解的一些知识\"><a href=\"#Git必须了解的一些知识\" class=\"headerlink\" title=\"Git必须了解的一些知识\"></a>Git必须了解的一些知识</h1><p>以前在做C++项目时用的是SVN，切换到Git需要一点点适应和慢慢地一些试错，从当前项目的需求来说，两者在提高工作效率方面达到的效果是差不多的。（当然，程序员总是偏执的，大部分总是觉得Git比SVN好，就像觉得Unix/Linux比Windows好）。网上可以搜到很多关于他们区别的文章，有兴趣可以看下。</p>\n<p>下面的一些知识，我觉得是比较重要的，特别是有助于准确地解决代码冲突、回滚修复BUG方面。</p>\n<h2 id=\"什么是版本控制\"><a href=\"#什么是版本控制\" class=\"headerlink\" title=\"什么是版本控制\"></a>什么是版本控制</h2><p>我举个简单例子就明白了：原先没有版本控制时，我们习惯用复制整个项目目录的方式来保存不同的版本，用注明时间或者版本号的方法来区分。而现在我们只需打个branch就行了，我们还可以具体看到每个版本间的区别，通过每个文件的log看到文件经过哪几次，什么样的修改。</p>\n<p>这样的优劣不明而喻了。</p>\n<p><em>从根本上来讲 Git 是一套内容寻址 (content-addressable) 文件系统</em>，我觉得这句话说得很不错！</p>\n<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><p>Git也有集中式版本库或服务器，<em>但更倾向于被使用于分布式模式</em>，所以我们从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。</p>\n<p>在不联网的情况下，仍然能够<strong>提交文件，查看历史版本记录，创建项目分支</strong>等。所以可以一直本地git commit，等到功能模块完成再git push上去。在实际工作中，我更喜欢短暂性地忽略远程仓库。</p>\n<p>可以想像到的一个场景是：在同一个项目中分别和不同工作小组的人相互协作哈哈。</p>\n<p>SVN是集中式的，我的理解是，集中式是为了让在不同系统上的开发者协同工作，但显而易见的缺点是中央服务器故障会严重影响协同工作，要是没有备份会有丢失数据的风险。</p>\n<h2 id=\"文件的三种状态\"><a href=\"#文件的三种状态\" class=\"headerlink\" title=\"文件的三种状态\"></a>文件的三种状态</h2><p><em>对于任何一个文件，在Git内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库 中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</em></p>\n<p>由此可以看到，本地文件流转有三个工作区域：</p>\n<ol>\n<li>本地仓库，如果git clone出来的话，就是其中.git的目录。</li>\n<li>Git的工作目录，从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的。</li>\n<li>暂存区域。</li>\n</ol>\n<h2 id=\"直接记录快照，而非差异比较\"><a href=\"#直接记录快照，而非差异比较\" class=\"headerlink\" title=\"直接记录快照，而非差异比较\"></a>直接记录快照，而非差异比较</h2><p><em>Git只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。</em></p>\n<p><em>Git并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。</em></p>\n<p><em>在保存到Git之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git一无所知。这项特性作为Git的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git都能立即察觉。</em></p>\n<p><em>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</em></p>\n<p><em>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</em></p>\n<p>在解决冲突的时候经常会看到一串字母，这串字母就是这些索引了。</p>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><p>我的理解，Git的任何的东西，如分支、记录等的实现都是依靠指针。</p>\n<p>比如创建一个分支，其实就是创建一个新的分支指针，然后这个指针指向了当前指定的commit对象。</p>\n<p>同样的，Git如何知道你当前在哪个分支上工作？它保存着一个名为HEAD的特别指针，指向你正在工作中的本地分支的指针（类似当前分支的别名）。可以试着查看下它的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .git/HEAD</span><br><span class=\"line\">ref: refs/heads/master</span><br></pre></td></tr></table></figure>\n\n<p>所以有时解决冲突的时候，或者发生什么错误的时候经常可以看到HEAD这个单词。</p>\n<p>在解决很多问题的时候，我觉得把所有提交（commit）对象想像成叶子，组成一棵树，所有的分支等都是指针，指向某个commit对象，这样子可以想通很多事情。</p>\n<h2 id=\"传输数据的协议\"><a href=\"#传输数据的协议\" class=\"headerlink\" title=\"传输数据的协议\"></a>传输数据的协议</h2><p><em>Git可以使用四种主要的协议来传输数据：本地传输，SSH协议，Git协议和HTTP协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</em></p>\n<p>具体上网看看咯，我们用HTTP/S协议。</p>\n<h1 id=\"Git的GUI客户端\"><a href=\"#Git的GUI客户端\" class=\"headerlink\" title=\"Git的GUI客户端\"></a>Git的GUI客户端</h1><p>出于提高工作效率的目的下，选择一款GUI客户端是必要的（不要争论用命令行更好，实践证明很多复杂的操作用客户端更直观实际，这也是客户端存在的原因）。</p>\n<p>网上比较多的有几款：</p>\n<ol>\n<li>Github for Windows，官方客户端，比较美观，功能略少不过也够用</li>\n<li>SmartGit，功能较全，UI中规中矩</li>\n<li>SourceTree，Msysgit，TortoiseGit</li>\n</ol>\n<p>我用的是SmartGit，从普通的提交、拉取、建立分支、打Tag，到进一步的代码回滚、版本控制、解决冲突，都能满足我项目的需求。</p>\n<h1 id=\"经验之谈\"><a href=\"#经验之谈\" class=\"headerlink\" title=\"经验之谈\"></a>经验之谈</h1><p>纯粹是个人经验，有纰漏有错误的地方恳请指出。</p>\n<p>很多东西通过SmartGit完成，限于篇幅和时间关系，这里我只介绍一些原理，可能另开一篇讲解SmartGit的使用，特别是代码回滚和版本打包方面。</p>\n<h2 id=\"正常操作流程\"><a href=\"#正常操作流程\" class=\"headerlink\" title=\"正常操作流程\"></a>正常操作流程</h2><p>正常流程一般是：</p>\n<ol>\n<li>功能模块完整完成，并且至少是编译通过的</li>\n<li>选择变动的文件（包括删除的、添加的），将它们变为staged</li>\n<li>commit提交</li>\n<li>然后git pull，这时候会拉取线上的修改，可以看到工作目录的内容发生改变</li>\n<li>有冲突的话，解决冲突。将它们变为staged，然后重新commit</li>\n<li>git push到所要的分支</li>\n</ol>\n<h2 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h2><p>这一方面Git帮我们处理得很不错了，至少目前发现过任何差错。Git一般会自动帮助我们进行代码的合并，在一些它无法决定的地方会提示出来让我们自己解决。</p>\n<p>所以其实冲突解决并不是什么可怕的事情，如果工作组中每个开发人员懂得如何处理，可以省去很多麻烦（不用争着谁先上传谁慢上传）。</p>\n<p>冲突发生在拉取远程仓库代码时，本地修改的数据和远程代码有冲突。于是实质就是，两个不同的提交对象造成的冲突。在冲突的文件中，Git会用类似于下面的格式将两个提交对象不同的地方区分开来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">zzz</span><br><span class=\"line\">=======</span><br><span class=\"line\">zzzzz</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dcc</span><br></pre></td></tr></table></figure>\n\n<p>“&lt;&lt;&lt;&lt;&lt;&lt;&lt;”与“=======”之间的内容为本地的内容，“=======”与“&gt;&gt;&gt;&gt;&gt;&gt;&gt;”之间的内容为远程的内容。</p>\n<p>上面的冲突情况是：本地某行内容是zzz的与线上代码冲突，冲突内容是zzzzz。你可以选择保留“zzz”或者“zzzzz”，只需把其他无用信息删除即可。</p>\n<p>在iOS开发中，冲突有另外两种特别的情况，分别是Storyboard文件冲突和项目文件冲突，特别是项目文件一旦冲突Xcode就无法识别项目文件的组织结构，导致无法显示项目的所有文件。其实解决办法也是一样的，查看该文件内容的时候，也是用上面提到的格式区分开的。</p>\n<p>Storyboard文件可以右键open as —&gt; source code，修改冲突的地方后open as —&gt; interface Builder，即可查看是否修改成功。</p>\n<p>项目文件只需用能打开文本的方式打开即可，如Vi之类的。</p>\n<h2 id=\"版本提交处理和回滚修复BUG\"><a href=\"#版本提交处理和回滚修复BUG\" class=\"headerlink\" title=\"版本提交处理和回滚修复BUG\"></a>版本提交处理和回滚修复BUG</h2><p>我们团队目前打包提交审核由我一人处理，所以我们的分工和流程如下：</p>\n<ol>\n<li>版本开发完提交测试时，我开始在master分支最后一个commit对象处新建一个分支，命名为“当前外部版本号内部版本号”，如“2.8.3/38”。（其实内部版本号对于提交测试时，是个很有用的东西，在提交到App Store被退回的时候我才意识到，但我们一直没怎么用到）</li>\n<li>把该分支push到服务器上</li>\n<li>此时其他iOS开发人员是不需pull该分支的，可以照常在主分支上开发下一个迭代的需求。</li>\n<li>当上一个迭代的版本出现BUG需要修复时，有两个解决方式：一个是在当前主分支修复，push，然后再切换到上一个版本的分支，cherry pick下主分支上修复BUG的commit（有可能需要解决冲突），然后再push，此时就push到上一个迭代版本的分支了。然后再发布上一个版本。二是切换到上一个版本的分支，修复后再回主分支cherry pick。</li>\n<li>我们的流程是，如果是其他开发人员修复，则在主分支修复并push上去，然后我切换到上一个版本的分支，cherry pick后push，然后发布版本。如果是我修复，则看情况，一般采用第一种方便。</li>\n<li>如果修复的内容在当前版本是已经不需要的了（如功能模块已经移除），则切换到上一个版本的分支修复后，主分支不需再cherry pick即可。</li>\n</ol>\n<h2 id=\"关于打Tag\"><a href=\"#关于打Tag\" class=\"headerlink\" title=\"关于打Tag\"></a>关于打Tag</h2><p><em>Tag对象非常像一个commit对象——包含一个标签，一组数据，一个消息和一个指针。最主要的区别就是Tag对象指向一个commit而不是一个tree。它就像是一个分支引用，但是不会变化——永远指向同一个commit，仅仅是提供一个更加友好的名字。</em></p>\n<p>基于以上对于Tag对象的解释，我暂时还没发现Tag在自己项目中能有什么作用，最多就备注一些信息，但是每个commit提交时都会注明修改了什么，所以。。。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为Octopress博客添加访客统计功能","date":"2015-06-01T08:00:00.000Z","keywords":"blog Octopress","description":"为Octopress博客添加访客统计功能","_content":"\n有两种访客统计系统：Flag Counter和多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 的访客组件\n\nFlag Counter是显示各个国家访客数，多说访客组件是显示访客头像。\n\n### Flag Counter\n\n1、先去Flag Counter [http://www.flagcounter.com](http://www.flagcounter.com/) 获取代码。\n\n2、拿到代码后添加 .\\source\\_includes\\custom\\asides\\flag_counter.html 文件：\n\nflag_counter.html\n\n```\n<section>\n<h1>访客统计</h1>\n<br/>\n<a href=\"http://s07.flagcounter.com/more/2SH\"><img src=\"http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_0/labels_0/pageviews_1/flags_0/\" alt=\"Flag Counter\" border=\"0\"></a>\n</section>\n```\n\n代码包含中文则需要另存为UTF-8格式。\n\n3、将页面添加到侧边栏，在 ./_config.yml 配置文件中添加配置：\n\n如果有default_asides，则在后面中括号中添加\n\n```\n， custom/asides/flag_counter.html\n```\n\n没有则在文件中添加\n\n```\ndefault_asides: [custom/asides/flag_counter.html]\n```\n\n4、最后添加控制开关，在 ./_config.yml 配置文件中添加下面一行配置：\n\n```\n# Flag Counter\nflag_counter: true\n```\n\n### 多说访客系统\n\n1、去多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 注册，设置好站点和对应的多说域名\n\n2、在 <http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c> 获取代码，在前后添加section标签。可以在section中添加任何代码。\n\n多说参数添加在class后面，如下：\n\n```\n<section>\n<ul class=\"ds-recent-visitors\" data-num-items=\"10\"></ul>\n<!--多说js加载开始，一个页面只需要加载一次 -->\n<script type=\"text/javascript\">\n\tvar duoshuoQuery = {short_name:\"您的多说域名\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = 'http://static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n<!--多说js加载结束，一个页面只需要加载一次 -->\n</section>\n```\n\n3、同理，继续上面Flag Counter的第2、3、4步即可。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-01-add-visitors-counter-to-octopress.md","raw":"---\ntitle: 为Octopress博客添加访客统计功能\ndate: 2015-06-01 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 为Octopress博客添加访客统计功能\n---\n\n有两种访客统计系统：Flag Counter和多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 的访客组件\n\nFlag Counter是显示各个国家访客数，多说访客组件是显示访客头像。\n\n### Flag Counter\n\n1、先去Flag Counter [http://www.flagcounter.com](http://www.flagcounter.com/) 获取代码。\n\n2、拿到代码后添加 .\\source\\_includes\\custom\\asides\\flag_counter.html 文件：\n\nflag_counter.html\n\n```\n<section>\n<h1>访客统计</h1>\n<br/>\n<a href=\"http://s07.flagcounter.com/more/2SH\"><img src=\"http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_0/labels_0/pageviews_1/flags_0/\" alt=\"Flag Counter\" border=\"0\"></a>\n</section>\n```\n\n代码包含中文则需要另存为UTF-8格式。\n\n3、将页面添加到侧边栏，在 ./_config.yml 配置文件中添加配置：\n\n如果有default_asides，则在后面中括号中添加\n\n```\n， custom/asides/flag_counter.html\n```\n\n没有则在文件中添加\n\n```\ndefault_asides: [custom/asides/flag_counter.html]\n```\n\n4、最后添加控制开关，在 ./_config.yml 配置文件中添加下面一行配置：\n\n```\n# Flag Counter\nflag_counter: true\n```\n\n### 多说访客系统\n\n1、去多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 注册，设置好站点和对应的多说域名\n\n2、在 <http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c> 获取代码，在前后添加section标签。可以在section中添加任何代码。\n\n多说参数添加在class后面，如下：\n\n```\n<section>\n<ul class=\"ds-recent-visitors\" data-num-items=\"10\"></ul>\n<!--多说js加载开始，一个页面只需要加载一次 -->\n<script type=\"text/javascript\">\n\tvar duoshuoQuery = {short_name:\"您的多说域名\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = 'http://static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n<!--多说js加载结束，一个页面只需要加载一次 -->\n</section>\n```\n\n3、同理，继续上面Flag Counter的第2、3、4步即可。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"add-visitors-counter-to-octopress","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pg000c07eioekxdo1u","content":"<p>有两种访客统计系统：Flag Counter和多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 的访客组件</p>\n<p>Flag Counter是显示各个国家访客数，多说访客组件是显示访客头像。</p>\n<h3 id=\"Flag-Counter\"><a href=\"#Flag-Counter\" class=\"headerlink\" title=\"Flag Counter\"></a>Flag Counter</h3><p>1、先去Flag Counter <a href=\"http://www.flagcounter.com/\" target=\"_blank\" rel=\"noopener\">http://www.flagcounter.com</a> 获取代码。</p>\n<p>2、拿到代码后添加 .\\source_includes\\custom\\asides\\flag_counter.html 文件：</p>\n<p>flag_counter.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;h1&gt;访客统计&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://s07.flagcounter.com/more/2SH&quot;&gt;&lt;img src=&quot;http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_0/labels_0/pageviews_1/flags_0/&quot; alt=&quot;Flag Counter&quot; border=&quot;0&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>代码包含中文则需要另存为UTF-8格式。</p>\n<p>3、将页面添加到侧边栏，在 ./_config.yml 配置文件中添加配置：</p>\n<p>如果有default_asides，则在后面中括号中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">， custom/asides/flag_counter.html</span><br></pre></td></tr></table></figure>\n\n<p>没有则在文件中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [custom/asides/flag_counter.html]</span><br></pre></td></tr></table></figure>\n\n<p>4、最后添加控制开关，在 ./_config.yml 配置文件中添加下面一行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Flag Counter</span><br><span class=\"line\">flag_counter: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多说访客系统\"><a href=\"#多说访客系统\" class=\"headerlink\" title=\"多说访客系统\"></a>多说访客系统</h3><p>1、去多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 注册，设置好站点和对应的多说域名</p>\n<p>2、在 <a href=\"http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c</a> 获取代码，在前后添加section标签。可以在section中添加任何代码。</p>\n<p>多说参数添加在class后面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;ul class=&quot;ds-recent-visitors&quot; data-num-items=&quot;10&quot;&gt;&lt;/ul&gt;</span><br><span class=\"line\">&lt;!--多说js加载开始，一个页面只需要加载一次 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar duoshuoQuery = &#123;short_name:&quot;您的多说域名&quot;&#125;;</span><br><span class=\"line\">\t(function() &#123;</span><br><span class=\"line\">\t\tvar ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">\t\tds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">\t\tds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">\t\tds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--多说js加载结束，一个页面只需要加载一次 --&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3、同理，继续上面Flag Counter的第2、3、4步即可。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>有两种访客统计系统：Flag Counter和多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 的访客组件</p>\n<p>Flag Counter是显示各个国家访客数，多说访客组件是显示访客头像。</p>\n<h3 id=\"Flag-Counter\"><a href=\"#Flag-Counter\" class=\"headerlink\" title=\"Flag Counter\"></a>Flag Counter</h3><p>1、先去Flag Counter <a href=\"http://www.flagcounter.com/\" target=\"_blank\" rel=\"noopener\">http://www.flagcounter.com</a> 获取代码。</p>\n<p>2、拿到代码后添加 .\\source_includes\\custom\\asides\\flag_counter.html 文件：</p>\n<p>flag_counter.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;h1&gt;访客统计&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://s07.flagcounter.com/more/2SH&quot;&gt;&lt;img src=&quot;http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_0/labels_0/pageviews_1/flags_0/&quot; alt=&quot;Flag Counter&quot; border=&quot;0&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>代码包含中文则需要另存为UTF-8格式。</p>\n<p>3、将页面添加到侧边栏，在 ./_config.yml 配置文件中添加配置：</p>\n<p>如果有default_asides，则在后面中括号中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">， custom/asides/flag_counter.html</span><br></pre></td></tr></table></figure>\n\n<p>没有则在文件中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [custom/asides/flag_counter.html]</span><br></pre></td></tr></table></figure>\n\n<p>4、最后添加控制开关，在 ./_config.yml 配置文件中添加下面一行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Flag Counter</span><br><span class=\"line\">flag_counter: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多说访客系统\"><a href=\"#多说访客系统\" class=\"headerlink\" title=\"多说访客系统\"></a>多说访客系统</h3><p>1、去多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 注册，设置好站点和对应的多说域名</p>\n<p>2、在 <a href=\"http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com/docs/4ff28d6f552860f21f00000c</a> 获取代码，在前后添加section标签。可以在section中添加任何代码。</p>\n<p>多说参数添加在class后面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;ul class=&quot;ds-recent-visitors&quot; data-num-items=&quot;10&quot;&gt;&lt;/ul&gt;</span><br><span class=\"line\">&lt;!--多说js加载开始，一个页面只需要加载一次 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar duoshuoQuery = &#123;short_name:&quot;您的多说域名&quot;&#125;;</span><br><span class=\"line\">\t(function() &#123;</span><br><span class=\"line\">\t\tvar ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">\t\tds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">\t\tds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">\t\tds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--多说js加载结束，一个页面只需要加载一次 --&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3、同理，继续上面Flag Counter的第2、3、4步即可。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为Octopress博客添加评论功能","date":"2015-06-01T08:00:00.000Z","keywords":"blog Octopress","description":"为Octopress博客添加评论功能","_content":"\nOctopress默认自带了DISQUS，但是对于国内不是很好用。国内比较流行的是多说评论系统。\n\n### 添加多说评论组件\n\n1、去多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 注册，设置好站点和对应的多说域名\n\n2、在 _config.yml 中添加\n\n```\n# duoshuo comments\nduoshuo_comments: true\nduoshuo_short_name: “你的多说名称”\n```\n\n3、在 ./source/_layouts/post.html 中的 disqus 代码下方添加多说评论模块：\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}\n  \t<section>\n    \t<h1>Comments</h1>\n\t<div id=\"comments\" aria-live=\"polite\">{% include post/duoshuo_comment.html %}</div>\n      \t</section>\n{% endif %}\n{% endraw %}\n```\n\n4、创建 ./source/_includes/post/duoshuo_comment.html 文件，内容如下：\n\n```\n<!-- Duoshuo Comment BEGIN -->\n<div class=\"ds-thread\" data-title=\"Octopress博客的个性化配置\"></div>\n<script type=\"text/javascript\">\n\tvar duoshuoQuery = {short_name:\"你的多说名称\"};\n    (function() {\n        var ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = 'http://static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n<!-- Duoshuo Comment END -->\n```\n\n5、随后，再修改 `_includes/article.html` 文件，在\n\n```\n{% raw %}\n{% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}\n | <a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread\">Comments</a>\n{% endif %}\n{% endraw %}\n```\n\n下方添加如下代码：\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}\n | <a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#comments\">Comments</a>\n{% endif %}\n{% endraw %}\n```\n\n其实以上代码只是修改自多说上的而已： <http://dev.duoshuo.com/docs/4ff28d95552860f21f000010>\n\n还有一些多说参数可以配置。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-01-add-comment-component-to-octopress.md","raw":"---\ntitle: 为Octopress博客添加评论功能\ndate: 2015-06-01 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 为Octopress博客添加评论功能\n---\n\nOctopress默认自带了DISQUS，但是对于国内不是很好用。国内比较流行的是多说评论系统。\n\n### 添加多说评论组件\n\n1、去多说 [http://dev.duoshuo.com](http://dev.duoshuo.com/) 注册，设置好站点和对应的多说域名\n\n2、在 _config.yml 中添加\n\n```\n# duoshuo comments\nduoshuo_comments: true\nduoshuo_short_name: “你的多说名称”\n```\n\n3、在 ./source/_layouts/post.html 中的 disqus 代码下方添加多说评论模块：\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}\n  \t<section>\n    \t<h1>Comments</h1>\n\t<div id=\"comments\" aria-live=\"polite\">{% include post/duoshuo_comment.html %}</div>\n      \t</section>\n{% endif %}\n{% endraw %}\n```\n\n4、创建 ./source/_includes/post/duoshuo_comment.html 文件，内容如下：\n\n```\n<!-- Duoshuo Comment BEGIN -->\n<div class=\"ds-thread\" data-title=\"Octopress博客的个性化配置\"></div>\n<script type=\"text/javascript\">\n\tvar duoshuoQuery = {short_name:\"你的多说名称\"};\n    (function() {\n        var ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = 'http://static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n<!-- Duoshuo Comment END -->\n```\n\n5、随后，再修改 `_includes/article.html` 文件，在\n\n```\n{% raw %}\n{% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %}\n | <a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#disqus_thread\">Comments</a>\n{% endif %}\n{% endraw %}\n```\n\n下方添加如下代码：\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %}\n | <a href=\"{% if index %}{{ root_url }}{{ post.url }}{% endif %}#comments\">Comments</a>\n{% endif %}\n{% endraw %}\n```\n\n其实以上代码只是修改自多说上的而已： <http://dev.duoshuo.com/docs/4ff28d95552860f21f000010>\n\n还有一些多说参数可以配置。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"add-comment-component-to-octopress","published":1,"updated":"2020-02-25T15:23:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7ph000d07eizpkvgvnr","content":"<p>Octopress默认自带了DISQUS，但是对于国内不是很好用。国内比较流行的是多说评论系统。</p>\n<h3 id=\"添加多说评论组件\"><a href=\"#添加多说评论组件\" class=\"headerlink\" title=\"添加多说评论组件\"></a>添加多说评论组件</h3><p>1、去多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 注册，设置好站点和对应的多说域名</p>\n<p>2、在 _config.yml 中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># duoshuo comments</span><br><span class=\"line\">duoshuo_comments: true</span><br><span class=\"line\">duoshuo_short_name: “你的多说名称”</span><br></pre></td></tr></table></figure>\n\n<p>3、在 ./source/_layouts/post.html 中的 disqus 代码下方添加多说评论模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br><span class=\"line\">  \t&lt;section&gt;</span><br><span class=\"line\">    \t&lt;h1&gt;Comments&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;comments&quot; aria-live=&quot;polite&quot;&gt;&#123;% include post/duoshuo_comment.html %&#125;&lt;/div&gt;</span><br><span class=\"line\">      \t&lt;/section&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建 ./source/_includes/post/duoshuo_comment.html 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Duoshuo Comment BEGIN --&gt;</span><br><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-title=&quot;Octopress博客的个性化配置&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar duoshuoQuery = &#123;short_name:&quot;你的多说名称&quot;&#125;;</span><br><span class=\"line\">    (function() &#123;</span><br><span class=\"line\">        var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">\t\tds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">\t\tds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">\t\tds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Duoshuo Comment END --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、随后，再修改 <code>_includes/article.html</code> 文件，在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %&#125;</span><br><span class=\"line\"> | &lt;a href=&quot;&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#disqus_thread&quot;&gt;Comments&lt;/a&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下方添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %&#125;</span><br><span class=\"line\"> | &lt;a href=&quot;&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#comments&quot;&gt;Comments&lt;/a&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实以上代码只是修改自多说上的而已： <a href=\"http://dev.duoshuo.com/docs/4ff28d95552860f21f000010\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com/docs/4ff28d95552860f21f000010</a></p>\n<p>还有一些多说参数可以配置。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Octopress默认自带了DISQUS，但是对于国内不是很好用。国内比较流行的是多说评论系统。</p>\n<h3 id=\"添加多说评论组件\"><a href=\"#添加多说评论组件\" class=\"headerlink\" title=\"添加多说评论组件\"></a>添加多说评论组件</h3><p>1、去多说 <a href=\"http://dev.duoshuo.com/\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com</a> 注册，设置好站点和对应的多说域名</p>\n<p>2、在 _config.yml 中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># duoshuo comments</span><br><span class=\"line\">duoshuo_comments: true</span><br><span class=\"line\">duoshuo_short_name: “你的多说名称”</span><br></pre></td></tr></table></figure>\n\n<p>3、在 ./source/_layouts/post.html 中的 disqus 代码下方添加多说评论模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br><span class=\"line\">  \t&lt;section&gt;</span><br><span class=\"line\">    \t&lt;h1&gt;Comments&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;comments&quot; aria-live=&quot;polite&quot;&gt;&#123;% include post/duoshuo_comment.html %&#125;&lt;/div&gt;</span><br><span class=\"line\">      \t&lt;/section&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、创建 ./source/_includes/post/duoshuo_comment.html 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Duoshuo Comment BEGIN --&gt;</span><br><span class=\"line\">&lt;div class=&quot;ds-thread&quot; data-title=&quot;Octopress博客的个性化配置&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar duoshuoQuery = &#123;short_name:&quot;你的多说名称&quot;&#125;;</span><br><span class=\"line\">    (function() &#123;</span><br><span class=\"line\">        var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">\t\tds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">\t\tds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">\t\tds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">\t\t(document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Duoshuo Comment END --&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5、随后，再修改 <code>_includes/article.html</code> 文件，在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.disqus_short_name and page.comments != false and post.comments != false and site.disqus_show_comment_count == true %&#125;</span><br><span class=\"line\"> | &lt;a href=&quot;&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#disqus_thread&quot;&gt;Comments&lt;/a&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下方添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %&#125;</span><br><span class=\"line\"> | &lt;a href=&quot;&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#comments&quot;&gt;Comments&lt;/a&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实以上代码只是修改自多说上的而已： <a href=\"http://dev.duoshuo.com/docs/4ff28d95552860f21f000010\" target=\"_blank\" rel=\"noopener\">http://dev.duoshuo.com/docs/4ff28d95552860f21f000010</a></p>\n<p>还有一些多说参数可以配置。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"在Octopress博客中避免使用的代码块被解析","date":"2015-06-06T08:00:00.000Z","keywords":"blog Octopress","description":"在Octopress博客中避免使用的代码块被解析","_content":"# 前言\n\n在写上一篇集成多说评论的文章的时候，遇到一个代码高亮的问题。\n\n# 问题描述\n\n作为嵌入的一些代码会被解析并转成其真实的值对应的HTML代码形式。\n\n# 解决办法\n\n想避免嵌入的代码块被解析，使用{% raw %}和{% endraw %}来包裹不想被解析的代码块即可。\n\n# 实际例子\n\n下面这段代码块看似可以正常显示，其实是使用上面的方法，如果不包裹会出现奇怪的现象。\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}\n```\n\n```\n<section>\n```\n\n```\n<h1>Comments</h1>\n<div id=\"comments\" aria-live=\"polite\">{% include post/duoshuo.html %}</div>\n```\n\n```\n</section>\n```\n\n```\n{% endif %}\n{% endraw %}\n```\n\n# 更棘手的\n\n如果出现了Liquid Exception: Unknown tag ‘endraw’ in _posts这样的问题， 使用&#123;代替{ ,使用&#125;代替}\n\n原文链接:  <http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-06-use-code-block-without-analysis.md","raw":"---\ntitle: 在Octopress博客中避免使用的代码块被解析\ndate: 2015-06-06 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 在Octopress博客中避免使用的代码块被解析\n---\n# 前言\n\n在写上一篇集成多说评论的文章的时候，遇到一个代码高亮的问题。\n\n# 问题描述\n\n作为嵌入的一些代码会被解析并转成其真实的值对应的HTML代码形式。\n\n# 解决办法\n\n想避免嵌入的代码块被解析，使用{% raw %}和{% endraw %}来包裹不想被解析的代码块即可。\n\n# 实际例子\n\n下面这段代码块看似可以正常显示，其实是使用上面的方法，如果不包裹会出现奇怪的现象。\n\n```\n{% raw %}\n{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}\n```\n\n```\n<section>\n```\n\n```\n<h1>Comments</h1>\n<div id=\"comments\" aria-live=\"polite\">{% include post/duoshuo.html %}</div>\n```\n\n```\n</section>\n```\n\n```\n{% endif %}\n{% endraw %}\n```\n\n# 更棘手的\n\n如果出现了Liquid Exception: Unknown tag ‘endraw’ in _posts这样的问题， 使用&#123;代替{ ,使用&#125;代替}\n\n原文链接:  <http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"use-code-block-without-analysis","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pk000i07eijejotmlw","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在写上一篇集成多说评论的文章的时候，遇到一个代码高亮的问题。</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>作为嵌入的一些代码会被解析并转成其真实的值对应的HTML代码形式。</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>想避免嵌入的代码块被解析，使用和来包裹不想被解析的代码块即可。</p>\n<h1 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h1><p>下面这段代码块看似可以正常显示，其实是使用上面的方法，如果不包裹会出现奇怪的现象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;Comments&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;comments&quot; aria-live=&quot;polite&quot;&gt;&#123;% include post/duoshuo.html %&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更棘手的\"><a href=\"#更棘手的\" class=\"headerlink\" title=\"更棘手的\"></a>更棘手的</h1><p>如果出现了Liquid Exception: Unknown tag ‘endraw’ in _posts这样的问题， 使用&#123;代替{ ,使用&#125;代替}</p>\n<p>原文链接:  <a href=\"http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/\" target=\"_blank\" rel=\"noopener\">http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在写上一篇集成多说评论的文章的时候，遇到一个代码高亮的问题。</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>作为嵌入的一些代码会被解析并转成其真实的值对应的HTML代码形式。</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>想避免嵌入的代码块被解析，使用和来包裹不想被解析的代码块即可。</p>\n<h1 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h1><p>下面这段代码块看似可以正常显示，其实是使用上面的方法，如果不包裹会出现奇怪的现象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;Comments&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;comments&quot; aria-live=&quot;polite&quot;&gt;&#123;% include post/duoshuo.html %&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更棘手的\"><a href=\"#更棘手的\" class=\"headerlink\" title=\"更棘手的\"></a>更棘手的</h1><p>如果出现了Liquid Exception: Unknown tag ‘endraw’ in _posts这样的问题， 使用&#123;代替{ ,使用&#125;代替}</p>\n<p>原文链接:  <a href=\"http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/\" target=\"_blank\" rel=\"noopener\">http://droidyue.com/blog/2014/08/18/how-to-escape-embeded-ruby-block-in-octopress/</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为Octopressbo博客添加侧边栏","date":"2015-06-07T08:00:00.000Z","keywords":"blog Octopress","description":"为Octopressbo博客添加侧边栏","_content":"\n### 添加侧边栏文章分类\n\n1.在 plugins 目录下创建 category_list_tag.rb 文件，内容如下：\n\n```\nmodule Jekyll \n\tclass CategoryListTag < Liquid::Tag \n\t\tdef render(context) \n\t\t\thtml = \"\" \n\t\t\tcategories = context.registers[:site].categories.keys \n\t\t\tcategories.sort.each do |category| \n\t\t\tposts_in_category = context.registers[:site].categories[category].size \n\t\t\tcategory_dir = context.registers[:site].config['category_dir'] \n\t\t\tcategory_url = File.join(category_dir, category.gsub(/_|\\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) \n\t\t\thtml << \"<li class='category'><a href='/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\\n\" \n\t\t\tend \n\t\t\thtml \n\t\tend \n\tend \nend\n\nLiquid::Template.register_tag('category_list', Jekyll::CategoryListTag)\n```\n\n2.添加 source/_includes/asides/category_list.html 文件，内容如下：\n\n```\n{% raw %}\n<section>\n\t<h1>文章分类</h1>\n\t<ul id=\"categories\">\n\t\t{% category_list %}\n\t</ul>\n</section>\n{% endraw %}\n```\n\n注意另存为UTF-8格式。\n\n3.修改 _config.yml 文件，在 default_asides 项中添加 asides/category_list.html ，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。\n\n```\ndefault_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]\n```\n\n在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-add-category-to-octopress.md","raw":"---\ntitle: 为Octopressbo博客添加侧边栏\ndate: 2015-06-07 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 为Octopressbo博客添加侧边栏\n---\n\n### 添加侧边栏文章分类\n\n1.在 plugins 目录下创建 category_list_tag.rb 文件，内容如下：\n\n```\nmodule Jekyll \n\tclass CategoryListTag < Liquid::Tag \n\t\tdef render(context) \n\t\t\thtml = \"\" \n\t\t\tcategories = context.registers[:site].categories.keys \n\t\t\tcategories.sort.each do |category| \n\t\t\tposts_in_category = context.registers[:site].categories[category].size \n\t\t\tcategory_dir = context.registers[:site].config['category_dir'] \n\t\t\tcategory_url = File.join(category_dir, category.gsub(/_|\\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) \n\t\t\thtml << \"<li class='category'><a href='/#{category_url}/'>#{category} (#{posts_in_category})</a></li>\\n\" \n\t\t\tend \n\t\t\thtml \n\t\tend \n\tend \nend\n\nLiquid::Template.register_tag('category_list', Jekyll::CategoryListTag)\n```\n\n2.添加 source/_includes/asides/category_list.html 文件，内容如下：\n\n```\n{% raw %}\n<section>\n\t<h1>文章分类</h1>\n\t<ul id=\"categories\">\n\t\t{% category_list %}\n\t</ul>\n</section>\n{% endraw %}\n```\n\n注意另存为UTF-8格式。\n\n3.修改 _config.yml 文件，在 default_asides 项中添加 asides/category_list.html ，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。\n\n```\ndefault_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]\n```\n\n在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"add-category-to-octopress","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pl000k07eiaxbr7ihm","content":"<h3 id=\"添加侧边栏文章分类\"><a href=\"#添加侧边栏文章分类\" class=\"headerlink\" title=\"添加侧边栏文章分类\"></a>添加侧边栏文章分类</h3><p>1.在 plugins 目录下创建 category_list_tag.rb 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Jekyll </span><br><span class=\"line\">\tclass CategoryListTag &lt; Liquid::Tag </span><br><span class=\"line\">\t\tdef render(context) </span><br><span class=\"line\">\t\t\thtml = &quot;&quot; </span><br><span class=\"line\">\t\t\tcategories = context.registers[:site].categories.keys </span><br><span class=\"line\">\t\t\tcategories.sort.each do |category| </span><br><span class=\"line\">\t\t\tposts_in_category = context.registers[:site].categories[category].size </span><br><span class=\"line\">\t\t\tcategory_dir = context.registers[:site].config[&apos;category_dir&apos;] </span><br><span class=\"line\">\t\t\tcategory_url = File.join(category_dir, category.gsub(/_|\\P&#123;Word&#125;/, &apos;-&apos;).gsub(/-&#123;2,&#125;/, &apos;-&apos;).downcase) </span><br><span class=\"line\">\t\t\thtml &lt;&lt; &quot;&lt;li class=&apos;category&apos;&gt;&lt;a href=&apos;/#&#123;category_url&#125;/&apos;&gt;#&#123;category&#125; (#&#123;posts_in_category&#125;)&lt;/a&gt;&lt;/li&gt;\\n&quot; </span><br><span class=\"line\">\t\t\tend </span><br><span class=\"line\">\t\t\thtml </span><br><span class=\"line\">\t\tend </span><br><span class=\"line\">\tend </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Liquid::Template.register_tag(&apos;category_list&apos;, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure>\n\n<p>2.添加 source/_includes/asides/category_list.html 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">\t&lt;h1&gt;文章分类&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;ul id=&quot;categories&quot;&gt;</span><br><span class=\"line\">\t\t&#123;% category_list %&#125;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意另存为UTF-8格式。</p>\n<p>3.修改 _config.yml 文件，在 default_asides 项中添加 asides/category_list.html ，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span><br></pre></td></tr></table></figure>\n\n<p>在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"添加侧边栏文章分类\"><a href=\"#添加侧边栏文章分类\" class=\"headerlink\" title=\"添加侧边栏文章分类\"></a>添加侧边栏文章分类</h3><p>1.在 plugins 目录下创建 category_list_tag.rb 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Jekyll </span><br><span class=\"line\">\tclass CategoryListTag &lt; Liquid::Tag </span><br><span class=\"line\">\t\tdef render(context) </span><br><span class=\"line\">\t\t\thtml = &quot;&quot; </span><br><span class=\"line\">\t\t\tcategories = context.registers[:site].categories.keys </span><br><span class=\"line\">\t\t\tcategories.sort.each do |category| </span><br><span class=\"line\">\t\t\tposts_in_category = context.registers[:site].categories[category].size </span><br><span class=\"line\">\t\t\tcategory_dir = context.registers[:site].config[&apos;category_dir&apos;] </span><br><span class=\"line\">\t\t\tcategory_url = File.join(category_dir, category.gsub(/_|\\P&#123;Word&#125;/, &apos;-&apos;).gsub(/-&#123;2,&#125;/, &apos;-&apos;).downcase) </span><br><span class=\"line\">\t\t\thtml &lt;&lt; &quot;&lt;li class=&apos;category&apos;&gt;&lt;a href=&apos;/#&#123;category_url&#125;/&apos;&gt;#&#123;category&#125; (#&#123;posts_in_category&#125;)&lt;/a&gt;&lt;/li&gt;\\n&quot; </span><br><span class=\"line\">\t\t\tend </span><br><span class=\"line\">\t\t\thtml </span><br><span class=\"line\">\t\tend </span><br><span class=\"line\">\tend </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Liquid::Template.register_tag(&apos;category_list&apos;, Jekyll::CategoryListTag)</span><br></pre></td></tr></table></figure>\n\n<p>2.添加 source/_includes/asides/category_list.html 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">\t&lt;h1&gt;文章分类&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;ul id=&quot;categories&quot;&gt;</span><br><span class=\"line\">\t\t&#123;% category_list %&#125;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意另存为UTF-8格式。</p>\n<p>3.修改 _config.yml 文件，在 default_asides 项中添加 asides/category_list.html ，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span><br></pre></td></tr></table></figure>\n\n<p>在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"Github Pages,Ruby,Markdown,Jekyll and Octopress","date":"2015-06-07T08:00:00.000Z","keywords":"blog Octopress Ruby","description":"Github Pages,Ruby,Markdown,Jekyll and Octopress","_content":"\n# 目录\n- 前言\n- 各种框架和技术\n- 小总结\n\n# 前言\n\n搭建了这个基于Octopress和Github Pages的博客已经几个月了，但是其实对这里面的一些技术和原理还不了解，导致有时候在配置的时候会出点问题。所以觉得有必要简单梳理下。\n\n# 各种框架和技术\n\n## Github Pages\n\n\\#### \n\n首先需要说到Github，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。\n\n*但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。*\n\n## Jekyll\n\n看它的官网 <http://jekyll.bootcss.com/> 介绍：\n\n*将纯文本转化为静态网站和博客，只用 Markdown (或 Textile)、Liquid、HTML & CSS 就可以构建可部署的静态网站。*\n\n所以它是一个静态网页文件生成器，然后支持了Github Pages。\n\nJekyll是基于Ruby的，所以需要安装Ruby和Ruby Devkit。\n\n## Octopress\n\n首先还是看它自己的介绍 <https://github.com/imathis/octopress> ：\n\n*Octopress is an obsessively designed framework for Jekyll blogging. It’s easy to configure and easy to deploy.* \n\n**所以它是基于Jekyll的，并且内置了不少博客框架，让你搭建博客更方便。**\n\n在以下文件可以看到它的组成：\n\n<https://github.com/imathis/octopress/blob/master/Gemfile>\n\n**网上看到一个区别**：\n\n上传发布细微区别，jekyll 可以直接用git上传 .md or .html 文件不需要编译，Otcopress是makefile将文件转化.html发布。所以这也是一个缺点，当文章越多，编译发布时间就越长了吧。\n\n另外，Octopress 在 Jekyll 0.x 时代是个非常好的 Jekyll-blog 解决方案，有不错的模版，丰富的扩展功能，缺点就是麻烦，需要在本地生成页面。但是在过去一年，Jekyll大量的新功能新特性加入让 Octopress 显得不那么必要。Octopress 3 也改变策略，不再那么复杂，只是对 Jekyll 操作进行二次封装，方便使用。\n\n## Ruby\n\n一种脚本语言。Octopress是基于Ruby的，所以我们不时需要修改这种语言的代码。\n\n## Markdown\n\n\\#### \n\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。\n\n## Rake\n\n**网上的介绍**：\n\n*Rake 是用 Ruby 编写的，并使用 Ruby 作为它的语法，是 Ruby 的 Make ，许多方面都比 Make 要更好用一些。\n\n看这个文件 <https://github.com/imathis/octopress/blob/master/Gemfile> 知道，它包含在Octopress中。\n\n## Rakefile\n\n\\#### \n\n**网上的介绍**：\n\n和 Makefile 不同的是，Rakefile 本身其实就是一段 Ruby 代码，这样的好处有很多，一方面在 Rake 里面就可以很直接地做任何 Ruby 能做的事了，另一方面由于 Ruby 对 DSL 支持良好，所以 Rakefile 通常看起来也并不那么“代码”。*\n\n## Gemfile\n\nGemfile 文件描述Ruby工程需要依赖的插件bundle。\n\n执行以下两句命令的时候就是安装bundler插件，然后把 Gemfile 文件里面关联的插件下载下来。\n\n```\ngem install bundler\nbundle install\n```\n\n# 小总结\n\n**所以，总结一下这种搭建博客的方案的实现步骤**：\n\n1. 首先我们使用 rake new_post[“XXX”] 生成一个 markdown 文件（rake命令来自rake工具，从目录下的 Rakefile 文件可以看到这条命令做了什么），然后编写这个文件。\n2. 使用命令 rake generate ,会将 markdown 文件转换成 html 文件。在这个过程中利用了Octopress的其他插件，配置了如头部、尾部、侧边栏、评论等等。\n3. 使用 rake deploy 命令将文件都上传到 Github Pages 上。然后我们访问那个域名就可以看到了。\n4. 如果要使用自己的域名，就需要让自己的域名解析指向这个地址，具体可以看我的另一篇文章（<http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/> ）\n\n这里讲的还是比较浅显，还有一些，比如 rake generate 到底做了什么，整个目录下各个文件夹分别是什么作用等等，还没怎么了解，如果了解的话对以后出问题的解决还是有帮助的。\n\n总的来说，网上可以找到很多建博客的方法和它们的优劣对比，这里就不多说那些，个人觉得最终还是要回归到自己建博客的目的：写文章，不然迁来迁去挺折腾的，所以在写和发表时效率高这个最重要了，其他都是次要。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-github-pages-ruby-markdown-jekyll-octopress.md","raw":"---\ntitle: Github Pages,Ruby,Markdown,Jekyll and Octopress\ndate: 2015-06-07 16:00:00\ntags: \n     - blog\ncategories: Tech\nkeywords: blog Octopress Ruby\ndescription: Github Pages,Ruby,Markdown,Jekyll and Octopress\n---\n\n# 目录\n- 前言\n- 各种框架和技术\n- 小总结\n\n# 前言\n\n搭建了这个基于Octopress和Github Pages的博客已经几个月了，但是其实对这里面的一些技术和原理还不了解，导致有时候在配置的时候会出点问题。所以觉得有必要简单梳理下。\n\n# 各种框架和技术\n\n## Github Pages\n\n\\#### \n\n首先需要说到Github，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。\n\n*但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。*\n\n## Jekyll\n\n看它的官网 <http://jekyll.bootcss.com/> 介绍：\n\n*将纯文本转化为静态网站和博客，只用 Markdown (或 Textile)、Liquid、HTML & CSS 就可以构建可部署的静态网站。*\n\n所以它是一个静态网页文件生成器，然后支持了Github Pages。\n\nJekyll是基于Ruby的，所以需要安装Ruby和Ruby Devkit。\n\n## Octopress\n\n首先还是看它自己的介绍 <https://github.com/imathis/octopress> ：\n\n*Octopress is an obsessively designed framework for Jekyll blogging. It’s easy to configure and easy to deploy.* \n\n**所以它是基于Jekyll的，并且内置了不少博客框架，让你搭建博客更方便。**\n\n在以下文件可以看到它的组成：\n\n<https://github.com/imathis/octopress/blob/master/Gemfile>\n\n**网上看到一个区别**：\n\n上传发布细微区别，jekyll 可以直接用git上传 .md or .html 文件不需要编译，Otcopress是makefile将文件转化.html发布。所以这也是一个缺点，当文章越多，编译发布时间就越长了吧。\n\n另外，Octopress 在 Jekyll 0.x 时代是个非常好的 Jekyll-blog 解决方案，有不错的模版，丰富的扩展功能，缺点就是麻烦，需要在本地生成页面。但是在过去一年，Jekyll大量的新功能新特性加入让 Octopress 显得不那么必要。Octopress 3 也改变策略，不再那么复杂，只是对 Jekyll 操作进行二次封装，方便使用。\n\n## Ruby\n\n一种脚本语言。Octopress是基于Ruby的，所以我们不时需要修改这种语言的代码。\n\n## Markdown\n\n\\#### \n\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。\n\n## Rake\n\n**网上的介绍**：\n\n*Rake 是用 Ruby 编写的，并使用 Ruby 作为它的语法，是 Ruby 的 Make ，许多方面都比 Make 要更好用一些。\n\n看这个文件 <https://github.com/imathis/octopress/blob/master/Gemfile> 知道，它包含在Octopress中。\n\n## Rakefile\n\n\\#### \n\n**网上的介绍**：\n\n和 Makefile 不同的是，Rakefile 本身其实就是一段 Ruby 代码，这样的好处有很多，一方面在 Rake 里面就可以很直接地做任何 Ruby 能做的事了，另一方面由于 Ruby 对 DSL 支持良好，所以 Rakefile 通常看起来也并不那么“代码”。*\n\n## Gemfile\n\nGemfile 文件描述Ruby工程需要依赖的插件bundle。\n\n执行以下两句命令的时候就是安装bundler插件，然后把 Gemfile 文件里面关联的插件下载下来。\n\n```\ngem install bundler\nbundle install\n```\n\n# 小总结\n\n**所以，总结一下这种搭建博客的方案的实现步骤**：\n\n1. 首先我们使用 rake new_post[“XXX”] 生成一个 markdown 文件（rake命令来自rake工具，从目录下的 Rakefile 文件可以看到这条命令做了什么），然后编写这个文件。\n2. 使用命令 rake generate ,会将 markdown 文件转换成 html 文件。在这个过程中利用了Octopress的其他插件，配置了如头部、尾部、侧边栏、评论等等。\n3. 使用 rake deploy 命令将文件都上传到 Github Pages 上。然后我们访问那个域名就可以看到了。\n4. 如果要使用自己的域名，就需要让自己的域名解析指向这个地址，具体可以看我的另一篇文章（<http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/> ）\n\n这里讲的还是比较浅显，还有一些，比如 rake generate 到底做了什么，整个目录下各个文件夹分别是什么作用等等，还没怎么了解，如果了解的话对以后出问题的解决还是有帮助的。\n\n总的来说，网上可以找到很多建博客的方法和它们的优劣对比，这里就不多说那些，个人觉得最终还是要回归到自己建博客的目的：写文章，不然迁来迁去挺折腾的，所以在写和发表时效率高这个最重要了，其他都是次要。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"github-pages-ruby-markdown-jekyll-octopress","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pm000p07eixj5t586x","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>各种框架和技术</li>\n<li>小总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>搭建了这个基于Octopress和Github Pages的博客已经几个月了，但是其实对这里面的一些技术和原理还不了解，导致有时候在配置的时候会出点问题。所以觉得有必要简单梳理下。</p>\n<h1 id=\"各种框架和技术\"><a href=\"#各种框架和技术\" class=\"headerlink\" title=\"各种框架和技术\"></a>各种框架和技术</h1><h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><p>#### </p>\n<p>首先需要说到Github，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。</p>\n<p><em>但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</em></p>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>看它的官网 <a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://jekyll.bootcss.com/</a> 介绍：</p>\n<p><em>将纯文本转化为静态网站和博客，只用 Markdown (或 Textile)、Liquid、HTML &amp; CSS 就可以构建可部署的静态网站。</em></p>\n<p>所以它是一个静态网页文件生成器，然后支持了Github Pages。</p>\n<p>Jekyll是基于Ruby的，所以需要安装Ruby和Ruby Devkit。</p>\n<h2 id=\"Octopress\"><a href=\"#Octopress\" class=\"headerlink\" title=\"Octopress\"></a>Octopress</h2><p>首先还是看它自己的介绍 <a href=\"https://github.com/imathis/octopress\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress</a> ：</p>\n<p><em>Octopress is an obsessively designed framework for Jekyll blogging. It’s easy to configure and easy to deploy.</em> </p>\n<p><strong>所以它是基于Jekyll的，并且内置了不少博客框架，让你搭建博客更方便。</strong></p>\n<p>在以下文件可以看到它的组成：</p>\n<p><a href=\"https://github.com/imathis/octopress/blob/master/Gemfile\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/blob/master/Gemfile</a></p>\n<p><strong>网上看到一个区别</strong>：</p>\n<p>上传发布细微区别，jekyll 可以直接用git上传 .md or .html 文件不需要编译，Otcopress是makefile将文件转化.html发布。所以这也是一个缺点，当文章越多，编译发布时间就越长了吧。</p>\n<p>另外，Octopress 在 Jekyll 0.x 时代是个非常好的 Jekyll-blog 解决方案，有不错的模版，丰富的扩展功能，缺点就是麻烦，需要在本地生成页面。但是在过去一年，Jekyll大量的新功能新特性加入让 Octopress 显得不那么必要。Octopress 3 也改变策略，不再那么复杂，只是对 Jekyll 操作进行二次封装，方便使用。</p>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><p>一种脚本语言。Octopress是基于Ruby的，所以我们不时需要修改这种语言的代码。</p>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>#### </p>\n<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<h2 id=\"Rake\"><a href=\"#Rake\" class=\"headerlink\" title=\"Rake\"></a>Rake</h2><p><strong>网上的介绍</strong>：</p>\n<p>*Rake 是用 Ruby 编写的，并使用 Ruby 作为它的语法，是 Ruby 的 Make ，许多方面都比 Make 要更好用一些。</p>\n<p>看这个文件 <a href=\"https://github.com/imathis/octopress/blob/master/Gemfile\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/blob/master/Gemfile</a> 知道，它包含在Octopress中。</p>\n<h2 id=\"Rakefile\"><a href=\"#Rakefile\" class=\"headerlink\" title=\"Rakefile\"></a>Rakefile</h2><p>#### </p>\n<p><strong>网上的介绍</strong>：</p>\n<p>和 Makefile 不同的是，Rakefile 本身其实就是一段 Ruby 代码，这样的好处有很多，一方面在 Rake 里面就可以很直接地做任何 Ruby 能做的事了，另一方面由于 Ruby 对 DSL 支持良好，所以 Rakefile 通常看起来也并不那么“代码”。*</p>\n<h2 id=\"Gemfile\"><a href=\"#Gemfile\" class=\"headerlink\" title=\"Gemfile\"></a>Gemfile</h2><p>Gemfile 文件描述Ruby工程需要依赖的插件bundle。</p>\n<p>执行以下两句命令的时候就是安装bundler插件，然后把 Gemfile 文件里面关联的插件下载下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler</span><br><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h1><p><strong>所以，总结一下这种搭建博客的方案的实现步骤</strong>：</p>\n<ol>\n<li>首先我们使用 rake new_post[“XXX”] 生成一个 markdown 文件（rake命令来自rake工具，从目录下的 Rakefile 文件可以看到这条命令做了什么），然后编写这个文件。</li>\n<li>使用命令 rake generate ,会将 markdown 文件转换成 html 文件。在这个过程中利用了Octopress的其他插件，配置了如头部、尾部、侧边栏、评论等等。</li>\n<li>使用 rake deploy 命令将文件都上传到 Github Pages 上。然后我们访问那个域名就可以看到了。</li>\n<li>如果要使用自己的域名，就需要让自己的域名解析指向这个地址，具体可以看我的另一篇文章（<a href=\"http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/\">http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/</a> ）</li>\n</ol>\n<p>这里讲的还是比较浅显，还有一些，比如 rake generate 到底做了什么，整个目录下各个文件夹分别是什么作用等等，还没怎么了解，如果了解的话对以后出问题的解决还是有帮助的。</p>\n<p>总的来说，网上可以找到很多建博客的方法和它们的优劣对比，这里就不多说那些，个人觉得最终还是要回归到自己建博客的目的：写文章，不然迁来迁去挺折腾的，所以在写和发表时效率高这个最重要了，其他都是次要。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>各种框架和技术</li>\n<li>小总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>搭建了这个基于Octopress和Github Pages的博客已经几个月了，但是其实对这里面的一些技术和原理还不了解，导致有时候在配置的时候会出点问题。所以觉得有必要简单梳理下。</p>\n<h1 id=\"各种框架和技术\"><a href=\"#各种框架和技术\" class=\"headerlink\" title=\"各种框架和技术\"></a>各种框架和技术</h1><h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><p>#### </p>\n<p>首先需要说到Github，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。</p>\n<p><em>但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</em></p>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>看它的官网 <a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://jekyll.bootcss.com/</a> 介绍：</p>\n<p><em>将纯文本转化为静态网站和博客，只用 Markdown (或 Textile)、Liquid、HTML &amp; CSS 就可以构建可部署的静态网站。</em></p>\n<p>所以它是一个静态网页文件生成器，然后支持了Github Pages。</p>\n<p>Jekyll是基于Ruby的，所以需要安装Ruby和Ruby Devkit。</p>\n<h2 id=\"Octopress\"><a href=\"#Octopress\" class=\"headerlink\" title=\"Octopress\"></a>Octopress</h2><p>首先还是看它自己的介绍 <a href=\"https://github.com/imathis/octopress\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress</a> ：</p>\n<p><em>Octopress is an obsessively designed framework for Jekyll blogging. It’s easy to configure and easy to deploy.</em> </p>\n<p><strong>所以它是基于Jekyll的，并且内置了不少博客框架，让你搭建博客更方便。</strong></p>\n<p>在以下文件可以看到它的组成：</p>\n<p><a href=\"https://github.com/imathis/octopress/blob/master/Gemfile\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/blob/master/Gemfile</a></p>\n<p><strong>网上看到一个区别</strong>：</p>\n<p>上传发布细微区别，jekyll 可以直接用git上传 .md or .html 文件不需要编译，Otcopress是makefile将文件转化.html发布。所以这也是一个缺点，当文章越多，编译发布时间就越长了吧。</p>\n<p>另外，Octopress 在 Jekyll 0.x 时代是个非常好的 Jekyll-blog 解决方案，有不错的模版，丰富的扩展功能，缺点就是麻烦，需要在本地生成页面。但是在过去一年，Jekyll大量的新功能新特性加入让 Octopress 显得不那么必要。Octopress 3 也改变策略，不再那么复杂，只是对 Jekyll 操作进行二次封装，方便使用。</p>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><p>一种脚本语言。Octopress是基于Ruby的，所以我们不时需要修改这种语言的代码。</p>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p>#### </p>\n<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<h2 id=\"Rake\"><a href=\"#Rake\" class=\"headerlink\" title=\"Rake\"></a>Rake</h2><p><strong>网上的介绍</strong>：</p>\n<p>*Rake 是用 Ruby 编写的，并使用 Ruby 作为它的语法，是 Ruby 的 Make ，许多方面都比 Make 要更好用一些。</p>\n<p>看这个文件 <a href=\"https://github.com/imathis/octopress/blob/master/Gemfile\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/blob/master/Gemfile</a> 知道，它包含在Octopress中。</p>\n<h2 id=\"Rakefile\"><a href=\"#Rakefile\" class=\"headerlink\" title=\"Rakefile\"></a>Rakefile</h2><p>#### </p>\n<p><strong>网上的介绍</strong>：</p>\n<p>和 Makefile 不同的是，Rakefile 本身其实就是一段 Ruby 代码，这样的好处有很多，一方面在 Rake 里面就可以很直接地做任何 Ruby 能做的事了，另一方面由于 Ruby 对 DSL 支持良好，所以 Rakefile 通常看起来也并不那么“代码”。*</p>\n<h2 id=\"Gemfile\"><a href=\"#Gemfile\" class=\"headerlink\" title=\"Gemfile\"></a>Gemfile</h2><p>Gemfile 文件描述Ruby工程需要依赖的插件bundle。</p>\n<p>执行以下两句命令的时候就是安装bundler插件，然后把 Gemfile 文件里面关联的插件下载下来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler</span><br><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h1><p><strong>所以，总结一下这种搭建博客的方案的实现步骤</strong>：</p>\n<ol>\n<li>首先我们使用 rake new_post[“XXX”] 生成一个 markdown 文件（rake命令来自rake工具，从目录下的 Rakefile 文件可以看到这条命令做了什么），然后编写这个文件。</li>\n<li>使用命令 rake generate ,会将 markdown 文件转换成 html 文件。在这个过程中利用了Octopress的其他插件，配置了如头部、尾部、侧边栏、评论等等。</li>\n<li>使用 rake deploy 命令将文件都上传到 Github Pages 上。然后我们访问那个域名就可以看到了。</li>\n<li>如果要使用自己的域名，就需要让自己的域名解析指向这个地址，具体可以看我的另一篇文章（<a href=\"http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/\">http://zackzheng.info/blog/2015/02/22/start-a-blog-on-github-pages-base-on-octopress/</a> ）</li>\n</ol>\n<p>这里讲的还是比较浅显，还有一些，比如 rake generate 到底做了什么，整个目录下各个文件夹分别是什么作用等等，还没怎么了解，如果了解的话对以后出问题的解决还是有帮助的。</p>\n<p>总的来说，网上可以找到很多建博客的方法和它们的优劣对比，这里就不多说那些，个人觉得最终还是要回归到自己建博客的目的：写文章，不然迁来迁去挺折腾的，所以在写和发表时效率高这个最重要了，其他都是次要。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"加速Octopress博客的访问","date":"2015-06-07T08:00:00.000Z","keywords":"blog Octopress","description":"加速Octopress博客的访问","_content":"\n因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比。网上找到几个加快访问的方法。\n\n### 替换Google JS公共库\n\nOctopress默认使用的是Google的JS公共库地址，加载的过程无比缓慢。因此我们要把它改为“百度的JS公共库”，需要修改 /source/_includes/head.html 文件：\n\n```\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n```\n\n改为\n\n```\n<script src=\"//libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n```\n\n可在此查到百度最新的jquery版本的地址：\n\n> <http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery>\n\n### 去掉Twitter\n\n把在根目录下的 _config.yml 文件中Twitter内容给注释掉。\n\n```\n# Twitter\n#twitter_user:\n#twitter_tweet_button: true\n```\n\n把 \\source\\_includes\\after_footer.html 文件中的Twitter内容给注释掉：\n\n```\n{% raw %}<!--{% include twitter_sharing.html %}-->{% endraw %}\n```\n\n### 删除Google font\n\n把在 \\source\\_includes\\custom\\head.html 中的Google font样式给删除：\n\n```\n<link href=\"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-make-visit-faster.md","raw":"---\ntitle: 加速Octopress博客的访问\ndate: 2015-06-07 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 加速Octopress博客的访问\n---\n\n因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比。网上找到几个加快访问的方法。\n\n### 替换Google JS公共库\n\nOctopress默认使用的是Google的JS公共库地址，加载的过程无比缓慢。因此我们要把它改为“百度的JS公共库”，需要修改 /source/_includes/head.html 文件：\n\n```\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n```\n\n改为\n\n```\n<script src=\"//libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n```\n\n可在此查到百度最新的jquery版本的地址：\n\n> <http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery>\n\n### 去掉Twitter\n\n把在根目录下的 _config.yml 文件中Twitter内容给注释掉。\n\n```\n# Twitter\n#twitter_user:\n#twitter_tweet_button: true\n```\n\n把 \\source\\_includes\\after_footer.html 文件中的Twitter内容给注释掉：\n\n```\n{% raw %}<!--{% include twitter_sharing.html %}-->{% endraw %}\n```\n\n### 删除Google font\n\n把在 \\source\\_includes\\custom\\head.html 中的Google font样式给删除：\n\n```\n<link href=\"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"make-visit-faster","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pn000s07eien9f3c74","content":"<p>因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比。网上找到几个加快访问的方法。</p>\n<h3 id=\"替换Google-JS公共库\"><a href=\"#替换Google-JS公共库\" class=\"headerlink\" title=\"替换Google JS公共库\"></a>替换Google JS公共库</h3><p>Octopress默认使用的是Google的JS公共库地址，加载的过程无比缓慢。因此我们要把它改为“百度的JS公共库”，需要修改 /source/_includes/head.html 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可在此查到百度最新的jquery版本的地址：</p>\n<blockquote>\n<p><a href=\"http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery\" target=\"_blank\" rel=\"noopener\">http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery</a></p>\n</blockquote>\n<h3 id=\"去掉Twitter\"><a href=\"#去掉Twitter\" class=\"headerlink\" title=\"去掉Twitter\"></a>去掉Twitter</h3><p>把在根目录下的 _config.yml 文件中Twitter内容给注释掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Twitter</span><br><span class=\"line\">#twitter_user:</span><br><span class=\"line\">#twitter_tweet_button: true</span><br></pre></td></tr></table></figure>\n\n<p>把 \\source_includes\\after_footer.html 文件中的Twitter内容给注释掉：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&lt;!--&#123;% include twitter_sharing.html %&#125;--&gt;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Google-font\"><a href=\"#删除Google-font\" class=\"headerlink\" title=\"删除Google font\"></a>删除Google font</h3><p>把在 \\source_includes\\custom\\head.html 中的Google font样式给删除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">&lt;link href=&quot;//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比。网上找到几个加快访问的方法。</p>\n<h3 id=\"替换Google-JS公共库\"><a href=\"#替换Google-JS公共库\" class=\"headerlink\" title=\"替换Google JS公共库\"></a>替换Google JS公共库</h3><p>Octopress默认使用的是Google的JS公共库地址，加载的过程无比缓慢。因此我们要把它改为“百度的JS公共库”，需要修改 /source/_includes/head.html 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可在此查到百度最新的jquery版本的地址：</p>\n<blockquote>\n<p><a href=\"http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery\" target=\"_blank\" rel=\"noopener\">http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs#jQuery</a></p>\n</blockquote>\n<h3 id=\"去掉Twitter\"><a href=\"#去掉Twitter\" class=\"headerlink\" title=\"去掉Twitter\"></a>去掉Twitter</h3><p>把在根目录下的 _config.yml 文件中Twitter内容给注释掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Twitter</span><br><span class=\"line\">#twitter_user:</span><br><span class=\"line\">#twitter_tweet_button: true</span><br></pre></td></tr></table></figure>\n\n<p>把 \\source_includes\\after_footer.html 文件中的Twitter内容给注释掉：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&lt;!--&#123;% include twitter_sharing.html %&#125;--&gt;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除Google-font\"><a href=\"#删除Google-font\" class=\"headerlink\" title=\"删除Google font\"></a>删除Google font</h3><p>把在 \\source_includes\\custom\\head.html 中的Google font样式给删除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">&lt;link href=&quot;//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"在Octopress博客的导航栏添加页面","date":"2015-06-07T08:00:00.000Z","keywords":"blog Octopress","description":"在Octopress博客的导航栏添加页面","_content":"\n在octopress中，已经有两个默认page，即blog、archives，我们可以参考它来完成自己的页面。\n\n执行一下语句：\n\n```\nrake new_page[\"about\"]\n```\n\n此时在目录下会生成文件夹 about ，编辑文件夹内的文件 index.markdown，即你新页面的内容。\n\n编辑 source/_includes/custom/navigation.html\n\n```\n<ul class=\"main-navigation\">\n\t<li><a href=\"/\">Blog</a></li>\n\t<li><a href=\"/blog/archives\">Archives</a></li>\n\t<li><a href=\"/jsccp\">JavaScript内核系列</a></li>\n</ul>\n```\n\n添加了一个新行，指向新创建的目录。\n\n执行：\n\n```\nrake gen_deploy\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-new-a-page-on-navigation.md","raw":"---\ntitle: 在Octopress博客的导航栏添加页面\ndate: 2015-06-07 16:00:00\ntags: \n     - Octopress\ncategories: blog\nkeywords: blog Octopress\ndescription: 在Octopress博客的导航栏添加页面\n---\n\n在octopress中，已经有两个默认page，即blog、archives，我们可以参考它来完成自己的页面。\n\n执行一下语句：\n\n```\nrake new_page[\"about\"]\n```\n\n此时在目录下会生成文件夹 about ，编辑文件夹内的文件 index.markdown，即你新页面的内容。\n\n编辑 source/_includes/custom/navigation.html\n\n```\n<ul class=\"main-navigation\">\n\t<li><a href=\"/\">Blog</a></li>\n\t<li><a href=\"/blog/archives\">Archives</a></li>\n\t<li><a href=\"/jsccp\">JavaScript内核系列</a></li>\n</ul>\n```\n\n添加了一个新行，指向新创建的目录。\n\n执行：\n\n```\nrake gen_deploy\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"new-a-page-on-navigation","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7po000x07eikm6miy4q","content":"<p>在octopress中，已经有两个默认page，即blog、archives，我们可以参考它来完成自己的页面。</p>\n<p>执行一下语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&quot;about&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>此时在目录下会生成文件夹 about ，编辑文件夹内的文件 index.markdown，即你新页面的内容。</p>\n<p>编辑 source/_includes/custom/navigation.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;main-navigation&quot;&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/blog/archives&quot;&gt;Archives&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/jsccp&quot;&gt;JavaScript内核系列&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加了一个新行，指向新创建的目录。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake gen_deploy</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在octopress中，已经有两个默认page，即blog、archives，我们可以参考它来完成自己的页面。</p>\n<p>执行一下语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_page[&quot;about&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>此时在目录下会生成文件夹 about ，编辑文件夹内的文件 index.markdown，即你新页面的内容。</p>\n<p>编辑 source/_includes/custom/navigation.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;main-navigation&quot;&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/blog/archives&quot;&gt;Archives&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;a href=&quot;/jsccp&quot;&gt;JavaScript内核系列&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加了一个新行，指向新创建的目录。</p>\n<p>执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake gen_deploy</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为Octopress博客添加SEO","date":"2015-06-07T08:00:00.000Z","keywords":"Octopress","description":"为Octopress博客添加SEO","_content":"\n建好博客，当然希望更多的人看到和交流，做好SEO是必要的。\n\n- ##### 将网站地址提交给各大搜索引擎\n\n为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：\n\n```\nhttp://urlc.cn/tool/addurl.html\nhttp://tool.lusongsong.com/addurl.html\n```\n\n- ##### 文章头添加更多信息\n\n我们发现创建一篇新文章的时候，生成的makedown文件包含以下内容：\n\n```\nlayout: post\ntitle: \"为Octopress博客添加SEO\"\ndate: 2015-06-07 08:23\ncomments: true\ncategories: Octopress\n```\n\n实际上我们还可以为其添加以下几项，以本文举例：\n\n```\nkeywords: octopress blog github pages SEO analytics\ndescription: 为Octopress添加SEO\n```\n\n可以修改Rakefile文件，让创建文章时自动添加,找到以下代码并修改如下：\n\n```\nputs \"Creating new post: #{filename}\"\nopen(filename, 'w') do |post|\npost.puts \"---\"\npost.puts \"layout: post\"\npost.puts \"title: \\\"#{title.gsub(/&/,'&')}\\\"\"\npost.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\npost.puts \"comments: true\"\npost.puts \"categories: \"\npost.puts \"keywords: \"\npost.puts \"description: \"\npost.puts \"---\"\n```\n\n还有这里：\n\n```\nputs \"Creating new page: #{file}\"\nopen(file, 'w') do |page|\npage.puts \"---\"\npage.puts \"layout: page\"\npage.puts \"title: \\\"#{title}\\\"\"\npage.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\npage.puts \"comments: true\"\npage.puts \"keywords: \"\npage.puts \"description: \"\npage.puts \"sharing: true\"\npage.puts \"footer: true\"\npage.puts \"---\"\n```\n\n- ##### Google Analytics\n\nGoogle Analytics 是Octopress自带的统计工具，使用方式也非常简单，只需要到 Google Analytics 申请一个 app id ，填写到 _config.yml 文件中的 google_analytics_tracking_id 后面即可。\n\n- ##### 百度统计\n\n百度站长工具和百度统计，注册后将代码添加到source/_includes/custom/footer.html中。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-seo-about-octopress.md","raw":"---\ntitle: 为Octopress博客添加SEO\ndate: 2015-06-07 16:00:00\ntags: \n     - Octopress\n     - SEO\ncategories: blog\nkeywords: Octopress\ndescription: 为Octopress博客添加SEO\n---\n\n建好博客，当然希望更多的人看到和交流，做好SEO是必要的。\n\n- ##### 将网站地址提交给各大搜索引擎\n\n为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：\n\n```\nhttp://urlc.cn/tool/addurl.html\nhttp://tool.lusongsong.com/addurl.html\n```\n\n- ##### 文章头添加更多信息\n\n我们发现创建一篇新文章的时候，生成的makedown文件包含以下内容：\n\n```\nlayout: post\ntitle: \"为Octopress博客添加SEO\"\ndate: 2015-06-07 08:23\ncomments: true\ncategories: Octopress\n```\n\n实际上我们还可以为其添加以下几项，以本文举例：\n\n```\nkeywords: octopress blog github pages SEO analytics\ndescription: 为Octopress添加SEO\n```\n\n可以修改Rakefile文件，让创建文章时自动添加,找到以下代码并修改如下：\n\n```\nputs \"Creating new post: #{filename}\"\nopen(filename, 'w') do |post|\npost.puts \"---\"\npost.puts \"layout: post\"\npost.puts \"title: \\\"#{title.gsub(/&/,'&')}\\\"\"\npost.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\npost.puts \"comments: true\"\npost.puts \"categories: \"\npost.puts \"keywords: \"\npost.puts \"description: \"\npost.puts \"---\"\n```\n\n还有这里：\n\n```\nputs \"Creating new page: #{file}\"\nopen(file, 'w') do |page|\npage.puts \"---\"\npage.puts \"layout: page\"\npage.puts \"title: \\\"#{title}\\\"\"\npage.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\npage.puts \"comments: true\"\npage.puts \"keywords: \"\npage.puts \"description: \"\npage.puts \"sharing: true\"\npage.puts \"footer: true\"\npage.puts \"---\"\n```\n\n- ##### Google Analytics\n\nGoogle Analytics 是Octopress自带的统计工具，使用方式也非常简单，只需要到 Google Analytics 申请一个 app id ，填写到 _config.yml 文件中的 google_analytics_tracking_id 后面即可。\n\n- ##### 百度统计\n\n百度站长工具和百度统计，注册后将代码添加到source/_includes/custom/footer.html中。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"seo-about-octopress","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pp001007ei02aqfw2u","content":"<p>建好博客，当然希望更多的人看到和交流，做好SEO是必要的。</p>\n<ul>\n<li><h5 id=\"将网站地址提交给各大搜索引擎\"><a href=\"#将网站地址提交给各大搜索引擎\" class=\"headerlink\" title=\"将网站地址提交给各大搜索引擎\"></a>将网站地址提交给各大搜索引擎</h5></li>\n</ul>\n<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://urlc.cn/tool/addurl.html</span><br><span class=\"line\">http://tool.lusongsong.com/addurl.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"文章头添加更多信息\"><a href=\"#文章头添加更多信息\" class=\"headerlink\" title=\"文章头添加更多信息\"></a>文章头添加更多信息</h5></li>\n</ul>\n<p>我们发现创建一篇新文章的时候，生成的makedown文件包含以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;为Octopress博客添加SEO&quot;</span><br><span class=\"line\">date: 2015-06-07 08:23</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br></pre></td></tr></table></figure>\n\n<p>实际上我们还可以为其添加以下几项，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keywords: octopress blog github pages SEO analytics</span><br><span class=\"line\">description: 为Octopress添加SEO</span><br></pre></td></tr></table></figure>\n\n<p>可以修改Rakefile文件，让创建文章时自动添加,找到以下代码并修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new post: #&#123;filename&#125;&quot;</span><br><span class=\"line\">open(filename, &apos;w&apos;) do |post|</span><br><span class=\"line\">post.puts &quot;---&quot;</span><br><span class=\"line\">post.puts &quot;layout: post&quot;</span><br><span class=\"line\">post.puts &quot;title: \\&quot;#&#123;title.gsub(/&amp;/,&apos;&amp;&apos;)&#125;\\&quot;&quot;</span><br><span class=\"line\">post.puts &quot;date: #&#123;Time.now.strftime(&apos;%Y-%m-%d %H:%M&apos;)&#125;&quot;</span><br><span class=\"line\">post.puts &quot;comments: true&quot;</span><br><span class=\"line\">post.puts &quot;categories: &quot;</span><br><span class=\"line\">post.puts &quot;keywords: &quot;</span><br><span class=\"line\">post.puts &quot;description: &quot;</span><br><span class=\"line\">post.puts &quot;---&quot;</span><br></pre></td></tr></table></figure>\n\n<p>还有这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new page: #&#123;file&#125;&quot;</span><br><span class=\"line\">open(file, &apos;w&apos;) do |page|</span><br><span class=\"line\">page.puts &quot;---&quot;</span><br><span class=\"line\">page.puts &quot;layout: page&quot;</span><br><span class=\"line\">page.puts &quot;title: \\&quot;#&#123;title&#125;\\&quot;&quot;</span><br><span class=\"line\">page.puts &quot;date: #&#123;Time.now.strftime(&apos;%Y-%m-%d %H:%M&apos;)&#125;&quot;</span><br><span class=\"line\">page.puts &quot;comments: true&quot;</span><br><span class=\"line\">page.puts &quot;keywords: &quot;</span><br><span class=\"line\">page.puts &quot;description: &quot;</span><br><span class=\"line\">page.puts &quot;sharing: true&quot;</span><br><span class=\"line\">page.puts &quot;footer: true&quot;</span><br><span class=\"line\">page.puts &quot;---&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"Google-Analytics\"><a href=\"#Google-Analytics\" class=\"headerlink\" title=\"Google Analytics\"></a>Google Analytics</h5></li>\n</ul>\n<p>Google Analytics 是Octopress自带的统计工具，使用方式也非常简单，只需要到 Google Analytics 申请一个 app id ，填写到 _config.yml 文件中的 google_analytics_tracking_id 后面即可。</p>\n<ul>\n<li><h5 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h5></li>\n</ul>\n<p>百度站长工具和百度统计，注册后将代码添加到source/_includes/custom/footer.html中。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>建好博客，当然希望更多的人看到和交流，做好SEO是必要的。</p>\n<ul>\n<li><h5 id=\"将网站地址提交给各大搜索引擎\"><a href=\"#将网站地址提交给各大搜索引擎\" class=\"headerlink\" title=\"将网站地址提交给各大搜索引擎\"></a>将网站地址提交给各大搜索引擎</h5></li>\n</ul>\n<p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://urlc.cn/tool/addurl.html</span><br><span class=\"line\">http://tool.lusongsong.com/addurl.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"文章头添加更多信息\"><a href=\"#文章头添加更多信息\" class=\"headerlink\" title=\"文章头添加更多信息\"></a>文章头添加更多信息</h5></li>\n</ul>\n<p>我们发现创建一篇新文章的时候，生成的makedown文件包含以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: post</span><br><span class=\"line\">title: &quot;为Octopress博客添加SEO&quot;</span><br><span class=\"line\">date: 2015-06-07 08:23</span><br><span class=\"line\">comments: true</span><br><span class=\"line\">categories: Octopress</span><br></pre></td></tr></table></figure>\n\n<p>实际上我们还可以为其添加以下几项，以本文举例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keywords: octopress blog github pages SEO analytics</span><br><span class=\"line\">description: 为Octopress添加SEO</span><br></pre></td></tr></table></figure>\n\n<p>可以修改Rakefile文件，让创建文章时自动添加,找到以下代码并修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new post: #&#123;filename&#125;&quot;</span><br><span class=\"line\">open(filename, &apos;w&apos;) do |post|</span><br><span class=\"line\">post.puts &quot;---&quot;</span><br><span class=\"line\">post.puts &quot;layout: post&quot;</span><br><span class=\"line\">post.puts &quot;title: \\&quot;#&#123;title.gsub(/&amp;/,&apos;&amp;&apos;)&#125;\\&quot;&quot;</span><br><span class=\"line\">post.puts &quot;date: #&#123;Time.now.strftime(&apos;%Y-%m-%d %H:%M&apos;)&#125;&quot;</span><br><span class=\"line\">post.puts &quot;comments: true&quot;</span><br><span class=\"line\">post.puts &quot;categories: &quot;</span><br><span class=\"line\">post.puts &quot;keywords: &quot;</span><br><span class=\"line\">post.puts &quot;description: &quot;</span><br><span class=\"line\">post.puts &quot;---&quot;</span><br></pre></td></tr></table></figure>\n\n<p>还有这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;Creating new page: #&#123;file&#125;&quot;</span><br><span class=\"line\">open(file, &apos;w&apos;) do |page|</span><br><span class=\"line\">page.puts &quot;---&quot;</span><br><span class=\"line\">page.puts &quot;layout: page&quot;</span><br><span class=\"line\">page.puts &quot;title: \\&quot;#&#123;title&#125;\\&quot;&quot;</span><br><span class=\"line\">page.puts &quot;date: #&#123;Time.now.strftime(&apos;%Y-%m-%d %H:%M&apos;)&#125;&quot;</span><br><span class=\"line\">page.puts &quot;comments: true&quot;</span><br><span class=\"line\">page.puts &quot;keywords: &quot;</span><br><span class=\"line\">page.puts &quot;description: &quot;</span><br><span class=\"line\">page.puts &quot;sharing: true&quot;</span><br><span class=\"line\">page.puts &quot;footer: true&quot;</span><br><span class=\"line\">page.puts &quot;---&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"Google-Analytics\"><a href=\"#Google-Analytics\" class=\"headerlink\" title=\"Google Analytics\"></a>Google Analytics</h5></li>\n</ul>\n<p>Google Analytics 是Octopress自带的统计工具，使用方式也非常简单，只需要到 Google Analytics 申请一个 app id ，填写到 _config.yml 文件中的 google_analytics_tracking_id 后面即可。</p>\n<ul>\n<li><h5 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h5></li>\n</ul>\n<p>百度站长工具和百度统计，注册后将代码添加到source/_includes/custom/footer.html中。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为你的Octopress博客生成Sitemap","date":"2015-06-07T08:00:00.000Z","keywords":"blog Octopress Sitemap","description":"为你的Octopress博客生成Sitemap","_content":"\n- ##### Sitemap是什么\n\nSitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。\n\nGoogle、雅虎、和微软都支持一个被称为xml网站地图（xml Sitemaps）的协议，而百度Sitemap是指百度支持的收录标准，在原有协议上做出了扩展。百度sitemap的作用是通过Sitemap告诉百度蜘蛛全面的站点链接，优化自己的网站。百度Sitemap分为三种格式：txt文本格式、xml格式、Sitemap索引格式。\n\n- ##### 如何生成\n\n网上可以搜索到很多方法，这里是用一个在线生成的工具：\n\n<https://www.xml-sitemaps.com/>\n\n生成完之后就可以提交给搜索引擎了，SEO优化可以参考下我的另一篇文章：\n\n<http://zackzheng.info/blog/2015/06/07/seo-about-octopress/>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-06-07-sitemap-of-your-octopress-blog.md","raw":"---\ntitle: 为你的Octopress博客生成Sitemap\ndate: 2015-06-07 16:00:00\ntags: \n     - Octopress\n     - Sitemap\ncategories: blog\nkeywords: blog Octopress Sitemap\ndescription: 为你的Octopress博客生成Sitemap\n---\n\n- ##### Sitemap是什么\n\nSitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。\n\nGoogle、雅虎、和微软都支持一个被称为xml网站地图（xml Sitemaps）的协议，而百度Sitemap是指百度支持的收录标准，在原有协议上做出了扩展。百度sitemap的作用是通过Sitemap告诉百度蜘蛛全面的站点链接，优化自己的网站。百度Sitemap分为三种格式：txt文本格式、xml格式、Sitemap索引格式。\n\n- ##### 如何生成\n\n网上可以搜索到很多方法，这里是用一个在线生成的工具：\n\n<https://www.xml-sitemaps.com/>\n\n生成完之后就可以提交给搜索引擎了，SEO优化可以参考下我的另一篇文章：\n\n<http://zackzheng.info/blog/2015/06/07/seo-about-octopress/>\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"sitemap-of-your-octopress-blog","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pr001507ein7w3vbnf","content":"<ul>\n<li><h5 id=\"Sitemap是什么\"><a href=\"#Sitemap是什么\" class=\"headerlink\" title=\"Sitemap是什么\"></a>Sitemap是什么</h5></li>\n</ul>\n<p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p>\n<p>Google、雅虎、和微软都支持一个被称为xml网站地图（xml Sitemaps）的协议，而百度Sitemap是指百度支持的收录标准，在原有协议上做出了扩展。百度sitemap的作用是通过Sitemap告诉百度蜘蛛全面的站点链接，优化自己的网站。百度Sitemap分为三种格式：txt文本格式、xml格式、Sitemap索引格式。</p>\n<ul>\n<li><h5 id=\"如何生成\"><a href=\"#如何生成\" class=\"headerlink\" title=\"如何生成\"></a>如何生成</h5></li>\n</ul>\n<p>网上可以搜索到很多方法，这里是用一个在线生成的工具：</p>\n<p><a href=\"https://www.xml-sitemaps.com/\" target=\"_blank\" rel=\"noopener\">https://www.xml-sitemaps.com/</a></p>\n<p>生成完之后就可以提交给搜索引擎了，SEO优化可以参考下我的另一篇文章：</p>\n<p><a href=\"http://zackzheng.info/blog/2015/06/07/seo-about-octopress/\">http://zackzheng.info/blog/2015/06/07/seo-about-octopress/</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h5 id=\"Sitemap是什么\"><a href=\"#Sitemap是什么\" class=\"headerlink\" title=\"Sitemap是什么\"></a>Sitemap是什么</h5></li>\n</ul>\n<p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p>\n<p>Google、雅虎、和微软都支持一个被称为xml网站地图（xml Sitemaps）的协议，而百度Sitemap是指百度支持的收录标准，在原有协议上做出了扩展。百度sitemap的作用是通过Sitemap告诉百度蜘蛛全面的站点链接，优化自己的网站。百度Sitemap分为三种格式：txt文本格式、xml格式、Sitemap索引格式。</p>\n<ul>\n<li><h5 id=\"如何生成\"><a href=\"#如何生成\" class=\"headerlink\" title=\"如何生成\"></a>如何生成</h5></li>\n</ul>\n<p>网上可以搜索到很多方法，这里是用一个在线生成的工具：</p>\n<p><a href=\"https://www.xml-sitemaps.com/\" target=\"_blank\" rel=\"noopener\">https://www.xml-sitemaps.com/</a></p>\n<p>生成完之后就可以提交给搜索引擎了，SEO优化可以参考下我的另一篇文章：</p>\n<p><a href=\"http://zackzheng.info/blog/2015/06/07/seo-about-octopress/\">http://zackzheng.info/blog/2015/06/07/seo-about-octopress/</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"最平常却最温馨的时刻","date":"2015-07-23T08:00:00.000Z","description":"最平常却最温馨的时刻","_content":"\n最平常却最温馨的时刻\n\n是下班时远远已见到一个熟悉的身影，\n\n在翘首等待着你，\n\n快步走上前牵上她的小手，\n\n相视而笑；\n\n或是等待心爱的她下班，\n\n见到你便傻笑，\n\n挽着你的手臂，一起漫步回家。\n\n彼此心里满是暖意，\n\n眼里充满爱意！\n\n虽是生活中最平常的事情，却是最实在的幸福！\n\n————下班偶见一幕有感\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-07-23-the-most-normal-but-warm-moment.md","raw":"---\ntitle: 最平常却最温馨的时刻\ndate: 2015-07-23 16:00:00\ntags: \n     - life\ncategories: life\ndescription: 最平常却最温馨的时刻\n---\n\n最平常却最温馨的时刻\n\n是下班时远远已见到一个熟悉的身影，\n\n在翘首等待着你，\n\n快步走上前牵上她的小手，\n\n相视而笑；\n\n或是等待心爱的她下班，\n\n见到你便傻笑，\n\n挽着你的手臂，一起漫步回家。\n\n彼此心里满是暖意，\n\n眼里充满爱意！\n\n虽是生活中最平常的事情，却是最实在的幸福！\n\n————下班偶见一幕有感\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"the-most-normal-but-warm-moment","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pr001807eippt7j1ey","content":"<p>最平常却最温馨的时刻</p>\n<p>是下班时远远已见到一个熟悉的身影，</p>\n<p>在翘首等待着你，</p>\n<p>快步走上前牵上她的小手，</p>\n<p>相视而笑；</p>\n<p>或是等待心爱的她下班，</p>\n<p>见到你便傻笑，</p>\n<p>挽着你的手臂，一起漫步回家。</p>\n<p>彼此心里满是暖意，</p>\n<p>眼里充满爱意！</p>\n<p>虽是生活中最平常的事情，却是最实在的幸福！</p>\n<p>————下班偶见一幕有感</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最平常却最温馨的时刻</p>\n<p>是下班时远远已见到一个熟悉的身影，</p>\n<p>在翘首等待着你，</p>\n<p>快步走上前牵上她的小手，</p>\n<p>相视而笑；</p>\n<p>或是等待心爱的她下班，</p>\n<p>见到你便傻笑，</p>\n<p>挽着你的手臂，一起漫步回家。</p>\n<p>彼此心里满是暖意，</p>\n<p>眼里充满爱意！</p>\n<p>虽是生活中最平常的事情，却是最实在的幸福！</p>\n<p>————下班偶见一幕有感</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"牧云徒步党第二弹：东西冲徒步露营计划","date":"2015-09-14T08:00:00.000Z","keywords":"徒步","description":"牧云徒步党第二弹：东西冲徒步露营计划","_content":"\n# 目录\n- 成员\n- 时间安排\n- 提前预定\n- 准备\n- 其他可能的费用\n\n# 成员\n\n9名：Christ、Zack、Hooke伉俪、May、Susie、Eleven、Leo、Viking\n\n# 时间安排\n\n## 09月19日\n\n### 08:30\n\n广州火车站H出口集中,再步行7、8分钟到市客运站\n\n### 08:50-11:40 大概2小时50分钟\n\n出发，广州市汽车客运站——深圳大鹏汽车站\n\n(候车厅3楼，检票口305，车位307，座位号3)\n\n### 11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)\n\n大鹏总站——东涌村委站(M231路，20个站)\n\n下车后往回走500米(或者跟司机说徒步路口下车)，保安亭旁机耕路上山\n\n### 12:40-18:00 5小时20分钟(快的话)\n\n吃午餐、徒步，进入西冲沙滩13元/位\n\n### 18:00后\n\n搭帐篷、烧烤、桌游\n\n## 09月20日\n\n活动待定，看日出？南澳镇小吃？沙滩排球？快艇出海？\n\n返回：\n\n1. 坐M232到南隆社区站(07:30-17:30，30分钟一班，全程3元)\n2. 南澳总站坐E11到罗湖体育馆(06:00-21:00，10分钟一班，全程10元)\n3. 坐动车回广州(一个多小时)\n\n# 提前预定\n\n1. 汽车票 (微信公众号广州市站，微信号gzkyz2014，票价80)\n2. 帐篷(三顶2人的，一顶3人的；两人帐篷30，三人帐篷48，押金54；西冲海豚湾度假中心，3号门进一直往右，提前联系18038134789，陈生)\n3. 烧烤营地：大众点评团购28（烧烤炉一个可坐10人、碳三斤、铁网一张、展铁叉十个），到西冲沙滩1号【金海湾度假中心】商务中心旁自由行接待处使用，客服0755-88858860\n4. 烧烤套餐：9个A餐20元/位，共180，领取地同上\n\n# 准备\n\n1. 徒步：朔溪鞋、跌打药、止血贴、头巾、速干衣裤、长袖衣服、帽子\n2. 沐浴：**换洗衣服、沐浴露、洗发露、毛巾、牙刷牙膏、镜子**、剃须刀\n3. 吃喝：**19号中午午餐、3升左右的水、零食**、榨菜、火腿、饼干、八宝粥、豆浆、肉脯\n4. 露营烧烤：**蚊怕水、手电筒、打火机**、风油精、泳衣裤、刀具、垃圾袋、睡袋\n5. 其他：**充电宝**、桌游、防水袋、相机\n\n# 其他可能的费用\n\n1. 淡水冲凉：10元/人，热水冲凉20元/人\n2. 不同厕所收费不同，一般1元/人、2元/人，5元/人不等\n3. 泳衣、泳裤、游泳圈价格不等。救生圈小的租金20元，押金20元。自带救生圈充气费5元\n4. 沙滩排球、足球出租20元/个，押金30元/个，拔河绳出租50元/条，麻将50元/台/天\n5. 大瓶矿泉水(怡宝)10元/瓶，大瓶七喜15元/瓶\n6. 观光快艇绕情人岛10元/人，上岛20元/人。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-09-14-going-hiking-through-the-tung-west-chung-coast.md","raw":"---\ntitle: 牧云徒步党第二弹：东西冲徒步露营计划\ndate: 2015-09-14 16:00:00\ntags: \n     - life\ncategories: life\nkeywords: 徒步\ndescription: 牧云徒步党第二弹：东西冲徒步露营计划\n---\n\n# 目录\n- 成员\n- 时间安排\n- 提前预定\n- 准备\n- 其他可能的费用\n\n# 成员\n\n9名：Christ、Zack、Hooke伉俪、May、Susie、Eleven、Leo、Viking\n\n# 时间安排\n\n## 09月19日\n\n### 08:30\n\n广州火车站H出口集中,再步行7、8分钟到市客运站\n\n### 08:50-11:40 大概2小时50分钟\n\n出发，广州市汽车客运站——深圳大鹏汽车站\n\n(候车厅3楼，检票口305，车位307，座位号3)\n\n### 11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)\n\n大鹏总站——东涌村委站(M231路，20个站)\n\n下车后往回走500米(或者跟司机说徒步路口下车)，保安亭旁机耕路上山\n\n### 12:40-18:00 5小时20分钟(快的话)\n\n吃午餐、徒步，进入西冲沙滩13元/位\n\n### 18:00后\n\n搭帐篷、烧烤、桌游\n\n## 09月20日\n\n活动待定，看日出？南澳镇小吃？沙滩排球？快艇出海？\n\n返回：\n\n1. 坐M232到南隆社区站(07:30-17:30，30分钟一班，全程3元)\n2. 南澳总站坐E11到罗湖体育馆(06:00-21:00，10分钟一班，全程10元)\n3. 坐动车回广州(一个多小时)\n\n# 提前预定\n\n1. 汽车票 (微信公众号广州市站，微信号gzkyz2014，票价80)\n2. 帐篷(三顶2人的，一顶3人的；两人帐篷30，三人帐篷48，押金54；西冲海豚湾度假中心，3号门进一直往右，提前联系18038134789，陈生)\n3. 烧烤营地：大众点评团购28（烧烤炉一个可坐10人、碳三斤、铁网一张、展铁叉十个），到西冲沙滩1号【金海湾度假中心】商务中心旁自由行接待处使用，客服0755-88858860\n4. 烧烤套餐：9个A餐20元/位，共180，领取地同上\n\n# 准备\n\n1. 徒步：朔溪鞋、跌打药、止血贴、头巾、速干衣裤、长袖衣服、帽子\n2. 沐浴：**换洗衣服、沐浴露、洗发露、毛巾、牙刷牙膏、镜子**、剃须刀\n3. 吃喝：**19号中午午餐、3升左右的水、零食**、榨菜、火腿、饼干、八宝粥、豆浆、肉脯\n4. 露营烧烤：**蚊怕水、手电筒、打火机**、风油精、泳衣裤、刀具、垃圾袋、睡袋\n5. 其他：**充电宝**、桌游、防水袋、相机\n\n# 其他可能的费用\n\n1. 淡水冲凉：10元/人，热水冲凉20元/人\n2. 不同厕所收费不同，一般1元/人、2元/人，5元/人不等\n3. 泳衣、泳裤、游泳圈价格不等。救生圈小的租金20元，押金20元。自带救生圈充气费5元\n4. 沙滩排球、足球出租20元/个，押金30元/个，拔河绳出租50元/条，麻将50元/台/天\n5. 大瓶矿泉水(怡宝)10元/瓶，大瓶七喜15元/瓶\n6. 观光快艇绕情人岛10元/人，上岛20元/人。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"going-hiking-through-the-tung-west-chung-coast","published":1,"updated":"2020-02-25T15:23:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7ps001c07ei2rco2dyz","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>成员</li>\n<li>时间安排</li>\n<li>提前预定</li>\n<li>准备</li>\n<li>其他可能的费用</li>\n</ul>\n<h1 id=\"成员\"><a href=\"#成员\" class=\"headerlink\" title=\"成员\"></a>成员</h1><p>9名：Christ、Zack、Hooke伉俪、May、Susie、Eleven、Leo、Viking</p>\n<h1 id=\"时间安排\"><a href=\"#时间安排\" class=\"headerlink\" title=\"时间安排\"></a>时间安排</h1><h2 id=\"09月19日\"><a href=\"#09月19日\" class=\"headerlink\" title=\"09月19日\"></a>09月19日</h2><h3 id=\"08-30\"><a href=\"#08-30\" class=\"headerlink\" title=\"08:30\"></a>08:30</h3><p>广州火车站H出口集中,再步行7、8分钟到市客运站</p>\n<h3 id=\"08-50-11-40-大概2小时50分钟\"><a href=\"#08-50-11-40-大概2小时50分钟\" class=\"headerlink\" title=\"08:50-11:40 大概2小时50分钟\"></a>08:50-11:40 大概2小时50分钟</h3><p>出发，广州市汽车客运站——深圳大鹏汽车站</p>\n<p>(候车厅3楼，检票口305，车位307，座位号3)</p>\n<h3 id=\"11-40-12-40-大概半个多小时-Tim说-1个小时20分钟-百度说\"><a href=\"#11-40-12-40-大概半个多小时-Tim说-1个小时20分钟-百度说\" class=\"headerlink\" title=\"11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)\"></a>11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)</h3><p>大鹏总站——东涌村委站(M231路，20个站)</p>\n<p>下车后往回走500米(或者跟司机说徒步路口下车)，保安亭旁机耕路上山</p>\n<h3 id=\"12-40-18-00-5小时20分钟-快的话\"><a href=\"#12-40-18-00-5小时20分钟-快的话\" class=\"headerlink\" title=\"12:40-18:00 5小时20分钟(快的话)\"></a>12:40-18:00 5小时20分钟(快的话)</h3><p>吃午餐、徒步，进入西冲沙滩13元/位</p>\n<h3 id=\"18-00后\"><a href=\"#18-00后\" class=\"headerlink\" title=\"18:00后\"></a>18:00后</h3><p>搭帐篷、烧烤、桌游</p>\n<h2 id=\"09月20日\"><a href=\"#09月20日\" class=\"headerlink\" title=\"09月20日\"></a>09月20日</h2><p>活动待定，看日出？南澳镇小吃？沙滩排球？快艇出海？</p>\n<p>返回：</p>\n<ol>\n<li>坐M232到南隆社区站(07:30-17:30，30分钟一班，全程3元)</li>\n<li>南澳总站坐E11到罗湖体育馆(06:00-21:00，10分钟一班，全程10元)</li>\n<li>坐动车回广州(一个多小时)</li>\n</ol>\n<h1 id=\"提前预定\"><a href=\"#提前预定\" class=\"headerlink\" title=\"提前预定\"></a>提前预定</h1><ol>\n<li>汽车票 (微信公众号广州市站，微信号gzkyz2014，票价80)</li>\n<li>帐篷(三顶2人的，一顶3人的；两人帐篷30，三人帐篷48，押金54；西冲海豚湾度假中心，3号门进一直往右，提前联系18038134789，陈生)</li>\n<li>烧烤营地：大众点评团购28（烧烤炉一个可坐10人、碳三斤、铁网一张、展铁叉十个），到西冲沙滩1号【金海湾度假中心】商务中心旁自由行接待处使用，客服0755-88858860</li>\n<li>烧烤套餐：9个A餐20元/位，共180，领取地同上</li>\n</ol>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><ol>\n<li>徒步：朔溪鞋、跌打药、止血贴、头巾、速干衣裤、长袖衣服、帽子</li>\n<li>沐浴：<strong>换洗衣服、沐浴露、洗发露、毛巾、牙刷牙膏、镜子</strong>、剃须刀</li>\n<li>吃喝：<strong>19号中午午餐、3升左右的水、零食</strong>、榨菜、火腿、饼干、八宝粥、豆浆、肉脯</li>\n<li>露营烧烤：<strong>蚊怕水、手电筒、打火机</strong>、风油精、泳衣裤、刀具、垃圾袋、睡袋</li>\n<li>其他：<strong>充电宝</strong>、桌游、防水袋、相机</li>\n</ol>\n<h1 id=\"其他可能的费用\"><a href=\"#其他可能的费用\" class=\"headerlink\" title=\"其他可能的费用\"></a>其他可能的费用</h1><ol>\n<li>淡水冲凉：10元/人，热水冲凉20元/人</li>\n<li>不同厕所收费不同，一般1元/人、2元/人，5元/人不等</li>\n<li>泳衣、泳裤、游泳圈价格不等。救生圈小的租金20元，押金20元。自带救生圈充气费5元</li>\n<li>沙滩排球、足球出租20元/个，押金30元/个，拔河绳出租50元/条，麻将50元/台/天</li>\n<li>大瓶矿泉水(怡宝)10元/瓶，大瓶七喜15元/瓶</li>\n<li>观光快艇绕情人岛10元/人，上岛20元/人。</li>\n</ol>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>成员</li>\n<li>时间安排</li>\n<li>提前预定</li>\n<li>准备</li>\n<li>其他可能的费用</li>\n</ul>\n<h1 id=\"成员\"><a href=\"#成员\" class=\"headerlink\" title=\"成员\"></a>成员</h1><p>9名：Christ、Zack、Hooke伉俪、May、Susie、Eleven、Leo、Viking</p>\n<h1 id=\"时间安排\"><a href=\"#时间安排\" class=\"headerlink\" title=\"时间安排\"></a>时间安排</h1><h2 id=\"09月19日\"><a href=\"#09月19日\" class=\"headerlink\" title=\"09月19日\"></a>09月19日</h2><h3 id=\"08-30\"><a href=\"#08-30\" class=\"headerlink\" title=\"08:30\"></a>08:30</h3><p>广州火车站H出口集中,再步行7、8分钟到市客运站</p>\n<h3 id=\"08-50-11-40-大概2小时50分钟\"><a href=\"#08-50-11-40-大概2小时50分钟\" class=\"headerlink\" title=\"08:50-11:40 大概2小时50分钟\"></a>08:50-11:40 大概2小时50分钟</h3><p>出发，广州市汽车客运站——深圳大鹏汽车站</p>\n<p>(候车厅3楼，检票口305，车位307，座位号3)</p>\n<h3 id=\"11-40-12-40-大概半个多小时-Tim说-1个小时20分钟-百度说\"><a href=\"#11-40-12-40-大概半个多小时-Tim说-1个小时20分钟-百度说\" class=\"headerlink\" title=\"11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)\"></a>11:40-12:40 大概半个多小时(Tim说)-1个小时20分钟(百度说)</h3><p>大鹏总站——东涌村委站(M231路，20个站)</p>\n<p>下车后往回走500米(或者跟司机说徒步路口下车)，保安亭旁机耕路上山</p>\n<h3 id=\"12-40-18-00-5小时20分钟-快的话\"><a href=\"#12-40-18-00-5小时20分钟-快的话\" class=\"headerlink\" title=\"12:40-18:00 5小时20分钟(快的话)\"></a>12:40-18:00 5小时20分钟(快的话)</h3><p>吃午餐、徒步，进入西冲沙滩13元/位</p>\n<h3 id=\"18-00后\"><a href=\"#18-00后\" class=\"headerlink\" title=\"18:00后\"></a>18:00后</h3><p>搭帐篷、烧烤、桌游</p>\n<h2 id=\"09月20日\"><a href=\"#09月20日\" class=\"headerlink\" title=\"09月20日\"></a>09月20日</h2><p>活动待定，看日出？南澳镇小吃？沙滩排球？快艇出海？</p>\n<p>返回：</p>\n<ol>\n<li>坐M232到南隆社区站(07:30-17:30，30分钟一班，全程3元)</li>\n<li>南澳总站坐E11到罗湖体育馆(06:00-21:00，10分钟一班，全程10元)</li>\n<li>坐动车回广州(一个多小时)</li>\n</ol>\n<h1 id=\"提前预定\"><a href=\"#提前预定\" class=\"headerlink\" title=\"提前预定\"></a>提前预定</h1><ol>\n<li>汽车票 (微信公众号广州市站，微信号gzkyz2014，票价80)</li>\n<li>帐篷(三顶2人的，一顶3人的；两人帐篷30，三人帐篷48，押金54；西冲海豚湾度假中心，3号门进一直往右，提前联系18038134789，陈生)</li>\n<li>烧烤营地：大众点评团购28（烧烤炉一个可坐10人、碳三斤、铁网一张、展铁叉十个），到西冲沙滩1号【金海湾度假中心】商务中心旁自由行接待处使用，客服0755-88858860</li>\n<li>烧烤套餐：9个A餐20元/位，共180，领取地同上</li>\n</ol>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><ol>\n<li>徒步：朔溪鞋、跌打药、止血贴、头巾、速干衣裤、长袖衣服、帽子</li>\n<li>沐浴：<strong>换洗衣服、沐浴露、洗发露、毛巾、牙刷牙膏、镜子</strong>、剃须刀</li>\n<li>吃喝：<strong>19号中午午餐、3升左右的水、零食</strong>、榨菜、火腿、饼干、八宝粥、豆浆、肉脯</li>\n<li>露营烧烤：<strong>蚊怕水、手电筒、打火机</strong>、风油精、泳衣裤、刀具、垃圾袋、睡袋</li>\n<li>其他：<strong>充电宝</strong>、桌游、防水袋、相机</li>\n</ol>\n<h1 id=\"其他可能的费用\"><a href=\"#其他可能的费用\" class=\"headerlink\" title=\"其他可能的费用\"></a>其他可能的费用</h1><ol>\n<li>淡水冲凉：10元/人，热水冲凉20元/人</li>\n<li>不同厕所收费不同，一般1元/人、2元/人，5元/人不等</li>\n<li>泳衣、泳裤、游泳圈价格不等。救生圈小的租金20元，押金20元。自带救生圈充气费5元</li>\n<li>沙滩排球、足球出租20元/个，押金30元/个，拔河绳出租50元/条，麻将50元/台/天</li>\n<li>大瓶矿泉水(怡宝)10元/瓶，大瓶七喜15元/瓶</li>\n<li>观光快艇绕情人岛10元/人，上岛20元/人。</li>\n</ol>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为iOS项目适配iOS 9和Xcode 7","date":"2015-09-29T08:00:00.000Z","keywords":"iOS","description":"为iOS项目适配iOS 9和Xcode 7","_content":"\n# 目录\n- Bitcode选项\n- Https处理\n- 应用隐私控制\n- 还有\n\n# Bitcode选项\n\n## 现象\n\n编译时出现以下提示：\n\n```\nYou must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64\n```\n\n就是提示某个库必须使用Bitcode重新构建，或者关闭Bitcode的选项。\n\n## 解决过程\n\n最开始是提示友盟统计分析的库不支持，看了友盟网站说最新版支持了，而我是用CocoaPods安装的，所以更新下：\n\n```\npod update UMengAnalytics-NO-IDFA\n```\n\n发现更新完还是v3.5.x的版本，试了几个方法还是没有作用，所以只有将它从podfile里面删除，然后下载最新的v3.6.5无IDFA版本，之后安装，没问题了。之后是提示了另一个库——美洽不支持Bitcode，在美洽的Q群中问了工程师，他们说下个版本才支持。\n\n看来要等所有用到的第三方库都支持Bitcode才行，转了一圈，最终还是要把Bitcode选项关闭。方法：**进入项目的TARGETS下，在“Build Settings”下有一个“Enable Bitcode”选项，改为“NO”即可**\n\n## 关于Bitcode\n\nBitcode是什么？看下官方文档[App Distribution Guide – App Thinning (iOS, watchOS)](https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2)，里面可以找到定义:\n\n(以下斜体字部分引用自[理解Bitcode：一种中间代码](http://www.cocoachina.com/ios/20150817/13078.html))：\n\n*bitcode是被编译程序的一种中间形式的代码。包含bitcode配置的程序将会在App store上被编译和链接。bitcode允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到App store上。*\n\n*当我们提交程序到App store上时，Xcode会将程序编译为一个中间表现形式(bitcode)。然后App store会再将这个botcode编译为可执行的64位或32位程序。*\n\n*再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关。*\n\n*如上面所说，bitcode是一种中间代码。LLVM官方文档有介绍这种文件的格式，有兴趣的可以移步LLVM Bitcode File Format。*\n\n对于iOS，bitcode是可选的。对于watchOS，bitcode是必须的。Mac OS不支持bitcode。Xcode7默认会开启Bitcode。\n\n# Https处理\n\n## 现象\n\n改完Bitcode，可以顺利编译通过了，运行，发现所有网络链接都没有返回数据。\n\n```\nThe resource could not be loaded because the App Transport Security\n```\n\n## 解决过程\n\n这个在iOS 9出来之前网上就一直在说，iOS9把所有的http请求都改为https了，说程序猿又要加班了什么的哈哈。\n\n*如何适配？—弱弱地问下：加班要多久？*\n\n两个解决方案：\n\n1. 立即让公司的服务端升级使用TLS 1.2\n2. 虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http\n\n因为后台还没支持，所以临时解决先继续支持http请求，方法：**在 Info.plist 中添加 NSAppTransportSecurity ，类型是 Dictionary ，Dictionary 下添加 NSAllowsArbitraryLoads ，类型 Boolean ，值设为 YES。**\n\n在[iOS 9 适配系列教程](http://www.cocoachina.com/ios/20150703/12392.html)一文中还讲了更严谨的做法，刚看到，明天试下。\n\n## 关于Https\n\n*iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是 强制增强数据访问安全，而且系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。*\n\n关于Https的就不解释了，网上可以找到很多说明。\n\n# 应用隐私控制\n\n## 现象\n\n刚好改了支付的网络层，测试下微信支付发现没法打开微信，然后看到在运行时输出栏就提示了以下信息：\n\n```\n2015-09-29 12:03:56.426 XXX[1199:510529] -canOpenURL: failed for URL: \"wechat://\" - error: \"This app is not allowed to query for scheme wechat\"\n2015-09-29 11:52:51.933 XXX[1187:507850] -canOpenURL: failed for URL: \"weixin://app/wx8dd9768db7127fdb/\" - error: \"This app is not allowed to query for scheme weixin\"\n2015-09-29 11:52:51.937 XXX[1187:507850] -canOpenURL: failed for URL: \"mqqopensdkapiV2://qqapp\" - error: \"This app is not allowed to query for scheme mqqopensdkapiV2\"\n2015-09-29 11:52:51.938 XXX[1187:507850] -canOpenURL: failed for URL: \"mqqOpensdkSSoLogin://qqapp\" - error: \"This app is not allowed to query for scheme mqqOpensdkSSoLogin\"\n2015-09-29 11:52:51.939 XXX[1187:507850] -canOpenURL: failed for URL: \"mqq://qqapp\" - error: \"This app is not allowed to query for scheme mqq\"\n2015-09-29 11:52:51.940 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapiV2://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapiV2\"\n2015-09-29 11:52:51.941 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapi19://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapi19\"\n2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapi://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapi\"\n2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdk://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdk\"\n2015-09-29 11:52:51.943 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzone://qzapp\" - error: \"This app is not allowed to query for scheme mqzone\"\n```\n\n## 解决过程\n\n参照网上的，在”Info.plist”里面增加 LSApplicationQueriesSchemes 的键，类型是Array，然后把需要支持的 URL scheme 分别加在里面，类型String。主要是一些分享、收藏、支付、登录等等的应用。\n\n我直接把上面输出栏提示的都加进去，如wechat、weixin、mqq等等。\n\n## 关于隐私控制\n\n[Quick Take on iOS 9 URL Scheme Changes](http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes)\n\n原来，在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。\n\n# 还有\n\n## 现象\n\n解决完可以编译通过，运行没问题，但是有两个warning：\n\n```\nAll interface orientations must be supported unless the app requires full screen.\nA launch storyboard or xib must be provided unless the app requires full screen.\n```\n\n## 解决过程\n\n[iOS项目更新之升级Xcode7 & iOS9](http://www.tuicool.com/articles/FFbqmyr) 这篇文章是这么解释的：\n\n*看到这句提示，就是说App默认是有开启了多任务功能，而多任务功能是需要App支持所有方向，如果我们App是有需要支持多任务，则需要开启App对各个方向（上、下、左、右）的支持;如果App不需要开启多任务，则只需要将如下示意图的 requires full screen 勾选上就ok（如图2.4）。*\n\nrequires full screen 勾选完运行，没有warning，并且对应用没什么影响。\n\n## 关于分屏多任务\n\n[iOS 9之分屏多任务（multitasking）](http://www.bubuko.com/infodetail-1022142.html) 这篇文章讲了一些，可以看看。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-09-29-adapt-to-xcode-7-and-ios-9.md","raw":"---\ntitle: 为iOS项目适配iOS 9和Xcode 7\ndate: 2015-09-29 16:00:00\ntags: \n     - iOS\ncategories: iOS\nkeywords: iOS\ndescription: 为iOS项目适配iOS 9和Xcode 7\n---\n\n# 目录\n- Bitcode选项\n- Https处理\n- 应用隐私控制\n- 还有\n\n# Bitcode选项\n\n## 现象\n\n编译时出现以下提示：\n\n```\nYou must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64\n```\n\n就是提示某个库必须使用Bitcode重新构建，或者关闭Bitcode的选项。\n\n## 解决过程\n\n最开始是提示友盟统计分析的库不支持，看了友盟网站说最新版支持了，而我是用CocoaPods安装的，所以更新下：\n\n```\npod update UMengAnalytics-NO-IDFA\n```\n\n发现更新完还是v3.5.x的版本，试了几个方法还是没有作用，所以只有将它从podfile里面删除，然后下载最新的v3.6.5无IDFA版本，之后安装，没问题了。之后是提示了另一个库——美洽不支持Bitcode，在美洽的Q群中问了工程师，他们说下个版本才支持。\n\n看来要等所有用到的第三方库都支持Bitcode才行，转了一圈，最终还是要把Bitcode选项关闭。方法：**进入项目的TARGETS下，在“Build Settings”下有一个“Enable Bitcode”选项，改为“NO”即可**\n\n## 关于Bitcode\n\nBitcode是什么？看下官方文档[App Distribution Guide – App Thinning (iOS, watchOS)](https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2)，里面可以找到定义:\n\n(以下斜体字部分引用自[理解Bitcode：一种中间代码](http://www.cocoachina.com/ios/20150817/13078.html))：\n\n*bitcode是被编译程序的一种中间形式的代码。包含bitcode配置的程序将会在App store上被编译和链接。bitcode允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到App store上。*\n\n*当我们提交程序到App store上时，Xcode会将程序编译为一个中间表现形式(bitcode)。然后App store会再将这个botcode编译为可执行的64位或32位程序。*\n\n*再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关。*\n\n*如上面所说，bitcode是一种中间代码。LLVM官方文档有介绍这种文件的格式，有兴趣的可以移步LLVM Bitcode File Format。*\n\n对于iOS，bitcode是可选的。对于watchOS，bitcode是必须的。Mac OS不支持bitcode。Xcode7默认会开启Bitcode。\n\n# Https处理\n\n## 现象\n\n改完Bitcode，可以顺利编译通过了，运行，发现所有网络链接都没有返回数据。\n\n```\nThe resource could not be loaded because the App Transport Security\n```\n\n## 解决过程\n\n这个在iOS 9出来之前网上就一直在说，iOS9把所有的http请求都改为https了，说程序猿又要加班了什么的哈哈。\n\n*如何适配？—弱弱地问下：加班要多久？*\n\n两个解决方案：\n\n1. 立即让公司的服务端升级使用TLS 1.2\n2. 虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http\n\n因为后台还没支持，所以临时解决先继续支持http请求，方法：**在 Info.plist 中添加 NSAppTransportSecurity ，类型是 Dictionary ，Dictionary 下添加 NSAllowsArbitraryLoads ，类型 Boolean ，值设为 YES。**\n\n在[iOS 9 适配系列教程](http://www.cocoachina.com/ios/20150703/12392.html)一文中还讲了更严谨的做法，刚看到，明天试下。\n\n## 关于Https\n\n*iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是 强制增强数据访问安全，而且系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。*\n\n关于Https的就不解释了，网上可以找到很多说明。\n\n# 应用隐私控制\n\n## 现象\n\n刚好改了支付的网络层，测试下微信支付发现没法打开微信，然后看到在运行时输出栏就提示了以下信息：\n\n```\n2015-09-29 12:03:56.426 XXX[1199:510529] -canOpenURL: failed for URL: \"wechat://\" - error: \"This app is not allowed to query for scheme wechat\"\n2015-09-29 11:52:51.933 XXX[1187:507850] -canOpenURL: failed for URL: \"weixin://app/wx8dd9768db7127fdb/\" - error: \"This app is not allowed to query for scheme weixin\"\n2015-09-29 11:52:51.937 XXX[1187:507850] -canOpenURL: failed for URL: \"mqqopensdkapiV2://qqapp\" - error: \"This app is not allowed to query for scheme mqqopensdkapiV2\"\n2015-09-29 11:52:51.938 XXX[1187:507850] -canOpenURL: failed for URL: \"mqqOpensdkSSoLogin://qqapp\" - error: \"This app is not allowed to query for scheme mqqOpensdkSSoLogin\"\n2015-09-29 11:52:51.939 XXX[1187:507850] -canOpenURL: failed for URL: \"mqq://qqapp\" - error: \"This app is not allowed to query for scheme mqq\"\n2015-09-29 11:52:51.940 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapiV2://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapiV2\"\n2015-09-29 11:52:51.941 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapi19://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapi19\"\n2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdkapi://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdkapi\"\n2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzoneopensdk://qzapp\" - error: \"This app is not allowed to query for scheme mqzoneopensdk\"\n2015-09-29 11:52:51.943 XXX[1187:507850] -canOpenURL: failed for URL: \"mqzone://qzapp\" - error: \"This app is not allowed to query for scheme mqzone\"\n```\n\n## 解决过程\n\n参照网上的，在”Info.plist”里面增加 LSApplicationQueriesSchemes 的键，类型是Array，然后把需要支持的 URL scheme 分别加在里面，类型String。主要是一些分享、收藏、支付、登录等等的应用。\n\n我直接把上面输出栏提示的都加进去，如wechat、weixin、mqq等等。\n\n## 关于隐私控制\n\n[Quick Take on iOS 9 URL Scheme Changes](http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes)\n\n原来，在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。\n\n# 还有\n\n## 现象\n\n解决完可以编译通过，运行没问题，但是有两个warning：\n\n```\nAll interface orientations must be supported unless the app requires full screen.\nA launch storyboard or xib must be provided unless the app requires full screen.\n```\n\n## 解决过程\n\n[iOS项目更新之升级Xcode7 & iOS9](http://www.tuicool.com/articles/FFbqmyr) 这篇文章是这么解释的：\n\n*看到这句提示，就是说App默认是有开启了多任务功能，而多任务功能是需要App支持所有方向，如果我们App是有需要支持多任务，则需要开启App对各个方向（上、下、左、右）的支持;如果App不需要开启多任务，则只需要将如下示意图的 requires full screen 勾选上就ok（如图2.4）。*\n\nrequires full screen 勾选完运行，没有warning，并且对应用没什么影响。\n\n## 关于分屏多任务\n\n[iOS 9之分屏多任务（multitasking）](http://www.bubuko.com/infodetail-1022142.html) 这篇文章讲了一些，可以看看。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"adapt-to-xcode-7-and-ios-9","published":1,"updated":"2020-02-25T15:23:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pt001f07ei9u9qtpx0","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>Bitcode选项</li>\n<li>Https处理</li>\n<li>应用隐私控制</li>\n<li>还有</li>\n</ul>\n<h1 id=\"Bitcode选项\"><a href=\"#Bitcode选项\" class=\"headerlink\" title=\"Bitcode选项\"></a>Bitcode选项</h1><h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>编译时出现以下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</span><br></pre></td></tr></table></figure>\n\n<p>就是提示某个库必须使用Bitcode重新构建，或者关闭Bitcode的选项。</p>\n<h2 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>最开始是提示友盟统计分析的库不支持，看了友盟网站说最新版支持了，而我是用CocoaPods安装的，所以更新下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod update UMengAnalytics-NO-IDFA</span><br></pre></td></tr></table></figure>\n\n<p>发现更新完还是v3.5.x的版本，试了几个方法还是没有作用，所以只有将它从podfile里面删除，然后下载最新的v3.6.5无IDFA版本，之后安装，没问题了。之后是提示了另一个库——美洽不支持Bitcode，在美洽的Q群中问了工程师，他们说下个版本才支持。</p>\n<p>看来要等所有用到的第三方库都支持Bitcode才行，转了一圈，最终还是要把Bitcode选项关闭。方法：<strong>进入项目的TARGETS下，在“Build Settings”下有一个“Enable Bitcode”选项，改为“NO”即可</strong></p>\n<h2 id=\"关于Bitcode\"><a href=\"#关于Bitcode\" class=\"headerlink\" title=\"关于Bitcode\"></a>关于Bitcode</h2><p>Bitcode是什么？看下官方文档<a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2\" target=\"_blank\" rel=\"noopener\">App Distribution Guide – App Thinning (iOS, watchOS)</a>，里面可以找到定义:</p>\n<p>(以下斜体字部分引用自<a href=\"http://www.cocoachina.com/ios/20150817/13078.html\" target=\"_blank\" rel=\"noopener\">理解Bitcode：一种中间代码</a>)：</p>\n<p><em>bitcode是被编译程序的一种中间形式的代码。包含bitcode配置的程序将会在App store上被编译和链接。bitcode允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到App store上。</em></p>\n<p><em>当我们提交程序到App store上时，Xcode会将程序编译为一个中间表现形式(bitcode)。然后App store会再将这个botcode编译为可执行的64位或32位程序。</em></p>\n<p><em>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关。</em></p>\n<p><em>如上面所说，bitcode是一种中间代码。LLVM官方文档有介绍这种文件的格式，有兴趣的可以移步LLVM Bitcode File Format。</em></p>\n<p>对于iOS，bitcode是可选的。对于watchOS，bitcode是必须的。Mac OS不支持bitcode。Xcode7默认会开启Bitcode。</p>\n<h1 id=\"Https处理\"><a href=\"#Https处理\" class=\"headerlink\" title=\"Https处理\"></a>Https处理</h1><h2 id=\"现象-1\"><a href=\"#现象-1\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>改完Bitcode，可以顺利编译通过了，运行，发现所有网络链接都没有返回数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The resource could not be loaded because the App Transport Security</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-1\"><a href=\"#解决过程-1\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>这个在iOS 9出来之前网上就一直在说，iOS9把所有的http请求都改为https了，说程序猿又要加班了什么的哈哈。</p>\n<p><em>如何适配？—弱弱地问下：加班要多久？</em></p>\n<p>两个解决方案：</p>\n<ol>\n<li>立即让公司的服务端升级使用TLS 1.2</li>\n<li>虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http</li>\n</ol>\n<p>因为后台还没支持，所以临时解决先继续支持http请求，方法：<strong>在 Info.plist 中添加 NSAppTransportSecurity ，类型是 Dictionary ，Dictionary 下添加 NSAllowsArbitraryLoads ，类型 Boolean ，值设为 YES。</strong></p>\n<p>在<a href=\"http://www.cocoachina.com/ios/20150703/12392.html\" target=\"_blank\" rel=\"noopener\">iOS 9 适配系列教程</a>一文中还讲了更严谨的做法，刚看到，明天试下。</p>\n<h2 id=\"关于Https\"><a href=\"#关于Https\" class=\"headerlink\" title=\"关于Https\"></a>关于Https</h2><p><em>iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是 强制增强数据访问安全，而且系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。</em></p>\n<p>关于Https的就不解释了，网上可以找到很多说明。</p>\n<h1 id=\"应用隐私控制\"><a href=\"#应用隐私控制\" class=\"headerlink\" title=\"应用隐私控制\"></a>应用隐私控制</h1><h2 id=\"现象-2\"><a href=\"#现象-2\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>刚好改了支付的网络层，测试下微信支付发现没法打开微信，然后看到在运行时输出栏就提示了以下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2015-09-29 12:03:56.426 XXX[1199:510529] -canOpenURL: failed for URL: &quot;wechat://&quot; - error: &quot;This app is not allowed to query for scheme wechat&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.933 XXX[1187:507850] -canOpenURL: failed for URL: &quot;weixin://app/wx8dd9768db7127fdb/&quot; - error: &quot;This app is not allowed to query for scheme weixin&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.937 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqqopensdkapiV2://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqqopensdkapiV2&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.938 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqqOpensdkSSoLogin://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqqOpensdkSSoLogin&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.939 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqq://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqq&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.940 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapiV2://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapiV2&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.941 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapi19://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapi19&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapi://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapi&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdk://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdk&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.943 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzone://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzone&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-2\"><a href=\"#解决过程-2\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>参照网上的，在”Info.plist”里面增加 LSApplicationQueriesSchemes 的键，类型是Array，然后把需要支持的 URL scheme 分别加在里面，类型String。主要是一些分享、收藏、支付、登录等等的应用。</p>\n<p>我直接把上面输出栏提示的都加进去，如wechat、weixin、mqq等等。</p>\n<h2 id=\"关于隐私控制\"><a href=\"#关于隐私控制\" class=\"headerlink\" title=\"关于隐私控制\"></a>关于隐私控制</h2><p><a href=\"http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes\" target=\"_blank\" rel=\"noopener\">Quick Take on iOS 9 URL Scheme Changes</a></p>\n<p>原来，在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。</p>\n<h1 id=\"还有\"><a href=\"#还有\" class=\"headerlink\" title=\"还有\"></a>还有</h1><h2 id=\"现象-3\"><a href=\"#现象-3\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>解决完可以编译通过，运行没问题，但是有两个warning：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">All interface orientations must be supported unless the app requires full screen.</span><br><span class=\"line\">A launch storyboard or xib must be provided unless the app requires full screen.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-3\"><a href=\"#解决过程-3\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p><a href=\"http://www.tuicool.com/articles/FFbqmyr\" target=\"_blank\" rel=\"noopener\">iOS项目更新之升级Xcode7 &amp; iOS9</a> 这篇文章是这么解释的：</p>\n<p><em>看到这句提示，就是说App默认是有开启了多任务功能，而多任务功能是需要App支持所有方向，如果我们App是有需要支持多任务，则需要开启App对各个方向（上、下、左、右）的支持;如果App不需要开启多任务，则只需要将如下示意图的 requires full screen 勾选上就ok（如图2.4）。</em></p>\n<p>requires full screen 勾选完运行，没有warning，并且对应用没什么影响。</p>\n<h2 id=\"关于分屏多任务\"><a href=\"#关于分屏多任务\" class=\"headerlink\" title=\"关于分屏多任务\"></a>关于分屏多任务</h2><p><a href=\"http://www.bubuko.com/infodetail-1022142.html\" target=\"_blank\" rel=\"noopener\">iOS 9之分屏多任务（multitasking）</a> 这篇文章讲了一些，可以看看。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>Bitcode选项</li>\n<li>Https处理</li>\n<li>应用隐私控制</li>\n<li>还有</li>\n</ul>\n<h1 id=\"Bitcode选项\"><a href=\"#Bitcode选项\" class=\"headerlink\" title=\"Bitcode选项\"></a>Bitcode选项</h1><h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>编译时出现以下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</span><br></pre></td></tr></table></figure>\n\n<p>就是提示某个库必须使用Bitcode重新构建，或者关闭Bitcode的选项。</p>\n<h2 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>最开始是提示友盟统计分析的库不支持，看了友盟网站说最新版支持了，而我是用CocoaPods安装的，所以更新下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod update UMengAnalytics-NO-IDFA</span><br></pre></td></tr></table></figure>\n\n<p>发现更新完还是v3.5.x的版本，试了几个方法还是没有作用，所以只有将它从podfile里面删除，然后下载最新的v3.6.5无IDFA版本，之后安装，没问题了。之后是提示了另一个库——美洽不支持Bitcode，在美洽的Q群中问了工程师，他们说下个版本才支持。</p>\n<p>看来要等所有用到的第三方库都支持Bitcode才行，转了一圈，最终还是要把Bitcode选项关闭。方法：<strong>进入项目的TARGETS下，在“Build Settings”下有一个“Enable Bitcode”选项，改为“NO”即可</strong></p>\n<h2 id=\"关于Bitcode\"><a href=\"#关于Bitcode\" class=\"headerlink\" title=\"关于Bitcode\"></a>关于Bitcode</h2><p>Bitcode是什么？看下官方文档<a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2\" target=\"_blank\" rel=\"noopener\">App Distribution Guide – App Thinning (iOS, watchOS)</a>，里面可以找到定义:</p>\n<p>(以下斜体字部分引用自<a href=\"http://www.cocoachina.com/ios/20150817/13078.html\" target=\"_blank\" rel=\"noopener\">理解Bitcode：一种中间代码</a>)：</p>\n<p><em>bitcode是被编译程序的一种中间形式的代码。包含bitcode配置的程序将会在App store上被编译和链接。bitcode允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到App store上。</em></p>\n<p><em>当我们提交程序到App store上时，Xcode会将程序编译为一个中间表现形式(bitcode)。然后App store会再将这个botcode编译为可执行的64位或32位程序。</em></p>\n<p><em>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关。</em></p>\n<p><em>如上面所说，bitcode是一种中间代码。LLVM官方文档有介绍这种文件的格式，有兴趣的可以移步LLVM Bitcode File Format。</em></p>\n<p>对于iOS，bitcode是可选的。对于watchOS，bitcode是必须的。Mac OS不支持bitcode。Xcode7默认会开启Bitcode。</p>\n<h1 id=\"Https处理\"><a href=\"#Https处理\" class=\"headerlink\" title=\"Https处理\"></a>Https处理</h1><h2 id=\"现象-1\"><a href=\"#现象-1\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>改完Bitcode，可以顺利编译通过了，运行，发现所有网络链接都没有返回数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The resource could not be loaded because the App Transport Security</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-1\"><a href=\"#解决过程-1\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>这个在iOS 9出来之前网上就一直在说，iOS9把所有的http请求都改为https了，说程序猿又要加班了什么的哈哈。</p>\n<p><em>如何适配？—弱弱地问下：加班要多久？</em></p>\n<p>两个解决方案：</p>\n<ol>\n<li>立即让公司的服务端升级使用TLS 1.2</li>\n<li>虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http</li>\n</ol>\n<p>因为后台还没支持，所以临时解决先继续支持http请求，方法：<strong>在 Info.plist 中添加 NSAppTransportSecurity ，类型是 Dictionary ，Dictionary 下添加 NSAllowsArbitraryLoads ，类型 Boolean ，值设为 YES。</strong></p>\n<p>在<a href=\"http://www.cocoachina.com/ios/20150703/12392.html\" target=\"_blank\" rel=\"noopener\">iOS 9 适配系列教程</a>一文中还讲了更严谨的做法，刚看到，明天试下。</p>\n<h2 id=\"关于Https\"><a href=\"#关于Https\" class=\"headerlink\" title=\"关于Https\"></a>关于Https</h2><p><em>iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是 强制增强数据访问安全，而且系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。</em></p>\n<p>关于Https的就不解释了，网上可以找到很多说明。</p>\n<h1 id=\"应用隐私控制\"><a href=\"#应用隐私控制\" class=\"headerlink\" title=\"应用隐私控制\"></a>应用隐私控制</h1><h2 id=\"现象-2\"><a href=\"#现象-2\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>刚好改了支付的网络层，测试下微信支付发现没法打开微信，然后看到在运行时输出栏就提示了以下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2015-09-29 12:03:56.426 XXX[1199:510529] -canOpenURL: failed for URL: &quot;wechat://&quot; - error: &quot;This app is not allowed to query for scheme wechat&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.933 XXX[1187:507850] -canOpenURL: failed for URL: &quot;weixin://app/wx8dd9768db7127fdb/&quot; - error: &quot;This app is not allowed to query for scheme weixin&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.937 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqqopensdkapiV2://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqqopensdkapiV2&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.938 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqqOpensdkSSoLogin://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqqOpensdkSSoLogin&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.939 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqq://qqapp&quot; - error: &quot;This app is not allowed to query for scheme mqq&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.940 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapiV2://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapiV2&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.941 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapi19://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapi19&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdkapi://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdkapi&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.942 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzoneopensdk://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzoneopensdk&quot;</span><br><span class=\"line\">2015-09-29 11:52:51.943 XXX[1187:507850] -canOpenURL: failed for URL: &quot;mqzone://qzapp&quot; - error: &quot;This app is not allowed to query for scheme mqzone&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-2\"><a href=\"#解决过程-2\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p>参照网上的，在”Info.plist”里面增加 LSApplicationQueriesSchemes 的键，类型是Array，然后把需要支持的 URL scheme 分别加在里面，类型String。主要是一些分享、收藏、支付、登录等等的应用。</p>\n<p>我直接把上面输出栏提示的都加进去，如wechat、weixin、mqq等等。</p>\n<h2 id=\"关于隐私控制\"><a href=\"#关于隐私控制\" class=\"headerlink\" title=\"关于隐私控制\"></a>关于隐私控制</h2><p><a href=\"http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes\" target=\"_blank\" rel=\"noopener\">Quick Take on iOS 9 URL Scheme Changes</a></p>\n<p>原来，在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。</p>\n<h1 id=\"还有\"><a href=\"#还有\" class=\"headerlink\" title=\"还有\"></a>还有</h1><h2 id=\"现象-3\"><a href=\"#现象-3\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>解决完可以编译通过，运行没问题，但是有两个warning：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">All interface orientations must be supported unless the app requires full screen.</span><br><span class=\"line\">A launch storyboard or xib must be provided unless the app requires full screen.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决过程-3\"><a href=\"#解决过程-3\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><p><a href=\"http://www.tuicool.com/articles/FFbqmyr\" target=\"_blank\" rel=\"noopener\">iOS项目更新之升级Xcode7 &amp; iOS9</a> 这篇文章是这么解释的：</p>\n<p><em>看到这句提示，就是说App默认是有开启了多任务功能，而多任务功能是需要App支持所有方向，如果我们App是有需要支持多任务，则需要开启App对各个方向（上、下、左、右）的支持;如果App不需要开启多任务，则只需要将如下示意图的 requires full screen 勾选上就ok（如图2.4）。</em></p>\n<p>requires full screen 勾选完运行，没有warning，并且对应用没什么影响。</p>\n<h2 id=\"关于分屏多任务\"><a href=\"#关于分屏多任务\" class=\"headerlink\" title=\"关于分屏多任务\"></a>关于分屏多任务</h2><p><a href=\"http://www.bubuko.com/infodetail-1022142.html\" target=\"_blank\" rel=\"noopener\">iOS 9之分屏多任务（multitasking）</a> 这篇文章讲了一些，可以看看。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"《The Devil's Advocate》观后感","date":"2015-12-05T08:00:00.000Z","keywords":"TheDevil'sAdvocate","description":"《The Devil's Advocate》观后感","_content":"\n# 目录\n\n- 剧情简述\n- 关于魔鬼和自由意志\n- 那些深邃辉煌的文化\n- 善恶的标准\n- 那些经典的台词\n- 结束\n\n# 剧情简述\n\n电影讲述了一个有着连续不败战绩的律师凯文，在打赢“中学老师盖提”的案子后，受不住豪宅和高薪的诱惑，带着妻子离开小县前往纽约米尔顿律师事务所。一个个案子接踵而来，凯文明知客户有罪却仍为其辩护，甚至隐瞒证据。而他的妻子面对着一切陌生和相反的生活环境，以及男主角的渐行渐远，感到并不幸福并且压力越来越大，最终精神崩溃并选择自杀。（其实是米尔顿害的）\n\n妻子自杀前凯文从一名司法部调查员处得知律师所一直所做的勾当以及自己父亲即是事务所老板米尔顿。找上门想射杀米尔顿，结果才发现米尔顿就是撒旦，还有个女儿克丽丝塔，是凯文同父异母的姐姐。米尔顿想让凯文和克丽丝塔为他繁衍家族后代，以此在千禧年的时候对付上帝。\n\n最后凯文选择开枪自杀。米尔顿的计划全盘泡汤，克丽丝塔也立刻变得枯萎颓废。米尔顿化为了一团火焰。凯文并没有死，他回到了过去，那时他正在为盖提做辩护。因为盖提有罪，所以经历了这一过程的凯文没有替他辩护，而是做了一件正确的事情。但虚荣永远是撒旦最喜欢的原罪，撒旦并没有消失，他还在观察着、诱惑着凯文。\n\n# 关于魔鬼和自由意志\n\n我们为一些行为和心理打上了恶的标签，就如圣经中的七宗罪“淫欲、贪食、贪婪、懒惰、暴怒、嫉妒、傲慢”，视这些为邪恶为魔鬼。但是真的得怪罪这些魔鬼吗？\n\n看完影片不禁觉得，并不是魔鬼找上了我们，或者说将我们变成魔鬼，而是我们主动向魔鬼出卖了灵魂。\n\n## 魔鬼只是一个选项\n\n把善恶看成事物、粒子的话，它们客观存在于世界上，没有能力将我们同化，只是向我们展示了它们的存在，展示了选择他们之后会发生什么，也许善会引导我们走向善，恶会诱惑我们走向恶，但我们不能怪罪恶的存在，只能怪罪我们向魔鬼屈服投降。因为最终作出选择的是我们，无数次选择最终决定了自己将要成为怎样的人，人生就是选择。\n\n就如影片中的撒旦，并没有直接将凯文变成魔鬼，而是给出各个选择。\n\n这里又涉及到一个问题了，一切贪婪、欲望等等是否都是与生俱来的？如果是，那么人类更是只能怪罪自己了，怪罪自己释放出了罪恶。\n\n## 选择即是自由意志\n\n选择就是自由意志的体现。自由意志是西方最提倡的东西，在这部电影里，米尔顿就多次提到这个词，“憎恨但又无可奈何”。记得在哪看过这样的说法，**上帝和撒旦在这个问题上是有协议的，撒旦尽可以诱惑上帝的子民据为己有，但必须要通过一个程序，就是让人类自己做出选择。**\n\n其实魔鬼不可怕，我们只是害怕自己面对魔鬼时没有足够的意志力，害怕自己会做出错误的选择，害怕做出错误的选择后没法弥补。\n\n在电影里凯文有几次选择：\n\n1. 在小镇上为一个中学教师的猥亵案做辩护——从庭下那个教师的动作以及休庭时的对峙可以得知他确实有罪\n2. 为一个非法屠杀动物的大客户进行辩护\n3. 为房产大亨枪杀的三条人命案做辩护\n4. 在妻子得病后，米尔顿提议他放弃房产大亨案子照顾妻子\n\n凯文都选择了辩护案子，选择不毁掉自己连续不败的战绩，选择虚荣与功名，结果失去了最爱的女人。最终面对米尔顿的质问他也无言以对，一切都是咎由自取。他回答道，你是对的，自由意志，是时候了，然后举枪自杀。米尔顿败了。败在自由意志、人性和善良。\n\n## 二次机会与无处不在的魔鬼\n\n很多电影里经常会这样安排，在经历了选择的一长串事情后，主角又可以回去拥有第二次机会（记得基督教是没有第二次得救机会的）。就如凯文自杀后又回到了当初中学教师盖提的案子上，并作出了正确的选择。\n\n但是人生哪有那么多的二次机会，因此我们才会有时在作出选择时迟疑不决。人生不像游戏，不顺利直接load旧进度，不像算法，可以遍历各种结果再作出选择。\n\n正当我为他高兴时，一个记者要求采访他“我会为你的良心之举做报导，你会因此出名。”在妻子的怂恿下他同意了。在他们离开后，记者的脸忽然幻化成米尔顿的脸“虚荣是我最爱的原罪。”\n\n所以说，魔鬼无处不在，存在于每个选择中。魔鬼无法将他变为最优秀的，但是可以观察试探诱惑，只要还活着，继续做选择，就有可能选择魔鬼的一边。\n\n# 那些深邃辉煌的文化\n\n电影出现了很多基督教的教义和句子，凯文的母亲随口便能说出几句，并且充满虔诚，凯文自己更是熟记倒背。“我差你们去，如同羊入狼群”“巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”\n\n想接触这种有宗教信仰并且贯彻于自己的生活中的人是怎样的。如果有一个老奶奶跟我讲述圣经里的故事，我愿意一直听一整天，虽然我不是信仰者。\n\n记得看某个连续剧看到一群少数民族载歌载舞庆祝某件事的时候我很感动，手舞足蹈应该是最原始、最与生俱来的一种高兴的表达方式了，但是我们汉族很少这样，他们一整个族群都会跳，就像他们的共同语言一般，这样才喜庆。\n\n一直很喜欢带有文化和历史感的东西或者说文化和历史本身。经常去了解那些宗教的历史，那些文化，那些不同的民族种族的起源，虽然记不大住，特别是一些名字，但一直觉得他们对我很有一份说不出的吸引。\n\n喜欢台湾的布袋戏《霹雳》系列，喜欢读《三国志》。如果能让我穿梭时空，我愿意去看看曹操的伟才，认识下几个谋士：郭嘉、贾栩、荀彧、荀攸，还有武将曹仁、曹洪、夏侯惇、夏侯渊、张辽、乐进、张颌、于禁、徐晃、典韦、许褚。世人只知道诸葛亮，却不认识真正的英才们。\n\n好吧，离题了。。。\n\n如果以后有机会，愿能去到世界各地，长住一大段时间，了解迷人的文化，迷人的风情，了解各种信仰。\n\n# 善恶的标准\n\n到底在各种各样的选择中，我们怎么知道什么是对，什么是错呢，有哪个标准可以参考呢？电影里选择了律师这个职业来让凯文做出抉择。律师一直是个受争议的职业，到底律师应该为人脱罪,还是澄清事实真相。\n\n为什么案子不同律师会产生不同的结果，那就是说明，善恶对错没有标准吗？还是说法律本身存在了漏洞导致。那法律又如何保证自己规定的是非黑白是对的呢，依据的最根本的标准是什么呢？\n\n就如战争如果牺牲一千人能救两千人，那么做这个决定是对是错呢。两千人的性命比一千人重要吗？重要或不重要能说明这个决定对错吗？\n\n记得看过一篇文章提到，有一种现在常用的治疗药物其实是牺牲了很多参与试验的人才研制出的，现在治愈了很多人。在当时他们的试验受到很多争议，法律也是不允许的。那么这样的试验是对的还是错的呢？\n\n恐怖分子为了民族解放，在他们的同仁和人民眼里他们也是英雄。那到底他们是对的还是错的？还是说得看结果，他们赢了承认就是对的，被剿灭那就是错的呢？也许这不是善恶的冲突，而是不同善之间的冲突。\n\n似乎是非对错没有一个最根本的标准，像这样令人争论不休、始终无法给出满意定论的话题在人类史上应该也不多吧。还有一个是生活的意义了。\n\n# 那些经典的台词\n\n“纽约很可怕，巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”\n\n“撒旦降灾祸，你们说这是罪恶，上帝降灾祸，你们却说，这是命运！”\n\n我从开天辟地以来\n\n就来到世上，深入人类生活\n\n我挑动了人性一切潜在的欲望\n\n我满足了人类需求却不批判他\n\n为什么？因为即使再顽劣的人，我也不会拒绝他\n\n我热爱人类\n\n我是个人道主义者\n\n搞不好是硕果仅存的了\n\n上帝，是吗？\n\n上帝？\n\n我告诉你一点上帝的小秘密\n\n上帝喜欢冷眼旁观，他是讨厌鬼\n\n想想看\n\n他给了人类欲望的本能\n\n他给了你这种天赋，然后呢？\n\n我敢说，他为了自己的乐趣\n\n为了娱乐自己\n\n他立下了矛盾的游戏规则\n\n真是史上最大的恶作剧：\n\n要你看得到，却不准碰\n\n碰到了，又不准吃\n\n吃到了，却不准吞下去\n\n当你犯规时，他做什么？\n\n他会乐不可支地嘲笑着你\n\n这家伙真是变态\n\n简直是个虐待狂\n\n他就像是不负责任的房东\n\n要我敬仰他？门都没有\n\n女人的肩膀\n\n是一切神秘的源头\n\n脖子活色生香\n\n宛若边城小镇般的旖旎梦幻\n\n引起无数群雄竞起\n\n进行永无止境的争斗\n\n那么爱呢？\n\n被高估的东西，在化学上跟吃大量的巧克力没有区别。\n\n“我告诉你，纽约很可怕的！”凯文的母亲不无忧虑地说。\n\n“我猜也是。”凯文漫不经心地应道。\n\n“‘巴比伦大城倾倒了，成了魔鬼的住处’，《启示录》第十八章。多读圣经对你有好处的！”\n\n“我都背得滚瓜烂熟了。”凯文露出一丝轻蔑的微笑。\n\n“是吗？你知道巴比伦城的下场吗？”\n\n“‘哀哉，巴比伦大城！一时之间你的刑罚就来到……灯光在你中间绝不再照耀’。祝我好运吧！”\n\n“法律最接近生活，孩子！它是通往特权的通行证。”\n\n“我会把你的罪恶感赶走，让你充分享受胜利，毫无心理负担！”\n\n“3000美元的夏装，买下来，穿一次，然后扔掉，这样你才能放松。把他的钱都花光，既然你很难保持你的丈夫，至少和他的钱保持联系。”\n\n“我没话说了！虚荣，是我最爱的原罪！凯文，这就是人性！自私自利是人性的麻醉剂。你并非不爱玛丽，凯文。只是你另有所爱更胜于她。那就是你自己。”\n\n# 结束\n\n居然写了三四个小时了，先到此吧。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-12-05-review-of-the-devil's-advocate.md","raw":"---\ntitle: 《The Devil's Advocate》观后感\ndate: 2015-12-05 16:00:00\ntags: \n     - life\ncategories: life\nkeywords: TheDevil'sAdvocate\ndescription: 《The Devil's Advocate》观后感\n---\n\n# 目录\n\n- 剧情简述\n- 关于魔鬼和自由意志\n- 那些深邃辉煌的文化\n- 善恶的标准\n- 那些经典的台词\n- 结束\n\n# 剧情简述\n\n电影讲述了一个有着连续不败战绩的律师凯文，在打赢“中学老师盖提”的案子后，受不住豪宅和高薪的诱惑，带着妻子离开小县前往纽约米尔顿律师事务所。一个个案子接踵而来，凯文明知客户有罪却仍为其辩护，甚至隐瞒证据。而他的妻子面对着一切陌生和相反的生活环境，以及男主角的渐行渐远，感到并不幸福并且压力越来越大，最终精神崩溃并选择自杀。（其实是米尔顿害的）\n\n妻子自杀前凯文从一名司法部调查员处得知律师所一直所做的勾当以及自己父亲即是事务所老板米尔顿。找上门想射杀米尔顿，结果才发现米尔顿就是撒旦，还有个女儿克丽丝塔，是凯文同父异母的姐姐。米尔顿想让凯文和克丽丝塔为他繁衍家族后代，以此在千禧年的时候对付上帝。\n\n最后凯文选择开枪自杀。米尔顿的计划全盘泡汤，克丽丝塔也立刻变得枯萎颓废。米尔顿化为了一团火焰。凯文并没有死，他回到了过去，那时他正在为盖提做辩护。因为盖提有罪，所以经历了这一过程的凯文没有替他辩护，而是做了一件正确的事情。但虚荣永远是撒旦最喜欢的原罪，撒旦并没有消失，他还在观察着、诱惑着凯文。\n\n# 关于魔鬼和自由意志\n\n我们为一些行为和心理打上了恶的标签，就如圣经中的七宗罪“淫欲、贪食、贪婪、懒惰、暴怒、嫉妒、傲慢”，视这些为邪恶为魔鬼。但是真的得怪罪这些魔鬼吗？\n\n看完影片不禁觉得，并不是魔鬼找上了我们，或者说将我们变成魔鬼，而是我们主动向魔鬼出卖了灵魂。\n\n## 魔鬼只是一个选项\n\n把善恶看成事物、粒子的话，它们客观存在于世界上，没有能力将我们同化，只是向我们展示了它们的存在，展示了选择他们之后会发生什么，也许善会引导我们走向善，恶会诱惑我们走向恶，但我们不能怪罪恶的存在，只能怪罪我们向魔鬼屈服投降。因为最终作出选择的是我们，无数次选择最终决定了自己将要成为怎样的人，人生就是选择。\n\n就如影片中的撒旦，并没有直接将凯文变成魔鬼，而是给出各个选择。\n\n这里又涉及到一个问题了，一切贪婪、欲望等等是否都是与生俱来的？如果是，那么人类更是只能怪罪自己了，怪罪自己释放出了罪恶。\n\n## 选择即是自由意志\n\n选择就是自由意志的体现。自由意志是西方最提倡的东西，在这部电影里，米尔顿就多次提到这个词，“憎恨但又无可奈何”。记得在哪看过这样的说法，**上帝和撒旦在这个问题上是有协议的，撒旦尽可以诱惑上帝的子民据为己有，但必须要通过一个程序，就是让人类自己做出选择。**\n\n其实魔鬼不可怕，我们只是害怕自己面对魔鬼时没有足够的意志力，害怕自己会做出错误的选择，害怕做出错误的选择后没法弥补。\n\n在电影里凯文有几次选择：\n\n1. 在小镇上为一个中学教师的猥亵案做辩护——从庭下那个教师的动作以及休庭时的对峙可以得知他确实有罪\n2. 为一个非法屠杀动物的大客户进行辩护\n3. 为房产大亨枪杀的三条人命案做辩护\n4. 在妻子得病后，米尔顿提议他放弃房产大亨案子照顾妻子\n\n凯文都选择了辩护案子，选择不毁掉自己连续不败的战绩，选择虚荣与功名，结果失去了最爱的女人。最终面对米尔顿的质问他也无言以对，一切都是咎由自取。他回答道，你是对的，自由意志，是时候了，然后举枪自杀。米尔顿败了。败在自由意志、人性和善良。\n\n## 二次机会与无处不在的魔鬼\n\n很多电影里经常会这样安排，在经历了选择的一长串事情后，主角又可以回去拥有第二次机会（记得基督教是没有第二次得救机会的）。就如凯文自杀后又回到了当初中学教师盖提的案子上，并作出了正确的选择。\n\n但是人生哪有那么多的二次机会，因此我们才会有时在作出选择时迟疑不决。人生不像游戏，不顺利直接load旧进度，不像算法，可以遍历各种结果再作出选择。\n\n正当我为他高兴时，一个记者要求采访他“我会为你的良心之举做报导，你会因此出名。”在妻子的怂恿下他同意了。在他们离开后，记者的脸忽然幻化成米尔顿的脸“虚荣是我最爱的原罪。”\n\n所以说，魔鬼无处不在，存在于每个选择中。魔鬼无法将他变为最优秀的，但是可以观察试探诱惑，只要还活着，继续做选择，就有可能选择魔鬼的一边。\n\n# 那些深邃辉煌的文化\n\n电影出现了很多基督教的教义和句子，凯文的母亲随口便能说出几句，并且充满虔诚，凯文自己更是熟记倒背。“我差你们去，如同羊入狼群”“巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”\n\n想接触这种有宗教信仰并且贯彻于自己的生活中的人是怎样的。如果有一个老奶奶跟我讲述圣经里的故事，我愿意一直听一整天，虽然我不是信仰者。\n\n记得看某个连续剧看到一群少数民族载歌载舞庆祝某件事的时候我很感动，手舞足蹈应该是最原始、最与生俱来的一种高兴的表达方式了，但是我们汉族很少这样，他们一整个族群都会跳，就像他们的共同语言一般，这样才喜庆。\n\n一直很喜欢带有文化和历史感的东西或者说文化和历史本身。经常去了解那些宗教的历史，那些文化，那些不同的民族种族的起源，虽然记不大住，特别是一些名字，但一直觉得他们对我很有一份说不出的吸引。\n\n喜欢台湾的布袋戏《霹雳》系列，喜欢读《三国志》。如果能让我穿梭时空，我愿意去看看曹操的伟才，认识下几个谋士：郭嘉、贾栩、荀彧、荀攸，还有武将曹仁、曹洪、夏侯惇、夏侯渊、张辽、乐进、张颌、于禁、徐晃、典韦、许褚。世人只知道诸葛亮，却不认识真正的英才们。\n\n好吧，离题了。。。\n\n如果以后有机会，愿能去到世界各地，长住一大段时间，了解迷人的文化，迷人的风情，了解各种信仰。\n\n# 善恶的标准\n\n到底在各种各样的选择中，我们怎么知道什么是对，什么是错呢，有哪个标准可以参考呢？电影里选择了律师这个职业来让凯文做出抉择。律师一直是个受争议的职业，到底律师应该为人脱罪,还是澄清事实真相。\n\n为什么案子不同律师会产生不同的结果，那就是说明，善恶对错没有标准吗？还是说法律本身存在了漏洞导致。那法律又如何保证自己规定的是非黑白是对的呢，依据的最根本的标准是什么呢？\n\n就如战争如果牺牲一千人能救两千人，那么做这个决定是对是错呢。两千人的性命比一千人重要吗？重要或不重要能说明这个决定对错吗？\n\n记得看过一篇文章提到，有一种现在常用的治疗药物其实是牺牲了很多参与试验的人才研制出的，现在治愈了很多人。在当时他们的试验受到很多争议，法律也是不允许的。那么这样的试验是对的还是错的呢？\n\n恐怖分子为了民族解放，在他们的同仁和人民眼里他们也是英雄。那到底他们是对的还是错的？还是说得看结果，他们赢了承认就是对的，被剿灭那就是错的呢？也许这不是善恶的冲突，而是不同善之间的冲突。\n\n似乎是非对错没有一个最根本的标准，像这样令人争论不休、始终无法给出满意定论的话题在人类史上应该也不多吧。还有一个是生活的意义了。\n\n# 那些经典的台词\n\n“纽约很可怕，巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”\n\n“撒旦降灾祸，你们说这是罪恶，上帝降灾祸，你们却说，这是命运！”\n\n我从开天辟地以来\n\n就来到世上，深入人类生活\n\n我挑动了人性一切潜在的欲望\n\n我满足了人类需求却不批判他\n\n为什么？因为即使再顽劣的人，我也不会拒绝他\n\n我热爱人类\n\n我是个人道主义者\n\n搞不好是硕果仅存的了\n\n上帝，是吗？\n\n上帝？\n\n我告诉你一点上帝的小秘密\n\n上帝喜欢冷眼旁观，他是讨厌鬼\n\n想想看\n\n他给了人类欲望的本能\n\n他给了你这种天赋，然后呢？\n\n我敢说，他为了自己的乐趣\n\n为了娱乐自己\n\n他立下了矛盾的游戏规则\n\n真是史上最大的恶作剧：\n\n要你看得到，却不准碰\n\n碰到了，又不准吃\n\n吃到了，却不准吞下去\n\n当你犯规时，他做什么？\n\n他会乐不可支地嘲笑着你\n\n这家伙真是变态\n\n简直是个虐待狂\n\n他就像是不负责任的房东\n\n要我敬仰他？门都没有\n\n女人的肩膀\n\n是一切神秘的源头\n\n脖子活色生香\n\n宛若边城小镇般的旖旎梦幻\n\n引起无数群雄竞起\n\n进行永无止境的争斗\n\n那么爱呢？\n\n被高估的东西，在化学上跟吃大量的巧克力没有区别。\n\n“我告诉你，纽约很可怕的！”凯文的母亲不无忧虑地说。\n\n“我猜也是。”凯文漫不经心地应道。\n\n“‘巴比伦大城倾倒了，成了魔鬼的住处’，《启示录》第十八章。多读圣经对你有好处的！”\n\n“我都背得滚瓜烂熟了。”凯文露出一丝轻蔑的微笑。\n\n“是吗？你知道巴比伦城的下场吗？”\n\n“‘哀哉，巴比伦大城！一时之间你的刑罚就来到……灯光在你中间绝不再照耀’。祝我好运吧！”\n\n“法律最接近生活，孩子！它是通往特权的通行证。”\n\n“我会把你的罪恶感赶走，让你充分享受胜利，毫无心理负担！”\n\n“3000美元的夏装，买下来，穿一次，然后扔掉，这样你才能放松。把他的钱都花光，既然你很难保持你的丈夫，至少和他的钱保持联系。”\n\n“我没话说了！虚荣，是我最爱的原罪！凯文，这就是人性！自私自利是人性的麻醉剂。你并非不爱玛丽，凯文。只是你另有所爱更胜于她。那就是你自己。”\n\n# 结束\n\n居然写了三四个小时了，先到此吧。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"review-of-the-devil's-advocate","published":1,"updated":"2020-02-25T15:23:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pu001i07eih138wsvp","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>剧情简述</li>\n<li>关于魔鬼和自由意志</li>\n<li>那些深邃辉煌的文化</li>\n<li>善恶的标准</li>\n<li>那些经典的台词</li>\n<li>结束</li>\n</ul>\n<h1 id=\"剧情简述\"><a href=\"#剧情简述\" class=\"headerlink\" title=\"剧情简述\"></a>剧情简述</h1><p>电影讲述了一个有着连续不败战绩的律师凯文，在打赢“中学老师盖提”的案子后，受不住豪宅和高薪的诱惑，带着妻子离开小县前往纽约米尔顿律师事务所。一个个案子接踵而来，凯文明知客户有罪却仍为其辩护，甚至隐瞒证据。而他的妻子面对着一切陌生和相反的生活环境，以及男主角的渐行渐远，感到并不幸福并且压力越来越大，最终精神崩溃并选择自杀。（其实是米尔顿害的）</p>\n<p>妻子自杀前凯文从一名司法部调查员处得知律师所一直所做的勾当以及自己父亲即是事务所老板米尔顿。找上门想射杀米尔顿，结果才发现米尔顿就是撒旦，还有个女儿克丽丝塔，是凯文同父异母的姐姐。米尔顿想让凯文和克丽丝塔为他繁衍家族后代，以此在千禧年的时候对付上帝。</p>\n<p>最后凯文选择开枪自杀。米尔顿的计划全盘泡汤，克丽丝塔也立刻变得枯萎颓废。米尔顿化为了一团火焰。凯文并没有死，他回到了过去，那时他正在为盖提做辩护。因为盖提有罪，所以经历了这一过程的凯文没有替他辩护，而是做了一件正确的事情。但虚荣永远是撒旦最喜欢的原罪，撒旦并没有消失，他还在观察着、诱惑着凯文。</p>\n<h1 id=\"关于魔鬼和自由意志\"><a href=\"#关于魔鬼和自由意志\" class=\"headerlink\" title=\"关于魔鬼和自由意志\"></a>关于魔鬼和自由意志</h1><p>我们为一些行为和心理打上了恶的标签，就如圣经中的七宗罪“淫欲、贪食、贪婪、懒惰、暴怒、嫉妒、傲慢”，视这些为邪恶为魔鬼。但是真的得怪罪这些魔鬼吗？</p>\n<p>看完影片不禁觉得，并不是魔鬼找上了我们，或者说将我们变成魔鬼，而是我们主动向魔鬼出卖了灵魂。</p>\n<h2 id=\"魔鬼只是一个选项\"><a href=\"#魔鬼只是一个选项\" class=\"headerlink\" title=\"魔鬼只是一个选项\"></a>魔鬼只是一个选项</h2><p>把善恶看成事物、粒子的话，它们客观存在于世界上，没有能力将我们同化，只是向我们展示了它们的存在，展示了选择他们之后会发生什么，也许善会引导我们走向善，恶会诱惑我们走向恶，但我们不能怪罪恶的存在，只能怪罪我们向魔鬼屈服投降。因为最终作出选择的是我们，无数次选择最终决定了自己将要成为怎样的人，人生就是选择。</p>\n<p>就如影片中的撒旦，并没有直接将凯文变成魔鬼，而是给出各个选择。</p>\n<p>这里又涉及到一个问题了，一切贪婪、欲望等等是否都是与生俱来的？如果是，那么人类更是只能怪罪自己了，怪罪自己释放出了罪恶。</p>\n<h2 id=\"选择即是自由意志\"><a href=\"#选择即是自由意志\" class=\"headerlink\" title=\"选择即是自由意志\"></a>选择即是自由意志</h2><p>选择就是自由意志的体现。自由意志是西方最提倡的东西，在这部电影里，米尔顿就多次提到这个词，“憎恨但又无可奈何”。记得在哪看过这样的说法，<strong>上帝和撒旦在这个问题上是有协议的，撒旦尽可以诱惑上帝的子民据为己有，但必须要通过一个程序，就是让人类自己做出选择。</strong></p>\n<p>其实魔鬼不可怕，我们只是害怕自己面对魔鬼时没有足够的意志力，害怕自己会做出错误的选择，害怕做出错误的选择后没法弥补。</p>\n<p>在电影里凯文有几次选择：</p>\n<ol>\n<li>在小镇上为一个中学教师的猥亵案做辩护——从庭下那个教师的动作以及休庭时的对峙可以得知他确实有罪</li>\n<li>为一个非法屠杀动物的大客户进行辩护</li>\n<li>为房产大亨枪杀的三条人命案做辩护</li>\n<li>在妻子得病后，米尔顿提议他放弃房产大亨案子照顾妻子</li>\n</ol>\n<p>凯文都选择了辩护案子，选择不毁掉自己连续不败的战绩，选择虚荣与功名，结果失去了最爱的女人。最终面对米尔顿的质问他也无言以对，一切都是咎由自取。他回答道，你是对的，自由意志，是时候了，然后举枪自杀。米尔顿败了。败在自由意志、人性和善良。</p>\n<h2 id=\"二次机会与无处不在的魔鬼\"><a href=\"#二次机会与无处不在的魔鬼\" class=\"headerlink\" title=\"二次机会与无处不在的魔鬼\"></a>二次机会与无处不在的魔鬼</h2><p>很多电影里经常会这样安排，在经历了选择的一长串事情后，主角又可以回去拥有第二次机会（记得基督教是没有第二次得救机会的）。就如凯文自杀后又回到了当初中学教师盖提的案子上，并作出了正确的选择。</p>\n<p>但是人生哪有那么多的二次机会，因此我们才会有时在作出选择时迟疑不决。人生不像游戏，不顺利直接load旧进度，不像算法，可以遍历各种结果再作出选择。</p>\n<p>正当我为他高兴时，一个记者要求采访他“我会为你的良心之举做报导，你会因此出名。”在妻子的怂恿下他同意了。在他们离开后，记者的脸忽然幻化成米尔顿的脸“虚荣是我最爱的原罪。”</p>\n<p>所以说，魔鬼无处不在，存在于每个选择中。魔鬼无法将他变为最优秀的，但是可以观察试探诱惑，只要还活着，继续做选择，就有可能选择魔鬼的一边。</p>\n<h1 id=\"那些深邃辉煌的文化\"><a href=\"#那些深邃辉煌的文化\" class=\"headerlink\" title=\"那些深邃辉煌的文化\"></a>那些深邃辉煌的文化</h1><p>电影出现了很多基督教的教义和句子，凯文的母亲随口便能说出几句，并且充满虔诚，凯文自己更是熟记倒背。“我差你们去，如同羊入狼群”“巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”</p>\n<p>想接触这种有宗教信仰并且贯彻于自己的生活中的人是怎样的。如果有一个老奶奶跟我讲述圣经里的故事，我愿意一直听一整天，虽然我不是信仰者。</p>\n<p>记得看某个连续剧看到一群少数民族载歌载舞庆祝某件事的时候我很感动，手舞足蹈应该是最原始、最与生俱来的一种高兴的表达方式了，但是我们汉族很少这样，他们一整个族群都会跳，就像他们的共同语言一般，这样才喜庆。</p>\n<p>一直很喜欢带有文化和历史感的东西或者说文化和历史本身。经常去了解那些宗教的历史，那些文化，那些不同的民族种族的起源，虽然记不大住，特别是一些名字，但一直觉得他们对我很有一份说不出的吸引。</p>\n<p>喜欢台湾的布袋戏《霹雳》系列，喜欢读《三国志》。如果能让我穿梭时空，我愿意去看看曹操的伟才，认识下几个谋士：郭嘉、贾栩、荀彧、荀攸，还有武将曹仁、曹洪、夏侯惇、夏侯渊、张辽、乐进、张颌、于禁、徐晃、典韦、许褚。世人只知道诸葛亮，却不认识真正的英才们。</p>\n<p>好吧，离题了。。。</p>\n<p>如果以后有机会，愿能去到世界各地，长住一大段时间，了解迷人的文化，迷人的风情，了解各种信仰。</p>\n<h1 id=\"善恶的标准\"><a href=\"#善恶的标准\" class=\"headerlink\" title=\"善恶的标准\"></a>善恶的标准</h1><p>到底在各种各样的选择中，我们怎么知道什么是对，什么是错呢，有哪个标准可以参考呢？电影里选择了律师这个职业来让凯文做出抉择。律师一直是个受争议的职业，到底律师应该为人脱罪,还是澄清事实真相。</p>\n<p>为什么案子不同律师会产生不同的结果，那就是说明，善恶对错没有标准吗？还是说法律本身存在了漏洞导致。那法律又如何保证自己规定的是非黑白是对的呢，依据的最根本的标准是什么呢？</p>\n<p>就如战争如果牺牲一千人能救两千人，那么做这个决定是对是错呢。两千人的性命比一千人重要吗？重要或不重要能说明这个决定对错吗？</p>\n<p>记得看过一篇文章提到，有一种现在常用的治疗药物其实是牺牲了很多参与试验的人才研制出的，现在治愈了很多人。在当时他们的试验受到很多争议，法律也是不允许的。那么这样的试验是对的还是错的呢？</p>\n<p>恐怖分子为了民族解放，在他们的同仁和人民眼里他们也是英雄。那到底他们是对的还是错的？还是说得看结果，他们赢了承认就是对的，被剿灭那就是错的呢？也许这不是善恶的冲突，而是不同善之间的冲突。</p>\n<p>似乎是非对错没有一个最根本的标准，像这样令人争论不休、始终无法给出满意定论的话题在人类史上应该也不多吧。还有一个是生活的意义了。</p>\n<h1 id=\"那些经典的台词\"><a href=\"#那些经典的台词\" class=\"headerlink\" title=\"那些经典的台词\"></a>那些经典的台词</h1><p>“纽约很可怕，巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”</p>\n<p>“撒旦降灾祸，你们说这是罪恶，上帝降灾祸，你们却说，这是命运！”</p>\n<p>我从开天辟地以来</p>\n<p>就来到世上，深入人类生活</p>\n<p>我挑动了人性一切潜在的欲望</p>\n<p>我满足了人类需求却不批判他</p>\n<p>为什么？因为即使再顽劣的人，我也不会拒绝他</p>\n<p>我热爱人类</p>\n<p>我是个人道主义者</p>\n<p>搞不好是硕果仅存的了</p>\n<p>上帝，是吗？</p>\n<p>上帝？</p>\n<p>我告诉你一点上帝的小秘密</p>\n<p>上帝喜欢冷眼旁观，他是讨厌鬼</p>\n<p>想想看</p>\n<p>他给了人类欲望的本能</p>\n<p>他给了你这种天赋，然后呢？</p>\n<p>我敢说，他为了自己的乐趣</p>\n<p>为了娱乐自己</p>\n<p>他立下了矛盾的游戏规则</p>\n<p>真是史上最大的恶作剧：</p>\n<p>要你看得到，却不准碰</p>\n<p>碰到了，又不准吃</p>\n<p>吃到了，却不准吞下去</p>\n<p>当你犯规时，他做什么？</p>\n<p>他会乐不可支地嘲笑着你</p>\n<p>这家伙真是变态</p>\n<p>简直是个虐待狂</p>\n<p>他就像是不负责任的房东</p>\n<p>要我敬仰他？门都没有</p>\n<p>女人的肩膀</p>\n<p>是一切神秘的源头</p>\n<p>脖子活色生香</p>\n<p>宛若边城小镇般的旖旎梦幻</p>\n<p>引起无数群雄竞起</p>\n<p>进行永无止境的争斗</p>\n<p>那么爱呢？</p>\n<p>被高估的东西，在化学上跟吃大量的巧克力没有区别。</p>\n<p>“我告诉你，纽约很可怕的！”凯文的母亲不无忧虑地说。</p>\n<p>“我猜也是。”凯文漫不经心地应道。</p>\n<p>“‘巴比伦大城倾倒了，成了魔鬼的住处’，《启示录》第十八章。多读圣经对你有好处的！”</p>\n<p>“我都背得滚瓜烂熟了。”凯文露出一丝轻蔑的微笑。</p>\n<p>“是吗？你知道巴比伦城的下场吗？”</p>\n<p>“‘哀哉，巴比伦大城！一时之间你的刑罚就来到……灯光在你中间绝不再照耀’。祝我好运吧！”</p>\n<p>“法律最接近生活，孩子！它是通往特权的通行证。”</p>\n<p>“我会把你的罪恶感赶走，让你充分享受胜利，毫无心理负担！”</p>\n<p>“3000美元的夏装，买下来，穿一次，然后扔掉，这样你才能放松。把他的钱都花光，既然你很难保持你的丈夫，至少和他的钱保持联系。”</p>\n<p>“我没话说了！虚荣，是我最爱的原罪！凯文，这就是人性！自私自利是人性的麻醉剂。你并非不爱玛丽，凯文。只是你另有所爱更胜于她。那就是你自己。”</p>\n<h1 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h1><p>居然写了三四个小时了，先到此吧。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>剧情简述</li>\n<li>关于魔鬼和自由意志</li>\n<li>那些深邃辉煌的文化</li>\n<li>善恶的标准</li>\n<li>那些经典的台词</li>\n<li>结束</li>\n</ul>\n<h1 id=\"剧情简述\"><a href=\"#剧情简述\" class=\"headerlink\" title=\"剧情简述\"></a>剧情简述</h1><p>电影讲述了一个有着连续不败战绩的律师凯文，在打赢“中学老师盖提”的案子后，受不住豪宅和高薪的诱惑，带着妻子离开小县前往纽约米尔顿律师事务所。一个个案子接踵而来，凯文明知客户有罪却仍为其辩护，甚至隐瞒证据。而他的妻子面对着一切陌生和相反的生活环境，以及男主角的渐行渐远，感到并不幸福并且压力越来越大，最终精神崩溃并选择自杀。（其实是米尔顿害的）</p>\n<p>妻子自杀前凯文从一名司法部调查员处得知律师所一直所做的勾当以及自己父亲即是事务所老板米尔顿。找上门想射杀米尔顿，结果才发现米尔顿就是撒旦，还有个女儿克丽丝塔，是凯文同父异母的姐姐。米尔顿想让凯文和克丽丝塔为他繁衍家族后代，以此在千禧年的时候对付上帝。</p>\n<p>最后凯文选择开枪自杀。米尔顿的计划全盘泡汤，克丽丝塔也立刻变得枯萎颓废。米尔顿化为了一团火焰。凯文并没有死，他回到了过去，那时他正在为盖提做辩护。因为盖提有罪，所以经历了这一过程的凯文没有替他辩护，而是做了一件正确的事情。但虚荣永远是撒旦最喜欢的原罪，撒旦并没有消失，他还在观察着、诱惑着凯文。</p>\n<h1 id=\"关于魔鬼和自由意志\"><a href=\"#关于魔鬼和自由意志\" class=\"headerlink\" title=\"关于魔鬼和自由意志\"></a>关于魔鬼和自由意志</h1><p>我们为一些行为和心理打上了恶的标签，就如圣经中的七宗罪“淫欲、贪食、贪婪、懒惰、暴怒、嫉妒、傲慢”，视这些为邪恶为魔鬼。但是真的得怪罪这些魔鬼吗？</p>\n<p>看完影片不禁觉得，并不是魔鬼找上了我们，或者说将我们变成魔鬼，而是我们主动向魔鬼出卖了灵魂。</p>\n<h2 id=\"魔鬼只是一个选项\"><a href=\"#魔鬼只是一个选项\" class=\"headerlink\" title=\"魔鬼只是一个选项\"></a>魔鬼只是一个选项</h2><p>把善恶看成事物、粒子的话，它们客观存在于世界上，没有能力将我们同化，只是向我们展示了它们的存在，展示了选择他们之后会发生什么，也许善会引导我们走向善，恶会诱惑我们走向恶，但我们不能怪罪恶的存在，只能怪罪我们向魔鬼屈服投降。因为最终作出选择的是我们，无数次选择最终决定了自己将要成为怎样的人，人生就是选择。</p>\n<p>就如影片中的撒旦，并没有直接将凯文变成魔鬼，而是给出各个选择。</p>\n<p>这里又涉及到一个问题了，一切贪婪、欲望等等是否都是与生俱来的？如果是，那么人类更是只能怪罪自己了，怪罪自己释放出了罪恶。</p>\n<h2 id=\"选择即是自由意志\"><a href=\"#选择即是自由意志\" class=\"headerlink\" title=\"选择即是自由意志\"></a>选择即是自由意志</h2><p>选择就是自由意志的体现。自由意志是西方最提倡的东西，在这部电影里，米尔顿就多次提到这个词，“憎恨但又无可奈何”。记得在哪看过这样的说法，<strong>上帝和撒旦在这个问题上是有协议的，撒旦尽可以诱惑上帝的子民据为己有，但必须要通过一个程序，就是让人类自己做出选择。</strong></p>\n<p>其实魔鬼不可怕，我们只是害怕自己面对魔鬼时没有足够的意志力，害怕自己会做出错误的选择，害怕做出错误的选择后没法弥补。</p>\n<p>在电影里凯文有几次选择：</p>\n<ol>\n<li>在小镇上为一个中学教师的猥亵案做辩护——从庭下那个教师的动作以及休庭时的对峙可以得知他确实有罪</li>\n<li>为一个非法屠杀动物的大客户进行辩护</li>\n<li>为房产大亨枪杀的三条人命案做辩护</li>\n<li>在妻子得病后，米尔顿提议他放弃房产大亨案子照顾妻子</li>\n</ol>\n<p>凯文都选择了辩护案子，选择不毁掉自己连续不败的战绩，选择虚荣与功名，结果失去了最爱的女人。最终面对米尔顿的质问他也无言以对，一切都是咎由自取。他回答道，你是对的，自由意志，是时候了，然后举枪自杀。米尔顿败了。败在自由意志、人性和善良。</p>\n<h2 id=\"二次机会与无处不在的魔鬼\"><a href=\"#二次机会与无处不在的魔鬼\" class=\"headerlink\" title=\"二次机会与无处不在的魔鬼\"></a>二次机会与无处不在的魔鬼</h2><p>很多电影里经常会这样安排，在经历了选择的一长串事情后，主角又可以回去拥有第二次机会（记得基督教是没有第二次得救机会的）。就如凯文自杀后又回到了当初中学教师盖提的案子上，并作出了正确的选择。</p>\n<p>但是人生哪有那么多的二次机会，因此我们才会有时在作出选择时迟疑不决。人生不像游戏，不顺利直接load旧进度，不像算法，可以遍历各种结果再作出选择。</p>\n<p>正当我为他高兴时，一个记者要求采访他“我会为你的良心之举做报导，你会因此出名。”在妻子的怂恿下他同意了。在他们离开后，记者的脸忽然幻化成米尔顿的脸“虚荣是我最爱的原罪。”</p>\n<p>所以说，魔鬼无处不在，存在于每个选择中。魔鬼无法将他变为最优秀的，但是可以观察试探诱惑，只要还活着，继续做选择，就有可能选择魔鬼的一边。</p>\n<h1 id=\"那些深邃辉煌的文化\"><a href=\"#那些深邃辉煌的文化\" class=\"headerlink\" title=\"那些深邃辉煌的文化\"></a>那些深邃辉煌的文化</h1><p>电影出现了很多基督教的教义和句子，凯文的母亲随口便能说出几句，并且充满虔诚，凯文自己更是熟记倒背。“我差你们去，如同羊入狼群”“巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”</p>\n<p>想接触这种有宗教信仰并且贯彻于自己的生活中的人是怎样的。如果有一个老奶奶跟我讲述圣经里的故事，我愿意一直听一整天，虽然我不是信仰者。</p>\n<p>记得看某个连续剧看到一群少数民族载歌载舞庆祝某件事的时候我很感动，手舞足蹈应该是最原始、最与生俱来的一种高兴的表达方式了，但是我们汉族很少这样，他们一整个族群都会跳，就像他们的共同语言一般，这样才喜庆。</p>\n<p>一直很喜欢带有文化和历史感的东西或者说文化和历史本身。经常去了解那些宗教的历史，那些文化，那些不同的民族种族的起源，虽然记不大住，特别是一些名字，但一直觉得他们对我很有一份说不出的吸引。</p>\n<p>喜欢台湾的布袋戏《霹雳》系列，喜欢读《三国志》。如果能让我穿梭时空，我愿意去看看曹操的伟才，认识下几个谋士：郭嘉、贾栩、荀彧、荀攸，还有武将曹仁、曹洪、夏侯惇、夏侯渊、张辽、乐进、张颌、于禁、徐晃、典韦、许褚。世人只知道诸葛亮，却不认识真正的英才们。</p>\n<p>好吧，离题了。。。</p>\n<p>如果以后有机会，愿能去到世界各地，长住一大段时间，了解迷人的文化，迷人的风情，了解各种信仰。</p>\n<h1 id=\"善恶的标准\"><a href=\"#善恶的标准\" class=\"headerlink\" title=\"善恶的标准\"></a>善恶的标准</h1><p>到底在各种各样的选择中，我们怎么知道什么是对，什么是错呢，有哪个标准可以参考呢？电影里选择了律师这个职业来让凯文做出抉择。律师一直是个受争议的职业，到底律师应该为人脱罪,还是澄清事实真相。</p>\n<p>为什么案子不同律师会产生不同的结果，那就是说明，善恶对错没有标准吗？还是说法律本身存在了漏洞导致。那法律又如何保证自己规定的是非黑白是对的呢，依据的最根本的标准是什么呢？</p>\n<p>就如战争如果牺牲一千人能救两千人，那么做这个决定是对是错呢。两千人的性命比一千人重要吗？重要或不重要能说明这个决定对错吗？</p>\n<p>记得看过一篇文章提到，有一种现在常用的治疗药物其实是牺牲了很多参与试验的人才研制出的，现在治愈了很多人。在当时他们的试验受到很多争议，法律也是不允许的。那么这样的试验是对的还是错的呢？</p>\n<p>恐怖分子为了民族解放，在他们的同仁和人民眼里他们也是英雄。那到底他们是对的还是错的？还是说得看结果，他们赢了承认就是对的，被剿灭那就是错的呢？也许这不是善恶的冲突，而是不同善之间的冲突。</p>\n<p>似乎是非对错没有一个最根本的标准，像这样令人争论不休、始终无法给出满意定论的话题在人类史上应该也不多吧。还有一个是生活的意义了。</p>\n<h1 id=\"那些经典的台词\"><a href=\"#那些经典的台词\" class=\"headerlink\" title=\"那些经典的台词\"></a>那些经典的台词</h1><p>“纽约很可怕，巴比伦大城倾倒了，成了魔鬼的住处，呜呼哀哉，一时间，你的刑罚就来到，灯光在你中间绝不再照耀。”</p>\n<p>“撒旦降灾祸，你们说这是罪恶，上帝降灾祸，你们却说，这是命运！”</p>\n<p>我从开天辟地以来</p>\n<p>就来到世上，深入人类生活</p>\n<p>我挑动了人性一切潜在的欲望</p>\n<p>我满足了人类需求却不批判他</p>\n<p>为什么？因为即使再顽劣的人，我也不会拒绝他</p>\n<p>我热爱人类</p>\n<p>我是个人道主义者</p>\n<p>搞不好是硕果仅存的了</p>\n<p>上帝，是吗？</p>\n<p>上帝？</p>\n<p>我告诉你一点上帝的小秘密</p>\n<p>上帝喜欢冷眼旁观，他是讨厌鬼</p>\n<p>想想看</p>\n<p>他给了人类欲望的本能</p>\n<p>他给了你这种天赋，然后呢？</p>\n<p>我敢说，他为了自己的乐趣</p>\n<p>为了娱乐自己</p>\n<p>他立下了矛盾的游戏规则</p>\n<p>真是史上最大的恶作剧：</p>\n<p>要你看得到，却不准碰</p>\n<p>碰到了，又不准吃</p>\n<p>吃到了，却不准吞下去</p>\n<p>当你犯规时，他做什么？</p>\n<p>他会乐不可支地嘲笑着你</p>\n<p>这家伙真是变态</p>\n<p>简直是个虐待狂</p>\n<p>他就像是不负责任的房东</p>\n<p>要我敬仰他？门都没有</p>\n<p>女人的肩膀</p>\n<p>是一切神秘的源头</p>\n<p>脖子活色生香</p>\n<p>宛若边城小镇般的旖旎梦幻</p>\n<p>引起无数群雄竞起</p>\n<p>进行永无止境的争斗</p>\n<p>那么爱呢？</p>\n<p>被高估的东西，在化学上跟吃大量的巧克力没有区别。</p>\n<p>“我告诉你，纽约很可怕的！”凯文的母亲不无忧虑地说。</p>\n<p>“我猜也是。”凯文漫不经心地应道。</p>\n<p>“‘巴比伦大城倾倒了，成了魔鬼的住处’，《启示录》第十八章。多读圣经对你有好处的！”</p>\n<p>“我都背得滚瓜烂熟了。”凯文露出一丝轻蔑的微笑。</p>\n<p>“是吗？你知道巴比伦城的下场吗？”</p>\n<p>“‘哀哉，巴比伦大城！一时之间你的刑罚就来到……灯光在你中间绝不再照耀’。祝我好运吧！”</p>\n<p>“法律最接近生活，孩子！它是通往特权的通行证。”</p>\n<p>“我会把你的罪恶感赶走，让你充分享受胜利，毫无心理负担！”</p>\n<p>“3000美元的夏装，买下来，穿一次，然后扔掉，这样你才能放松。把他的钱都花光，既然你很难保持你的丈夫，至少和他的钱保持联系。”</p>\n<p>“我没话说了！虚荣，是我最爱的原罪！凯文，这就是人性！自私自利是人性的麻醉剂。你并非不爱玛丽，凯文。只是你另有所爱更胜于她。那就是你自己。”</p>\n<h1 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h1><p>居然写了三四个小时了，先到此吧。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率","date":"2016-01-17T08:00:00.000Z","keywords":"iOS","description":"记录iOS所有设备的分辨率、尺寸，和一些细小的注意点等","_content":"\n偶尔需要查下设备的分辨率和缩放因子，经常用的时候才网上搜下确认下，比较麻烦。现在整理下方便自己和别人以后使用。\n\n*   1 inch = 2.54cm = 25.4mm\n*   @2x即1个Point被渲染成1个2x2的像素矩阵，即某个方向上1pt存在2px\n*   PPI（Pixel Per Inch by diagonal）：沿着对角线每英寸所拥有的像素数目。如iPhone 6的PPI=![gif.latex.gif](304530-f1e621f5f6cd6666.gif)\n\n# iPhone 设备\n\n*   放大模式下，iPhone 6分辨率为640x1136(Upsampling，插值采样)，iPhone 6 Plus/6S Plus分辨率为1125×2001(Downsampling，缩减像素采样)。\n*   iPhone 6 Plus/6S Plus的实际分辨率是1920x1080，实际缩放为@2.46x。（也就是说实际上应该用@2.46x的素材。iOS 拿到@3x绘制结果，实时地再缩小到实际的1080 x 1920分辨率，Downsampling）详见[知乎上的讨论](http://www.zhihu.com/question/25288571)。\n\n| 设备                  | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| --------------------- | ---------- | -------------- | -------------- | ------------ |\n| iPhone                | 3.5        | 320x480        | 320x480        | @1x          |\n| iPhone 3G/3GS         | 3.5        | 320x480        | 320x480        | @1x          |\n| iPhone 4/4S           | 3.5        | 320x480        | 640x960        | @2x          |\n| iPhone 5/5S/5C        | 4          | 320x568        | 640x1136       | @2x          |\n| iPhone 6/6S           | 4.7        | 375x667        | 750x1334       | @2x          |\n| iPhone 6 Plus/6S Plus | 5.5        | 414x736        | 1242x2208      | @3x          |\n| iPhone SE             | 4          | 320x568        | 640x1136       | @2x          |\n| iPhone 7/8            | 4.7        | 375x667        | 750x1334       | @2x          |\n| iPhone 7 Plus/8 Plus  | 5.5        | 414x736        | 1242x2208      | @3x          |\n| iPhone X              | 5.8        | 375x812        | 1125x2436      | @3x          |\n| iPhone Xs | 5.8 | 375x812 | 1125x2436 | @3x |\n| iPhone Xs Max | 6.5 | 414x896 | 1242x2688 | @3x |\n| iPhone Xr | 6.1 | 414x896 | 828x1792 | @2x |\n| iPhone 11 | 6.1 | 414x896 | 828x1792 | @2x |\n| iPhone 11 Pro | 5.8 | 375x812 | 1125x2436 | @3x |\n| iPhone 11 Pro Max | 6.5 | 414x896 | 1242x2688 | @3x |\n\n.\n\n# iPad 设备\n\n| 设备                                 | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ------------------------------------ | ---------- | -------------- | -------------- | ------------ |\n| iPad                                 | 9.7        | 1024x768       | 1024x768       | @1x          |\n| iPad 2                               | 9.7        | 1024x768       | 1024x768       | @1x          |\n| The New iPad                         | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad 4                               | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Air                             | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Air 2                           | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Pro (12.9-inch)                 | 12.9       | 1366x1024      | 2732x2048      | @2x          |\n| iPad Pro (9.7-inch)                  | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad (5th generation)                | 12.9       | 1024x768       | 2048x1536      | @2x          |\n| iPad Pro (12.9-inch, 2nd generation) | 12.9       | 1366x1024      | 2732x2048      | @2x          |\n| iPad Pro (10.5-inch)                 | 10.5       | 1112x834       | 2224x1668      | @2x          |\n\n.\n\n# iPad mini设备\n\n| 设备        | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ----------- | ---------- | -------------- | -------------- | ------------ |\n| iPad Mini   | 7.9        | 1024x768       | 1024x768       | @1x          |\n| iPad Mini 2 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n| iPad Mini 3 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n| iPad Mini 4 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n\n.\n\n# iPod Touch 设备\n\n| 设备         | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ------------ | ---------- | -------------- | -------------- | ------------ |\n| iPod Touch 1 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 2 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 3 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 4 | 3.5        | 320x480        | 640x960        | @2x          |\n| iPod Touch 5 | 4          | 320x568        | 640x1136       | @2x          |\n| iPod Touch 6 | 4          | 320x568        | 640x1136       | @2x          |\n\n.\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-01-17-ios-devices-info.md","raw":"---\ntitle: iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率\ndate: 2016-01-17 16:00:00\ntags: \n     - iOS\ncategories: iOS\nkeywords: iOS\ndescription: 记录iOS所有设备的分辨率、尺寸，和一些细小的注意点等\n---\n\n偶尔需要查下设备的分辨率和缩放因子，经常用的时候才网上搜下确认下，比较麻烦。现在整理下方便自己和别人以后使用。\n\n*   1 inch = 2.54cm = 25.4mm\n*   @2x即1个Point被渲染成1个2x2的像素矩阵，即某个方向上1pt存在2px\n*   PPI（Pixel Per Inch by diagonal）：沿着对角线每英寸所拥有的像素数目。如iPhone 6的PPI=![gif.latex.gif](304530-f1e621f5f6cd6666.gif)\n\n# iPhone 设备\n\n*   放大模式下，iPhone 6分辨率为640x1136(Upsampling，插值采样)，iPhone 6 Plus/6S Plus分辨率为1125×2001(Downsampling，缩减像素采样)。\n*   iPhone 6 Plus/6S Plus的实际分辨率是1920x1080，实际缩放为@2.46x。（也就是说实际上应该用@2.46x的素材。iOS 拿到@3x绘制结果，实时地再缩小到实际的1080 x 1920分辨率，Downsampling）详见[知乎上的讨论](http://www.zhihu.com/question/25288571)。\n\n| 设备                  | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| --------------------- | ---------- | -------------- | -------------- | ------------ |\n| iPhone                | 3.5        | 320x480        | 320x480        | @1x          |\n| iPhone 3G/3GS         | 3.5        | 320x480        | 320x480        | @1x          |\n| iPhone 4/4S           | 3.5        | 320x480        | 640x960        | @2x          |\n| iPhone 5/5S/5C        | 4          | 320x568        | 640x1136       | @2x          |\n| iPhone 6/6S           | 4.7        | 375x667        | 750x1334       | @2x          |\n| iPhone 6 Plus/6S Plus | 5.5        | 414x736        | 1242x2208      | @3x          |\n| iPhone SE             | 4          | 320x568        | 640x1136       | @2x          |\n| iPhone 7/8            | 4.7        | 375x667        | 750x1334       | @2x          |\n| iPhone 7 Plus/8 Plus  | 5.5        | 414x736        | 1242x2208      | @3x          |\n| iPhone X              | 5.8        | 375x812        | 1125x2436      | @3x          |\n| iPhone Xs | 5.8 | 375x812 | 1125x2436 | @3x |\n| iPhone Xs Max | 6.5 | 414x896 | 1242x2688 | @3x |\n| iPhone Xr | 6.1 | 414x896 | 828x1792 | @2x |\n| iPhone 11 | 6.1 | 414x896 | 828x1792 | @2x |\n| iPhone 11 Pro | 5.8 | 375x812 | 1125x2436 | @3x |\n| iPhone 11 Pro Max | 6.5 | 414x896 | 1242x2688 | @3x |\n\n.\n\n# iPad 设备\n\n| 设备                                 | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ------------------------------------ | ---------- | -------------- | -------------- | ------------ |\n| iPad                                 | 9.7        | 1024x768       | 1024x768       | @1x          |\n| iPad 2                               | 9.7        | 1024x768       | 1024x768       | @1x          |\n| The New iPad                         | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad 4                               | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Air                             | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Air 2                           | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad Pro (12.9-inch)                 | 12.9       | 1366x1024      | 2732x2048      | @2x          |\n| iPad Pro (9.7-inch)                  | 9.7        | 1024x768       | 2048x1536      | @2x          |\n| iPad (5th generation)                | 12.9       | 1024x768       | 2048x1536      | @2x          |\n| iPad Pro (12.9-inch, 2nd generation) | 12.9       | 1366x1024      | 2732x2048      | @2x          |\n| iPad Pro (10.5-inch)                 | 10.5       | 1112x834       | 2224x1668      | @2x          |\n\n.\n\n# iPad mini设备\n\n| 设备        | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ----------- | ---------- | -------------- | -------------- | ------------ |\n| iPad Mini   | 7.9        | 1024x768       | 1024x768       | @1x          |\n| iPad Mini 2 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n| iPad Mini 3 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n| iPad Mini 4 | 7.9        | 1024x768       | 2048x1536      | @2x          |\n\n.\n\n# iPod Touch 设备\n\n| 设备         | 尺寸(inch) | 逻辑分辨率(pt) | 屏幕分辨率(px) | Scale Factor |\n| ------------ | ---------- | -------------- | -------------- | ------------ |\n| iPod Touch 1 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 2 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 3 | 3.5        | 320x480        | 320x480        | @1x          |\n| iPod Touch 4 | 3.5        | 320x480        | 640x960        | @2x          |\n| iPod Touch 5 | 4          | 320x568        | 640x1136       | @2x          |\n| iPod Touch 6 | 4          | 320x568        | 640x1136       | @2x          |\n\n.\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"ios-devices-info","published":1,"updated":"2020-02-25T15:23:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pv001n07eimfuc6tl8","content":"<p>偶尔需要查下设备的分辨率和缩放因子，经常用的时候才网上搜下确认下，比较麻烦。现在整理下方便自己和别人以后使用。</p>\n<ul>\n<li>1 inch = 2.54cm = 25.4mm</li>\n<li>@2x即1个Point被渲染成1个2x2的像素矩阵，即某个方向上1pt存在2px</li>\n<li>PPI（Pixel Per Inch by diagonal）：沿着对角线每英寸所拥有的像素数目。如iPhone 6的PPI=<img src=\"/2016/01/17/ios-devices-info/304530-f1e621f5f6cd6666.gif\" alt=\"gif.latex.gif\"></li>\n</ul>\n<h1 id=\"iPhone-设备\"><a href=\"#iPhone-设备\" class=\"headerlink\" title=\"iPhone 设备\"></a>iPhone 设备</h1><ul>\n<li>放大模式下，iPhone 6分辨率为640x1136(Upsampling，插值采样)，iPhone 6 Plus/6S Plus分辨率为1125×2001(Downsampling，缩减像素采样)。</li>\n<li>iPhone 6 Plus/6S Plus的实际分辨率是1920x1080，实际缩放为@2.46x。（也就是说实际上应该用@2.46x的素材。iOS 拿到@3x绘制结果，实时地再缩小到实际的1080 x 1920分辨率，Downsampling）详见<a href=\"http://www.zhihu.com/question/25288571\" target=\"_blank\" rel=\"noopener\">知乎上的讨论</a>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPhone</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPhone 3G/3GS</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPhone 4/4S</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>640x960</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 5/5S/5C</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 6/6S</td>\n<td>4.7</td>\n<td>375x667</td>\n<td>750x1334</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 6 Plus/6S Plus</td>\n<td>5.5</td>\n<td>414x736</td>\n<td>1242x2208</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone SE</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 7/8</td>\n<td>4.7</td>\n<td>375x667</td>\n<td>750x1334</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 7 Plus/8 Plus</td>\n<td>5.5</td>\n<td>414x736</td>\n<td>1242x2208</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone X</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xs</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xs Max</td>\n<td>6.5</td>\n<td>414x896</td>\n<td>1242x2688</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xr</td>\n<td>6.1</td>\n<td>414x896</td>\n<td>828x1792</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 11</td>\n<td>6.1</td>\n<td>414x896</td>\n<td>828x1792</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 11 Pro</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone 11 Pro Max</td>\n<td>6.5</td>\n<td>414x896</td>\n<td>1242x2688</td>\n<td>@3x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPad-设备\"><a href=\"#iPad-设备\" class=\"headerlink\" title=\"iPad 设备\"></a>iPad 设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPad</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPad 2</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>The New iPad</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad 4</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Air</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Air 2</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (12.9-inch)</td>\n<td>12.9</td>\n<td>1366x1024</td>\n<td>2732x2048</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (9.7-inch)</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad (5th generation)</td>\n<td>12.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (12.9-inch, 2nd generation)</td>\n<td>12.9</td>\n<td>1366x1024</td>\n<td>2732x2048</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (10.5-inch)</td>\n<td>10.5</td>\n<td>1112x834</td>\n<td>2224x1668</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPad-mini设备\"><a href=\"#iPad-mini设备\" class=\"headerlink\" title=\"iPad mini设备\"></a>iPad mini设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPad Mini</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPad Mini 2</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Mini 3</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Mini 4</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPod-Touch-设备\"><a href=\"#iPod-Touch-设备\" class=\"headerlink\" title=\"iPod Touch 设备\"></a>iPod Touch 设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPod Touch 1</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 2</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 3</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 4</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>640x960</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPod Touch 5</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPod Touch 6</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>偶尔需要查下设备的分辨率和缩放因子，经常用的时候才网上搜下确认下，比较麻烦。现在整理下方便自己和别人以后使用。</p>\n<ul>\n<li>1 inch = 2.54cm = 25.4mm</li>\n<li>@2x即1个Point被渲染成1个2x2的像素矩阵，即某个方向上1pt存在2px</li>\n<li>PPI（Pixel Per Inch by diagonal）：沿着对角线每英寸所拥有的像素数目。如iPhone 6的PPI=<img src=\"/2016/01/17/ios-devices-info/304530-f1e621f5f6cd6666.gif\" alt=\"gif.latex.gif\"></li>\n</ul>\n<h1 id=\"iPhone-设备\"><a href=\"#iPhone-设备\" class=\"headerlink\" title=\"iPhone 设备\"></a>iPhone 设备</h1><ul>\n<li>放大模式下，iPhone 6分辨率为640x1136(Upsampling，插值采样)，iPhone 6 Plus/6S Plus分辨率为1125×2001(Downsampling，缩减像素采样)。</li>\n<li>iPhone 6 Plus/6S Plus的实际分辨率是1920x1080，实际缩放为@2.46x。（也就是说实际上应该用@2.46x的素材。iOS 拿到@3x绘制结果，实时地再缩小到实际的1080 x 1920分辨率，Downsampling）详见<a href=\"http://www.zhihu.com/question/25288571\" target=\"_blank\" rel=\"noopener\">知乎上的讨论</a>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPhone</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPhone 3G/3GS</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPhone 4/4S</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>640x960</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 5/5S/5C</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 6/6S</td>\n<td>4.7</td>\n<td>375x667</td>\n<td>750x1334</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 6 Plus/6S Plus</td>\n<td>5.5</td>\n<td>414x736</td>\n<td>1242x2208</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone SE</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 7/8</td>\n<td>4.7</td>\n<td>375x667</td>\n<td>750x1334</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 7 Plus/8 Plus</td>\n<td>5.5</td>\n<td>414x736</td>\n<td>1242x2208</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone X</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xs</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xs Max</td>\n<td>6.5</td>\n<td>414x896</td>\n<td>1242x2688</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone Xr</td>\n<td>6.1</td>\n<td>414x896</td>\n<td>828x1792</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 11</td>\n<td>6.1</td>\n<td>414x896</td>\n<td>828x1792</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPhone 11 Pro</td>\n<td>5.8</td>\n<td>375x812</td>\n<td>1125x2436</td>\n<td>@3x</td>\n</tr>\n<tr>\n<td>iPhone 11 Pro Max</td>\n<td>6.5</td>\n<td>414x896</td>\n<td>1242x2688</td>\n<td>@3x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPad-设备\"><a href=\"#iPad-设备\" class=\"headerlink\" title=\"iPad 设备\"></a>iPad 设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPad</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPad 2</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>The New iPad</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad 4</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Air</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Air 2</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (12.9-inch)</td>\n<td>12.9</td>\n<td>1366x1024</td>\n<td>2732x2048</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (9.7-inch)</td>\n<td>9.7</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad (5th generation)</td>\n<td>12.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (12.9-inch, 2nd generation)</td>\n<td>12.9</td>\n<td>1366x1024</td>\n<td>2732x2048</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Pro (10.5-inch)</td>\n<td>10.5</td>\n<td>1112x834</td>\n<td>2224x1668</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPad-mini设备\"><a href=\"#iPad-mini设备\" class=\"headerlink\" title=\"iPad mini设备\"></a>iPad mini设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPad Mini</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>1024x768</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPad Mini 2</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Mini 3</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPad Mini 4</td>\n<td>7.9</td>\n<td>1024x768</td>\n<td>2048x1536</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<h1 id=\"iPod-Touch-设备\"><a href=\"#iPod-Touch-设备\" class=\"headerlink\" title=\"iPod Touch 设备\"></a>iPod Touch 设备</h1><table>\n<thead>\n<tr>\n<th>设备</th>\n<th>尺寸(inch)</th>\n<th>逻辑分辨率(pt)</th>\n<th>屏幕分辨率(px)</th>\n<th>Scale Factor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPod Touch 1</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 2</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 3</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>320x480</td>\n<td>@1x</td>\n</tr>\n<tr>\n<td>iPod Touch 4</td>\n<td>3.5</td>\n<td>320x480</td>\n<td>640x960</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPod Touch 5</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n<tr>\n<td>iPod Touch 6</td>\n<td>4</td>\n<td>320x568</td>\n<td>640x1136</td>\n<td>@2x</td>\n</tr>\n</tbody></table>\n<p>.</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"iOS下实现Universal Links及相关问题小总结","date":"2016-01-26T08:00:00.000Z","keywords":"iOS UniversalLinks","description":"iOS下实现Universal Links及相关问题小总结","_content":"\n# 目录\n\n- 前言\n- Universal Links有什么用\n- Universal Links特点\n- Universal Links缺点\n- 支持Universal Links\n    - 服务器端\n    - App端\n- 流程\n\n# 前言\n\n最近研究了Universal Links，总结一下。\n\n网上资料很少，基本都是苹果官方文档翻译过来的，所以直接看[官方文档](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html)就行了。\n\n# Universal Links有什么用\n\n> When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.\n\n支持之后，只要点击一个指向你网站的链接，就会直接跳到你的App的页面，无需通过Safari。如果设备上没有安装你的应用，则会在Safari中打开你的网址。\n\n> Universal links let iOS 9 users open your app when they tap links to your website within `WKWebView` and `UIWebView views` and `Safari pages`, in addition to links that result in a call to openURL:, such as those that occur in Mail, Messages, and other apps.\n\n这里指明除了其他调用`openURL`的App外，**只有WKWebView、UIWebView、Safari内点击的才支持跳转**。像邮件、信息也是可以的，这个测试过。\n\n> For users who are running versions of iOS earlier than 9.0, tapping a universal link to your website opens the link in Safari.\n\n这功能**只支持iOS 9.0以上系统**，更早的系统版本会直接在Safari打开链接。\n\n# Universal Links特点\n\n- **Unique.** Unlike custom URL schemes, universal links can’t be claimed by other apps, because they use standard HTTP or HTTPS links to your website.\n- **Secure.** When users install your app, iOS checks a file that you’ve uploaded to your web server to make sure that your website allows your app to open URLs on its behalf. Only you can create and upload this file, so the association of your website with your app is secure.\n- **Flexible.** Universal links work even when your app is not installed. When your app isn’t installed, tapping a link to your website opens the content in Safari, as users expect.\n- **Simple.** One URL works for both your website and your app.\n- **Private.** Other apps can communicate with your app without needing to know whether your app is installed.\n\n**总结下来是**：\n\n1. 一个链接即可同时适用App和网站，在没安装时能继续打开网址不影响体验和用户预期。其他应用想使用时只需打开链接无需知道其他信息。\n2. 相比URL Schemes，因为链接和路由是自己服务器指定，所以App和网站之间的联系相对安全。而URL Schemes的schemes是可获取可冒充的（*我抓包得知小红书的schemes为xhsdiscover，简单支持下就能使得原来跳转到小红书的链接跳转到我的App了*）。另外链接也具有唯一性，而URL Schemes不同应用申明时可相同。\n\n# Universal Links缺点\n\n- **在微信内置浏览器内无法跳转**。微信屏蔽了任何跳转到第三方应用的方式，包括URL Schemes（已测试）。但是使用发现小红书、58同城几个App可以，网上有提到微信WeixinJSBridge API（在小红书跳转抓包时发现的确用了`launch3rdApp`这个API，同事问了工作人员，说得去联系商务部，大概是合作后才能调用这个API）；另外内容分享到微信时可以选择分享类型为应用类型，这也可以打开应用，但是不能路由到App的指定页面。\n\n- 只适用iOS 9以上系统版本。网上有个叫HOKO的好像可以支持iOS 5以上。\n\n- **无法退回之前的页面**。我们总希望把用户留在App里面的，但是也许有些情况，之前的页面信息对用户很重要，这时只能切换到浏览器返回，无法在App里继续之前的页面。除非做多些额外工作。\n\n  \n\n# 支持Universal Links\n\n需要服务器和客户端做些支持。\n\n## 服务器端\n\n- 配置apple-app-site-association文件\n\n格式如下：\n\n```\n{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"9JA89QQLNQ.com.apple.wwdc\",\n                \"paths\": [ \"/wwdc/news/\", \"/videos/wwdc/2015/*\", \"NOT /videos/wwdc/2010/*\", \"/videos/wwdc/201?/*\"]\n            },\n            {\n                \"appID\": \"TeamID.BundleID2\",\n                \"paths\": [ \"*\" ]\n            }\n        ]\n    }\n}\n```\n\n文件指明支持Universal Links的App和App所支持的路径。`appID`格式是`TeamID.BundleID`的；`paths`是个数组，用*表示支持所有路径，用`NOT`表示不支持的路径，还可以?适配。\n\n**不支持的路径将会直接打开而不会调用App。**\n\n- 将文件放到网站的根目录下。\n\n> After you create the `apple-app-site-association` file, upload it to the root of your HTTPS web server. The file needs to be accessible via HTTPS—without any redirects—at `https:///apple-app-site-association`. \n\n需要注意的是，该网站必须**支持https访问**，并且证书有效。可以用这个链接[App Search API Validation Tool](https://search.developer.apple.com/appsearch-validation-tool/)测试。只要Universal Links那行状态为`PASSED`即可。\n\n## App端\n\n- 在 Xcode 的 `capabilities` -> `applinks`里添加支持的几个域名\n\n都加上前置`applinks:`如`applinks:www.domain.com`。并且下面有红色感叹号时点击Fix。系统会自动写入.entitlements文件并添加到工程中。\n\n- 处理接收到的Activity\n\n在`UIApplicationDelegate`的`- application:continueUserActivity:restorationHandler:`里面处理，判断接收到的`NSUserActivity`的`activityType`值是否为`NSUserActivityTypeBrowsingWeb`，是的话则处理它的`webpageURL`，可以使用`NSURLComponents`处理。另外如果处理不了Apple建议最好openURL这个链接。\n\n```\nfunc application(application: UIApplication, continueUserActivity userActivity: NSUserActivity, restorationHandler: ([AnyObject]?) -> Void) -> Bool {\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb {\n        let webpageURL = userActivity.webpageURL! // Always exists\n        if !isURLUnSupported(URL: webpageURL) {\n            UIApplication.sharedApplication().openURL(webpageURL)\n        }\n    }\n    return true\n}\n```\n\n另外还有下面的说明。\n\n> NOTE\n>\n> If you instantiate a [SFSafariViewController](https://developer.apple.com/library/prerelease/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/index.html#//apple_ref/doc/uid/TP40016220-CH1), [WKWebView](https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebView_Ref/index.html#//apple_ref/doc/uid/TP40014624-CH1), or [UIWebView](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWebView_Class/index.html#//apple_ref/doc/uid/TP40006950-CH3) object to handle a universal link, iOS opens your website in Safari instead of opening your app. However, if the user taps a universal link from within an embedded `SFSafariViewController`, `WKWebView`, or `UIWebView` object, iOS opens your app.\n\n- 测试\n\n可以直接调试测试，只要TeamID和BundleID一致。如在短信里或Safari里面点击支持的链接。\n\n# 流程\n\n1. 应用安装到设备后自动（有网友测试过）去拉取支持的每个域名下的`apple-app-site-association`文件。\n2. 点击链接后，系统会检测该链接的域名和路径是否符合App的配置，符合则会打开App，调用接口`application:continueUserActivity:restorationHandler`方法；不符合或未安装该App则继续打开链接。\n3. 判断`application:continueUserActivity:restorationHandler`接口获取到传入的`NSUserActivity`的`activityType`值是否为`NSUserActivityTypeBrowsingWeb`，是则处理`webpageURL`；\n4. 如果`webpageURL`不符合App内支持的规则，建议openURL这个链接。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-01-26-universal-links.md","raw":"---\ntitle: iOS下实现Universal Links及相关问题小总结\ndate: 2016-01-26 16:00:00\ntags: \n     - iOS\n     - Universal Links\ncategories: iOS\nkeywords: iOS UniversalLinks\ndescription: iOS下实现Universal Links及相关问题小总结\n---\n\n# 目录\n\n- 前言\n- Universal Links有什么用\n- Universal Links特点\n- Universal Links缺点\n- 支持Universal Links\n    - 服务器端\n    - App端\n- 流程\n\n# 前言\n\n最近研究了Universal Links，总结一下。\n\n网上资料很少，基本都是苹果官方文档翻译过来的，所以直接看[官方文档](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html)就行了。\n\n# Universal Links有什么用\n\n> When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.\n\n支持之后，只要点击一个指向你网站的链接，就会直接跳到你的App的页面，无需通过Safari。如果设备上没有安装你的应用，则会在Safari中打开你的网址。\n\n> Universal links let iOS 9 users open your app when they tap links to your website within `WKWebView` and `UIWebView views` and `Safari pages`, in addition to links that result in a call to openURL:, such as those that occur in Mail, Messages, and other apps.\n\n这里指明除了其他调用`openURL`的App外，**只有WKWebView、UIWebView、Safari内点击的才支持跳转**。像邮件、信息也是可以的，这个测试过。\n\n> For users who are running versions of iOS earlier than 9.0, tapping a universal link to your website opens the link in Safari.\n\n这功能**只支持iOS 9.0以上系统**，更早的系统版本会直接在Safari打开链接。\n\n# Universal Links特点\n\n- **Unique.** Unlike custom URL schemes, universal links can’t be claimed by other apps, because they use standard HTTP or HTTPS links to your website.\n- **Secure.** When users install your app, iOS checks a file that you’ve uploaded to your web server to make sure that your website allows your app to open URLs on its behalf. Only you can create and upload this file, so the association of your website with your app is secure.\n- **Flexible.** Universal links work even when your app is not installed. When your app isn’t installed, tapping a link to your website opens the content in Safari, as users expect.\n- **Simple.** One URL works for both your website and your app.\n- **Private.** Other apps can communicate with your app without needing to know whether your app is installed.\n\n**总结下来是**：\n\n1. 一个链接即可同时适用App和网站，在没安装时能继续打开网址不影响体验和用户预期。其他应用想使用时只需打开链接无需知道其他信息。\n2. 相比URL Schemes，因为链接和路由是自己服务器指定，所以App和网站之间的联系相对安全。而URL Schemes的schemes是可获取可冒充的（*我抓包得知小红书的schemes为xhsdiscover，简单支持下就能使得原来跳转到小红书的链接跳转到我的App了*）。另外链接也具有唯一性，而URL Schemes不同应用申明时可相同。\n\n# Universal Links缺点\n\n- **在微信内置浏览器内无法跳转**。微信屏蔽了任何跳转到第三方应用的方式，包括URL Schemes（已测试）。但是使用发现小红书、58同城几个App可以，网上有提到微信WeixinJSBridge API（在小红书跳转抓包时发现的确用了`launch3rdApp`这个API，同事问了工作人员，说得去联系商务部，大概是合作后才能调用这个API）；另外内容分享到微信时可以选择分享类型为应用类型，这也可以打开应用，但是不能路由到App的指定页面。\n\n- 只适用iOS 9以上系统版本。网上有个叫HOKO的好像可以支持iOS 5以上。\n\n- **无法退回之前的页面**。我们总希望把用户留在App里面的，但是也许有些情况，之前的页面信息对用户很重要，这时只能切换到浏览器返回，无法在App里继续之前的页面。除非做多些额外工作。\n\n  \n\n# 支持Universal Links\n\n需要服务器和客户端做些支持。\n\n## 服务器端\n\n- 配置apple-app-site-association文件\n\n格式如下：\n\n```\n{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"9JA89QQLNQ.com.apple.wwdc\",\n                \"paths\": [ \"/wwdc/news/\", \"/videos/wwdc/2015/*\", \"NOT /videos/wwdc/2010/*\", \"/videos/wwdc/201?/*\"]\n            },\n            {\n                \"appID\": \"TeamID.BundleID2\",\n                \"paths\": [ \"*\" ]\n            }\n        ]\n    }\n}\n```\n\n文件指明支持Universal Links的App和App所支持的路径。`appID`格式是`TeamID.BundleID`的；`paths`是个数组，用*表示支持所有路径，用`NOT`表示不支持的路径，还可以?适配。\n\n**不支持的路径将会直接打开而不会调用App。**\n\n- 将文件放到网站的根目录下。\n\n> After you create the `apple-app-site-association` file, upload it to the root of your HTTPS web server. The file needs to be accessible via HTTPS—without any redirects—at `https:///apple-app-site-association`. \n\n需要注意的是，该网站必须**支持https访问**，并且证书有效。可以用这个链接[App Search API Validation Tool](https://search.developer.apple.com/appsearch-validation-tool/)测试。只要Universal Links那行状态为`PASSED`即可。\n\n## App端\n\n- 在 Xcode 的 `capabilities` -> `applinks`里添加支持的几个域名\n\n都加上前置`applinks:`如`applinks:www.domain.com`。并且下面有红色感叹号时点击Fix。系统会自动写入.entitlements文件并添加到工程中。\n\n- 处理接收到的Activity\n\n在`UIApplicationDelegate`的`- application:continueUserActivity:restorationHandler:`里面处理，判断接收到的`NSUserActivity`的`activityType`值是否为`NSUserActivityTypeBrowsingWeb`，是的话则处理它的`webpageURL`，可以使用`NSURLComponents`处理。另外如果处理不了Apple建议最好openURL这个链接。\n\n```\nfunc application(application: UIApplication, continueUserActivity userActivity: NSUserActivity, restorationHandler: ([AnyObject]?) -> Void) -> Bool {\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb {\n        let webpageURL = userActivity.webpageURL! // Always exists\n        if !isURLUnSupported(URL: webpageURL) {\n            UIApplication.sharedApplication().openURL(webpageURL)\n        }\n    }\n    return true\n}\n```\n\n另外还有下面的说明。\n\n> NOTE\n>\n> If you instantiate a [SFSafariViewController](https://developer.apple.com/library/prerelease/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/index.html#//apple_ref/doc/uid/TP40016220-CH1), [WKWebView](https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebView_Ref/index.html#//apple_ref/doc/uid/TP40014624-CH1), or [UIWebView](https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWebView_Class/index.html#//apple_ref/doc/uid/TP40006950-CH3) object to handle a universal link, iOS opens your website in Safari instead of opening your app. However, if the user taps a universal link from within an embedded `SFSafariViewController`, `WKWebView`, or `UIWebView` object, iOS opens your app.\n\n- 测试\n\n可以直接调试测试，只要TeamID和BundleID一致。如在短信里或Safari里面点击支持的链接。\n\n# 流程\n\n1. 应用安装到设备后自动（有网友测试过）去拉取支持的每个域名下的`apple-app-site-association`文件。\n2. 点击链接后，系统会检测该链接的域名和路径是否符合App的配置，符合则会打开App，调用接口`application:continueUserActivity:restorationHandler`方法；不符合或未安装该App则继续打开链接。\n3. 判断`application:continueUserActivity:restorationHandler`接口获取到传入的`NSUserActivity`的`activityType`值是否为`NSUserActivityTypeBrowsingWeb`，是则处理`webpageURL`；\n4. 如果`webpageURL`不符合App内支持的规则，建议openURL这个链接。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"universal-links","published":1,"updated":"2020-02-25T15:23:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7pw001q07eii1kdn128","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Universal Links有什么用</li>\n<li>Universal Links特点</li>\n<li>Universal Links缺点</li>\n<li>支持Universal Links<ul>\n<li>服务器端</li>\n<li>App端</li>\n</ul>\n</li>\n<li>流程</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近研究了Universal Links，总结一下。</p>\n<p>网上资料很少，基本都是苹果官方文档翻译过来的，所以直接看<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>就行了。</p>\n<h1 id=\"Universal-Links有什么用\"><a href=\"#Universal-Links有什么用\" class=\"headerlink\" title=\"Universal Links有什么用\"></a>Universal Links有什么用</h1><blockquote>\n<p>When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.</p>\n</blockquote>\n<p>支持之后，只要点击一个指向你网站的链接，就会直接跳到你的App的页面，无需通过Safari。如果设备上没有安装你的应用，则会在Safari中打开你的网址。</p>\n<blockquote>\n<p>Universal links let iOS 9 users open your app when they tap links to your website within <code>WKWebView</code> and <code>UIWebView views</code> and <code>Safari pages</code>, in addition to links that result in a call to openURL:, such as those that occur in Mail, Messages, and other apps.</p>\n</blockquote>\n<p>这里指明除了其他调用<code>openURL</code>的App外，<strong>只有WKWebView、UIWebView、Safari内点击的才支持跳转</strong>。像邮件、信息也是可以的，这个测试过。</p>\n<blockquote>\n<p>For users who are running versions of iOS earlier than 9.0, tapping a universal link to your website opens the link in Safari.</p>\n</blockquote>\n<p>这功能<strong>只支持iOS 9.0以上系统</strong>，更早的系统版本会直接在Safari打开链接。</p>\n<h1 id=\"Universal-Links特点\"><a href=\"#Universal-Links特点\" class=\"headerlink\" title=\"Universal Links特点\"></a>Universal Links特点</h1><ul>\n<li><strong>Unique.</strong> Unlike custom URL schemes, universal links can’t be claimed by other apps, because they use standard HTTP or HTTPS links to your website.</li>\n<li><strong>Secure.</strong> When users install your app, iOS checks a file that you’ve uploaded to your web server to make sure that your website allows your app to open URLs on its behalf. Only you can create and upload this file, so the association of your website with your app is secure.</li>\n<li><strong>Flexible.</strong> Universal links work even when your app is not installed. When your app isn’t installed, tapping a link to your website opens the content in Safari, as users expect.</li>\n<li><strong>Simple.</strong> One URL works for both your website and your app.</li>\n<li><strong>Private.</strong> Other apps can communicate with your app without needing to know whether your app is installed.</li>\n</ul>\n<p><strong>总结下来是</strong>：</p>\n<ol>\n<li>一个链接即可同时适用App和网站，在没安装时能继续打开网址不影响体验和用户预期。其他应用想使用时只需打开链接无需知道其他信息。</li>\n<li>相比URL Schemes，因为链接和路由是自己服务器指定，所以App和网站之间的联系相对安全。而URL Schemes的schemes是可获取可冒充的（<em>我抓包得知小红书的schemes为xhsdiscover，简单支持下就能使得原来跳转到小红书的链接跳转到我的App了</em>）。另外链接也具有唯一性，而URL Schemes不同应用申明时可相同。</li>\n</ol>\n<h1 id=\"Universal-Links缺点\"><a href=\"#Universal-Links缺点\" class=\"headerlink\" title=\"Universal Links缺点\"></a>Universal Links缺点</h1><ul>\n<li><p><strong>在微信内置浏览器内无法跳转</strong>。微信屏蔽了任何跳转到第三方应用的方式，包括URL Schemes（已测试）。但是使用发现小红书、58同城几个App可以，网上有提到微信WeixinJSBridge API（在小红书跳转抓包时发现的确用了<code>launch3rdApp</code>这个API，同事问了工作人员，说得去联系商务部，大概是合作后才能调用这个API）；另外内容分享到微信时可以选择分享类型为应用类型，这也可以打开应用，但是不能路由到App的指定页面。</p>\n</li>\n<li><p>只适用iOS 9以上系统版本。网上有个叫HOKO的好像可以支持iOS 5以上。</p>\n</li>\n<li><p><strong>无法退回之前的页面</strong>。我们总希望把用户留在App里面的，但是也许有些情况，之前的页面信息对用户很重要，这时只能切换到浏览器返回，无法在App里继续之前的页面。除非做多些额外工作。</p>\n</li>\n</ul>\n<h1 id=\"支持Universal-Links\"><a href=\"#支持Universal-Links\" class=\"headerlink\" title=\"支持Universal Links\"></a>支持Universal Links</h1><p>需要服务器和客户端做些支持。</p>\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><ul>\n<li>配置apple-app-site-association文件</li>\n</ul>\n<p>格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;applinks&quot;: &#123;</span><br><span class=\"line\">        &quot;apps&quot;: [],</span><br><span class=\"line\">        &quot;details&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;appID&quot;: &quot;9JA89QQLNQ.com.apple.wwdc&quot;,</span><br><span class=\"line\">                &quot;paths&quot;: [ &quot;/wwdc/news/&quot;, &quot;/videos/wwdc/2015/*&quot;, &quot;NOT /videos/wwdc/2010/*&quot;, &quot;/videos/wwdc/201?/*&quot;]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;appID&quot;: &quot;TeamID.BundleID2&quot;,</span><br><span class=\"line\">                &quot;paths&quot;: [ &quot;*&quot; ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件指明支持Universal Links的App和App所支持的路径。<code>appID</code>格式是<code>TeamID.BundleID</code>的；<code>paths</code>是个数组，用*表示支持所有路径，用<code>NOT</code>表示不支持的路径，还可以?适配。</p>\n<p><strong>不支持的路径将会直接打开而不会调用App。</strong></p>\n<ul>\n<li>将文件放到网站的根目录下。</li>\n</ul>\n<blockquote>\n<p>After you create the <code>apple-app-site-association</code> file, upload it to the root of your HTTPS web server. The file needs to be accessible via HTTPS—without any redirects—at <code>https:///apple-app-site-association</code>. </p>\n</blockquote>\n<p>需要注意的是，该网站必须<strong>支持https访问</strong>，并且证书有效。可以用这个链接<a href=\"https://search.developer.apple.com/appsearch-validation-tool/\" target=\"_blank\" rel=\"noopener\">App Search API Validation Tool</a>测试。只要Universal Links那行状态为<code>PASSED</code>即可。</p>\n<h2 id=\"App端\"><a href=\"#App端\" class=\"headerlink\" title=\"App端\"></a>App端</h2><ul>\n<li>在 Xcode 的 <code>capabilities</code> -&gt; <code>applinks</code>里添加支持的几个域名</li>\n</ul>\n<p>都加上前置<code>applinks:</code>如<code>applinks:www.domain.com</code>。并且下面有红色感叹号时点击Fix。系统会自动写入.entitlements文件并添加到工程中。</p>\n<ul>\n<li>处理接收到的Activity</li>\n</ul>\n<p>在<code>UIApplicationDelegate</code>的<code>- application:continueUserActivity:restorationHandler:</code>里面处理，判断接收到的<code>NSUserActivity</code>的<code>activityType</code>值是否为<code>NSUserActivityTypeBrowsingWeb</code>，是的话则处理它的<code>webpageURL</code>，可以使用<code>NSURLComponents</code>处理。另外如果处理不了Apple建议最好openURL这个链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(application: UIApplication, continueUserActivity userActivity: NSUserActivity, restorationHandler: ([AnyObject]?) -&gt; Void) -&gt; Bool &#123;</span><br><span class=\"line\">    if userActivity.activityType == NSUserActivityTypeBrowsingWeb &#123;</span><br><span class=\"line\">        let webpageURL = userActivity.webpageURL! // Always exists</span><br><span class=\"line\">        if !isURLUnSupported(URL: webpageURL) &#123;</span><br><span class=\"line\">            UIApplication.sharedApplication().openURL(webpageURL)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还有下面的说明。</p>\n<blockquote>\n<p>NOTE</p>\n<p>If you instantiate a <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/index.html#//apple_ref/doc/uid/TP40016220-CH1\" target=\"_blank\" rel=\"noopener\">SFSafariViewController</a>, <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebView_Ref/index.html#//apple_ref/doc/uid/TP40014624-CH1\" target=\"_blank\" rel=\"noopener\">WKWebView</a>, or <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWebView_Class/index.html#//apple_ref/doc/uid/TP40006950-CH3\" target=\"_blank\" rel=\"noopener\">UIWebView</a> object to handle a universal link, iOS opens your website in Safari instead of opening your app. However, if the user taps a universal link from within an embedded <code>SFSafariViewController</code>, <code>WKWebView</code>, or <code>UIWebView</code> object, iOS opens your app.</p>\n</blockquote>\n<ul>\n<li>测试</li>\n</ul>\n<p>可以直接调试测试，只要TeamID和BundleID一致。如在短信里或Safari里面点击支持的链接。</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ol>\n<li>应用安装到设备后自动（有网友测试过）去拉取支持的每个域名下的<code>apple-app-site-association</code>文件。</li>\n<li>点击链接后，系统会检测该链接的域名和路径是否符合App的配置，符合则会打开App，调用接口<code>application:continueUserActivity:restorationHandler</code>方法；不符合或未安装该App则继续打开链接。</li>\n<li>判断<code>application:continueUserActivity:restorationHandler</code>接口获取到传入的<code>NSUserActivity</code>的<code>activityType</code>值是否为<code>NSUserActivityTypeBrowsingWeb</code>，是则处理<code>webpageURL</code>；</li>\n<li>如果<code>webpageURL</code>不符合App内支持的规则，建议openURL这个链接。</li>\n</ol>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Universal Links有什么用</li>\n<li>Universal Links特点</li>\n<li>Universal Links缺点</li>\n<li>支持Universal Links<ul>\n<li>服务器端</li>\n<li>App端</li>\n</ul>\n</li>\n<li>流程</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近研究了Universal Links，总结一下。</p>\n<p>网上资料很少，基本都是苹果官方文档翻译过来的，所以直接看<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>就行了。</p>\n<h1 id=\"Universal-Links有什么用\"><a href=\"#Universal-Links有什么用\" class=\"headerlink\" title=\"Universal Links有什么用\"></a>Universal Links有什么用</h1><blockquote>\n<p>When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.</p>\n</blockquote>\n<p>支持之后，只要点击一个指向你网站的链接，就会直接跳到你的App的页面，无需通过Safari。如果设备上没有安装你的应用，则会在Safari中打开你的网址。</p>\n<blockquote>\n<p>Universal links let iOS 9 users open your app when they tap links to your website within <code>WKWebView</code> and <code>UIWebView views</code> and <code>Safari pages</code>, in addition to links that result in a call to openURL:, such as those that occur in Mail, Messages, and other apps.</p>\n</blockquote>\n<p>这里指明除了其他调用<code>openURL</code>的App外，<strong>只有WKWebView、UIWebView、Safari内点击的才支持跳转</strong>。像邮件、信息也是可以的，这个测试过。</p>\n<blockquote>\n<p>For users who are running versions of iOS earlier than 9.0, tapping a universal link to your website opens the link in Safari.</p>\n</blockquote>\n<p>这功能<strong>只支持iOS 9.0以上系统</strong>，更早的系统版本会直接在Safari打开链接。</p>\n<h1 id=\"Universal-Links特点\"><a href=\"#Universal-Links特点\" class=\"headerlink\" title=\"Universal Links特点\"></a>Universal Links特点</h1><ul>\n<li><strong>Unique.</strong> Unlike custom URL schemes, universal links can’t be claimed by other apps, because they use standard HTTP or HTTPS links to your website.</li>\n<li><strong>Secure.</strong> When users install your app, iOS checks a file that you’ve uploaded to your web server to make sure that your website allows your app to open URLs on its behalf. Only you can create and upload this file, so the association of your website with your app is secure.</li>\n<li><strong>Flexible.</strong> Universal links work even when your app is not installed. When your app isn’t installed, tapping a link to your website opens the content in Safari, as users expect.</li>\n<li><strong>Simple.</strong> One URL works for both your website and your app.</li>\n<li><strong>Private.</strong> Other apps can communicate with your app without needing to know whether your app is installed.</li>\n</ul>\n<p><strong>总结下来是</strong>：</p>\n<ol>\n<li>一个链接即可同时适用App和网站，在没安装时能继续打开网址不影响体验和用户预期。其他应用想使用时只需打开链接无需知道其他信息。</li>\n<li>相比URL Schemes，因为链接和路由是自己服务器指定，所以App和网站之间的联系相对安全。而URL Schemes的schemes是可获取可冒充的（<em>我抓包得知小红书的schemes为xhsdiscover，简单支持下就能使得原来跳转到小红书的链接跳转到我的App了</em>）。另外链接也具有唯一性，而URL Schemes不同应用申明时可相同。</li>\n</ol>\n<h1 id=\"Universal-Links缺点\"><a href=\"#Universal-Links缺点\" class=\"headerlink\" title=\"Universal Links缺点\"></a>Universal Links缺点</h1><ul>\n<li><p><strong>在微信内置浏览器内无法跳转</strong>。微信屏蔽了任何跳转到第三方应用的方式，包括URL Schemes（已测试）。但是使用发现小红书、58同城几个App可以，网上有提到微信WeixinJSBridge API（在小红书跳转抓包时发现的确用了<code>launch3rdApp</code>这个API，同事问了工作人员，说得去联系商务部，大概是合作后才能调用这个API）；另外内容分享到微信时可以选择分享类型为应用类型，这也可以打开应用，但是不能路由到App的指定页面。</p>\n</li>\n<li><p>只适用iOS 9以上系统版本。网上有个叫HOKO的好像可以支持iOS 5以上。</p>\n</li>\n<li><p><strong>无法退回之前的页面</strong>。我们总希望把用户留在App里面的，但是也许有些情况，之前的页面信息对用户很重要，这时只能切换到浏览器返回，无法在App里继续之前的页面。除非做多些额外工作。</p>\n</li>\n</ul>\n<h1 id=\"支持Universal-Links\"><a href=\"#支持Universal-Links\" class=\"headerlink\" title=\"支持Universal Links\"></a>支持Universal Links</h1><p>需要服务器和客户端做些支持。</p>\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><ul>\n<li>配置apple-app-site-association文件</li>\n</ul>\n<p>格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;applinks&quot;: &#123;</span><br><span class=\"line\">        &quot;apps&quot;: [],</span><br><span class=\"line\">        &quot;details&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;appID&quot;: &quot;9JA89QQLNQ.com.apple.wwdc&quot;,</span><br><span class=\"line\">                &quot;paths&quot;: [ &quot;/wwdc/news/&quot;, &quot;/videos/wwdc/2015/*&quot;, &quot;NOT /videos/wwdc/2010/*&quot;, &quot;/videos/wwdc/201?/*&quot;]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;appID&quot;: &quot;TeamID.BundleID2&quot;,</span><br><span class=\"line\">                &quot;paths&quot;: [ &quot;*&quot; ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件指明支持Universal Links的App和App所支持的路径。<code>appID</code>格式是<code>TeamID.BundleID</code>的；<code>paths</code>是个数组，用*表示支持所有路径，用<code>NOT</code>表示不支持的路径，还可以?适配。</p>\n<p><strong>不支持的路径将会直接打开而不会调用App。</strong></p>\n<ul>\n<li>将文件放到网站的根目录下。</li>\n</ul>\n<blockquote>\n<p>After you create the <code>apple-app-site-association</code> file, upload it to the root of your HTTPS web server. The file needs to be accessible via HTTPS—without any redirects—at <code>https:///apple-app-site-association</code>. </p>\n</blockquote>\n<p>需要注意的是，该网站必须<strong>支持https访问</strong>，并且证书有效。可以用这个链接<a href=\"https://search.developer.apple.com/appsearch-validation-tool/\" target=\"_blank\" rel=\"noopener\">App Search API Validation Tool</a>测试。只要Universal Links那行状态为<code>PASSED</code>即可。</p>\n<h2 id=\"App端\"><a href=\"#App端\" class=\"headerlink\" title=\"App端\"></a>App端</h2><ul>\n<li>在 Xcode 的 <code>capabilities</code> -&gt; <code>applinks</code>里添加支持的几个域名</li>\n</ul>\n<p>都加上前置<code>applinks:</code>如<code>applinks:www.domain.com</code>。并且下面有红色感叹号时点击Fix。系统会自动写入.entitlements文件并添加到工程中。</p>\n<ul>\n<li>处理接收到的Activity</li>\n</ul>\n<p>在<code>UIApplicationDelegate</code>的<code>- application:continueUserActivity:restorationHandler:</code>里面处理，判断接收到的<code>NSUserActivity</code>的<code>activityType</code>值是否为<code>NSUserActivityTypeBrowsingWeb</code>，是的话则处理它的<code>webpageURL</code>，可以使用<code>NSURLComponents</code>处理。另外如果处理不了Apple建议最好openURL这个链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(application: UIApplication, continueUserActivity userActivity: NSUserActivity, restorationHandler: ([AnyObject]?) -&gt; Void) -&gt; Bool &#123;</span><br><span class=\"line\">    if userActivity.activityType == NSUserActivityTypeBrowsingWeb &#123;</span><br><span class=\"line\">        let webpageURL = userActivity.webpageURL! // Always exists</span><br><span class=\"line\">        if !isURLUnSupported(URL: webpageURL) &#123;</span><br><span class=\"line\">            UIApplication.sharedApplication().openURL(webpageURL)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外还有下面的说明。</p>\n<blockquote>\n<p>NOTE</p>\n<p>If you instantiate a <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/SafariServices/Reference/SFSafariViewController_Ref/index.html#//apple_ref/doc/uid/TP40016220-CH1\" target=\"_blank\" rel=\"noopener\">SFSafariViewController</a>, <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebView_Ref/index.html#//apple_ref/doc/uid/TP40014624-CH1\" target=\"_blank\" rel=\"noopener\">WKWebView</a>, or <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIWebView_Class/index.html#//apple_ref/doc/uid/TP40006950-CH3\" target=\"_blank\" rel=\"noopener\">UIWebView</a> object to handle a universal link, iOS opens your website in Safari instead of opening your app. However, if the user taps a universal link from within an embedded <code>SFSafariViewController</code>, <code>WKWebView</code>, or <code>UIWebView</code> object, iOS opens your app.</p>\n</blockquote>\n<ul>\n<li>测试</li>\n</ul>\n<p>可以直接调试测试，只要TeamID和BundleID一致。如在短信里或Safari里面点击支持的链接。</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ol>\n<li>应用安装到设备后自动（有网友测试过）去拉取支持的每个域名下的<code>apple-app-site-association</code>文件。</li>\n<li>点击链接后，系统会检测该链接的域名和路径是否符合App的配置，符合则会打开App，调用接口<code>application:continueUserActivity:restorationHandler</code>方法；不符合或未安装该App则继续打开链接。</li>\n<li>判断<code>application:continueUserActivity:restorationHandler</code>接口获取到传入的<code>NSUserActivity</code>的<code>activityType</code>值是否为<code>NSUserActivityTypeBrowsingWeb</code>，是则处理<code>webpageURL</code>；</li>\n<li>如果<code>webpageURL</code>不符合App内支持的规则，建议openURL这个链接。</li>\n</ol>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"详解Shell脚本实现iOS自动化编译打包提交","date":"2015-12-27T08:00:00.000Z","keywords":"iOS Shell 持续集成","description":"详解Shell脚本实现iOS自动化编译打包提交的过程","_content":"\n# 目录\n\n- 前言\n- Shell脚本涉及的工具\n  - xcodebuild和xcrun\n  - altool\n  - fir-cli\n  - PlistBuddy\n- 一些概念的区别\n- 具体实现\n  - xcodebuild和xcrun\n  - 准备Plist文件\n  - 获取命令行参数\n  - 清理构建目录\n  - 编译打包成Archive\n  - 将Archive导出\n  - 上传到Fir\n  - 验证并上传到App Store\n  - 邮件通知相关同事\n  - 上传符号表到Bugly\n- 简单例子\n- 对比实验\n  - 三种方式的对比\n  - xcodebuild+xcrun和仅xcodebuild的比较\n  - 命令到底做了什么\n- 总结\n\n# 前言\n\n现在涉及到编译打包的工作主要是以下两个：\n1. 提交测试版本给测试同事\n2. 提交App Store审核\n\n两个流程分别是：\n\n- 修改证书和配置文件，然后「Product -> Archive」编译打包，之后在自动弹出的 「Organizer」 中进行选择，根据需要导出 ad hoc enterprise 类型的 ipa 包。等待导出之后再提交到Fir上，等Fir提交完成就需要告知测试同事。整个流程下来一般都要半个多小时，而且需要人工监守操作。\n- 第二个也是差不多，打包完之后需要操作几个步骤然后上传到App Store，上传时间较长，而且中间可能会有错误需要处理。上传后等待苹果处理二进制包，苹果处理后上去选择构建包，点击提交审核。\n\n所以研究下自动化编译打包，提高下效率，减少人工操作成本。\n\n主要有两种实现途径，AppleScript和Shell脚本，`AppleScript`没怎么研究，网上说是很强大的脚本语言。\n\n下面主要讲Shell脚本的实现，网上也有人实现了并托管在`github`上，可以参考下。\n> https://github.com/webfrogs/xcode_shell\n\n# Shell脚本涉及的工具\n\n主要是以下几个工具：\n\n1. xcodebuild\n2. xcrun\n3. altool（提交到App Store使用）\n4. fir-cli（上传到fir时使用）\n5. Python的smtplib（之前已经写过python的发邮件了，所以就直接用没有用Shell写。）\n6. PlistBuddy\n7. BuglySymboliOS（Bugly的符号表工具包）\n\n## xcodebuild和xcrun\n`xcodebuild`和`xcrun`都是来自`Command Line Tools`，Xcode自带，如果没有可以通过以下命令安装：\n\n``` \nxcode-select --install\n```\n\n或者在下面的链接下载安装：\n>  https://developer.apple.com/downloads/ \n\n安装完可在以下路径看到这两个工具：\n> /Applications/Xcode.app/Contents/Developer/usr/bin/\n\n- xcodebuild\n主要是用来编译，打包成Archive和导出ipa包。\n\n> https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\n\n可以执行 `xcodebuild -help` 查看，主要展示了几种用法、一些可选项，最后是比较重要的exportOptionsPlist文件的一些可选key，这个文件在后面导出ipa包会用到。\n\n主要下面三个查看的命令比较重要：\n``` \n-showsdks                           display a compact list of the installed SDKs\n-showBuildSettings                  display a list of build settings and values\n-list                               lists the targets and configurations in a project, or the schemes in a workspace\n```\n\n后面两个需要在Xcode的project或者workspace目录下才能用。\n\n- xcrun\n``` \nxcrun -h\n```\n\n主要是打包，看网上比较多是用这个工具打包各种渠道包。\n\n## altool\n\n这个工具在网上搜索几乎没有什么结果，大概国内直接用命令行工具提交App Store的比较少。后来在StackOverflow上才找到相关的文档：\n> https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf\n\n在上面的文档第38页讲述了如何使用altool上传二进制文件。\n\n这个工具实际上是ApplicationLoader，打开Xcode-左上角Xcode-Open Developer Tool-Application Loader 可看到。有个“交付您的应用”操作，网上看到有人是直接用这个工具上传的。\n\naltool的路径是：\n\n> /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Support/altool\n\n使用时会提示下面的错误：\n``` \naltool[] *** Error: Exception while launching iTunesTransporter: \nTransporter not found at path: /usr/local/itms/bin/iTMSTransporter. \nYou should reinstall the application.\n```\n\n建立个软链接可解决（类似于Windows的快捷方式）：\n``` \nln -s /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms /usr/local/itms\n```\n\n## fir-cli\n安装时会提示各种权限不允许，可以执行下面命令：\n\n``` \necho 'gem: --bindir /usr/local/bin' >> ~/.gemrc\nsudo 'gem install fir-cli\n```\n\nfir有提供Android Studio、Eclipse、gradle插件，可以看下。\n> http://fir.im/tools\n\n这是\b它的github地址，其中讲到有对?`xcodebuild`?原生指令进行了封装。\n> https://github.com/FIRHQ/fir-cli/blob/master/README.md\n\n## PlistBuddy\n\nPlist在Mac OSX系统中起着举足轻重的作用，系统和程序使用Plist文件来存储自己的安装/配置/属性等信息。而PlistBuddy是Mac里一个用于命令行下读写plist文件的工具，在/usr/libexec/下。可以通过它读取或修改plist文件的内容。\n\n这里我仅通过它来获取内部版本号、外部版本号。在一些文章中见过用来修改plist文件的信息来导出出不同需要的包。\n\n# 一些概念的区别\n\nWorkspace、Project、Scheme、Target的区别。\n\n下面是官方文档：\n> https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1\n\n下面从上往下大概说下，具体看文档比较好：\n\n- Workspace\n`Workspace`是最大的集合，可以包含多个`Project`，可以管理不同的`Project`之间的关系。`Workspace`是以`xcworkspace`的文件形式存在的。（这点和`Project`一致）。`Workspace`的存在是为了解决原来仅有`Project`的时候不同的`Project`之间的引用和调用困难的问题。同时，一个`Workspace`的`Project`共用一个编译路径。比如使用CocoaPod、或者使用其他开发库/框架。\n\n- Project\n`Project`是一个仓库，包含编译一个或多个`product`所需的文件、资源和信息，保持和聚合这些元素间的关系。（每个`Target`能指定自己的`Build Settings`来覆盖`Project`的）\n\n> - Source code, including header files and implementation files\n> - Libraries and frameworks, internal and external\n> - Resource files\n> - Image files\n> - Interface Builder (nib) files\n\n- Scheme\n`Scheme`包含了一些要构建的Scheme，一些构建时用到的设置，一些要运行的测试。同时只能有一个`Scheme`是有效的。\n\n- Target\n`Target`是对应了具体一个想要构建的`Product`,包含了一些构建这个`Product`所需的配置和文件（`build settings`和`build phases`）。一个`Project`可以包含多个`Target`。\n\n# 具体实现\n\n看起来有两种实现方法：\n- 网上可以查到的文章，大多数都是用`xcodebuild`和`xcrun`实现的，比如：\n``` \nxcodebuild -workspace XXX -scheme XXX -configuration Release\nxcrun -sdk iphoneos PackageApplication -v \"/XXX/XXX.app\" -o \"/XXX/XXX\"\n```\n\n这些文章都是相对比早期的，大多数用于打包不同渠道包。\n\n- 另一种是`xcodebuild`的`archive`和`-exportArchive`，只有一两篇文章是用这个，而且也过时了，因为现在最新是需要用`-exportOptionsPlist`这个选项。\n\n我用的是第二种，并用上`-exportOptionsPlist`选项，后面我会简单给下这两种的结果比较。脚本流程是：\n\n1. 准备两个`Plist`文件，用于导出不同`ipa`包时使用。\n2. 获取命令行参数，区分上传到`Fir`还是`App Store`\n3. 清理构建目录\n4. 编译打包\n5. 导出包\n6. 上传到`Fir`或者验证并上传到`App Store`\n7. 发邮件通知\n\n## 准备Plist文件\n\n根据`xcodebuild -help`提供的可选key可以知道，`compileBitcode`、`embedOnDemandResourcesAssetPacksInBundle`、`iCloudContainerEnvironment`、`manifest`、`onDemandResourcesAssetPacksBaseURL`、`thinning`这几个key用于非`App Store`导出的；`uploadBitcode`、`uploadSymbols`用于`App Store`导出；`method`、`teamID`共用。\n\nmethod的可选值为:\n> app-store, package, ad-hoc, enterprise, development, and developer-id\n\n所以我建了两个文件：`AppStoreExportOptions.plist`、`AdHocExportOptions.plist`。\n\nAppStoreExportOptions.plist：method＝app-store，uploadBitcode＝YES，uploadSymbols＝YES\n\nAdHocExportOptions.plist：method＝ad-hoc，compileBitcode＝NO\n\n## 获取命令行参数\n用`Shell`内置的`getopts`命令，这属于Shell的范畴就不多讲了：\n\n``` \nif [ $# -lt 1 ];then\n    echo \"Error! Should enter the archive type (AdHoc or AppStore).\"\n    echo \"\"\n    exit 2\nfi\nwhile getopts 't:' optname\ndo\n    case \"$optname\" in\n    t)\n        if [ ${OPTARG} != \"AdHoc\" ] && [ ${OPTARG} != \"AppStore\" ];then\n            echo \"invalid parameter of $OPTARG\"\n            echo \"\"\n            exit 1\n        fi\n        type=${OPTARG}\n        ;;\n    *)\n        echo \"Error! Unknown error while processing options\"\n        echo \"\"\n        exit 2\n        ;;\n    esac\ndone\n```\n\n## 清理构建目录\n就如在Xcode操作「Product -> Clean」。\n\n``` \nlog_path=\"/XXX/XXX\"\nconfiguration=\"Release\"\nxcodebuild clean -configuration \"$configuration\" -alltargets >> $log_path\n```\n\nlog_path是一个文档路径，只是用来记录命令的输出，因为都打在终端会很多，另外也方便后面分析。后面的命令也是如此。这里面带的选项可以根据需要参考`xcodebuild -help`的信息。\n\n## 编译打包成Archive\n\n就如在Xcode操作「Product -> Archive」\n\n``` \nworkspaceName=\"XXX.xcworkspace\"\nscheme=\"XXX\"\nconfigurationBuildDir=\"XXX/build\"\ncodeSignIdentity=\"iPhone Distribution: XXX, Ltd. (xxxxxxxxxx)\"\nadHocProvisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nappStoreProvisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nconfiguration=\"Release\"\narchivePath=\"/xxx/XXX.xcarchive\"\n\nxcodebuild archive -workspace \"$workspaceName\" -scheme \"$scheme\" -configuration \"$configuration\" -archivePath \"$archivePath\" CONFIGURATION_BUILD_DIR=\"$configurationBuildDir\" CODE_SIGN_IDENTITY=\"$codeSignIdentity\" PROVISIONING_PROFILE=\"$provisioningProfile\" >> $log_path\n```\n\n这里的`CONFIGURATION_BUILD_DIR`是中间文件生成的路径，可以不指定；`CODE_SIGN_IDENTITY`是证书名（在对应`TARGETS`的`Build Settings`中选择完`Code Sinning`，再点击选择`Other...`，就可以得到这串东西）；`PROVISIONING_PROFILE`是配置文件（获取方法同CODE_SIGN_IDENTITY，格式一般是`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`）。还可以添加其他参数，不设置的都是默认使用项目Build Settings里面的配置，包括`CODE_SIGN_IDENTITY`和`PROVISIONING_PROFILE`。\n\n如果是workspace就用`-workspace`，就像编译带有`CocoaPods`的项目，如果是普通项目则用`-project`。\n\n执行完会生成一个.xcarchive文件和build文件夹如下：\n\n``` \n.xcarchive\nbuild文件夹\n\t|------.a\n\t|------.app\n\t|------.app.dSYM\n\t|------.swiftmodule文件夹\n\t\t|------arm.swiftdoc\n\t\t|------arm.swiftmodule\n\t\t|------arm64.swiftdoc\n\t\t|------arm64.swiftmodule\n```\n\n## 将Archive导出\n\n``` \nxcodebuild -exportArchive -archivePath \"$archivePath\" -exportOptionsPlist \"$exportOptionsPlist\" -exportPath \"/XXX/XXX\" >> $log_path\n```\n\n其中`$exportOptionsPlist`是对应使用的Plist的完整路径（包括文件名）。\n\n然后就会在指定的`exportPath`路径下生成.ipa文件。\n\n## 上传到Fir\n\n``` \nfirApiToken=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nipaPath=\"/xxx/xxx.ipa\"\nfir publish \"$ipaPath\" -T \"$firApiToken\" >> $log_path\n```\n\n`firApiToken`在登录Fir后，右上角-API token看到。\n\n## 验证并上传到App Store\n\n``` \naltoolPath=\"/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n${altoolPath} --validate-app -f ${ipaPath} -u xxxxxx -p xxxxxx -t ios --output-format xml >>\n${altoolPath} --upload-app -f ${ipaPath} -u xxxxxx -p xxxxxx -t ios --output-format xml\n```\n\n在上面的PDF文档第38页讲明了用法和各个可选项，具体可以看下PDF。需要说明的是，生成的结果是xml打印在终端，可以保存到文档再解析出key来判断是否成功，目前这步还没做。\n\n这是成功的结果：\n\n``` \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>os-version</key>\n\t<string>10.11.2</string>\n\t<key>success-message</key>\n\t<string>No errors validating archive at /XXX/XXX.ipa</string>\n\t<key>tool-version</key>\n\t<string>1.1.902</string>\n\t<key>xcode-versions</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>path</key>\n\t\t\t<string>/Applications/Xcode.app</string>\n\t\t\t<key>version.plist</key>\n\t\t\t<dict>\n\t\t\t\t<key>BuildVersion</key>\n\t\t\t\t<string>7</string>\n\t\t\t\t<key>CFBundleShortVersionString</key>\n\t\t\t\t<string>7.2</string>\n\t\t\t\t<key>CFBundleVersion</key>\n\t\t\t\t<string>9548</string>\n\t\t\t\t<key>ProductBuildVersion</key>\n\t\t\t\t<string>7C68</string>\n\t\t\t\t<key>ProjectName</key>\n\t\t\t\t<string>IDEFrameworks</string>\n\t\t\t\t<key>SourceVersion</key>\n\t\t\t\t<string>9548000000000000</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n这是失败的结果（找不到iTMSTransporter的情况，用前面说的ln -s解决）：\n\n``` \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>os-version</key>\n\t<string>10.11.2</string>\n\t<key>product-errors</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>code</key>\n\t\t\t<integer>-10001</integer>\n\t\t\t<key>message</key>\n\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t<key>userInfo</key>\n\t\t\t<dict>\n\t\t\t\t<key>MZUnderlyingException</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t\t<key>NSLocalizedDescription</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t\t<key>NSLocalizedFailureReason</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>tool-version</key>\n\t<string>1.1.902</string>\n\t<key>xcode-versions</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>path</key>\n\t\t\t<string>/Applications/Xcode.app</string>\n\t\t\t<key>version.plist</key>\n\t\t\t<dict>\n\t\t\t\t<key>BuildVersion</key>\n\t\t\t\t<string>7</string>\n\t\t\t\t<key>CFBundleShortVersionString</key>\n\t\t\t\t<string>7.2</string>\n\t\t\t\t<key>CFBundleVersion</key>\n\t\t\t\t<string>9548</string>\n\t\t\t\t<key>ProductBuildVersion</key>\n\t\t\t\t<string>7C68</string>\n\t\t\t\t<key>ProjectName</key>\n\t\t\t\t<string>IDEFrameworks</string>\n\t\t\t\t<key>SourceVersion</key>\n\t\t\t\t<string>9548000000000000</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n可见，成功会有个`success-message`的key，而失败会有`product-errors`的key。\n\n## 邮件通知相关同事\n\n发邮件时可能会想带上当前版本的一些信息，如版本号、内部版本号等，可以用PlistBuddy实现读取甚至修改Plist文件。\n\n``` \nappInfoPlistPath=\"`pwd`/xxx/xxx-Info.plist\"\nbundleShortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${appInfoPlistPath})\nbundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${appInfoPlistPath})\n```\n\n之后便是发邮件：\n\n``` \npython sendEmail.py \"测试版本 iOS ${bundleShortVersion}(${bundleVersion})上传成功\" \"赶紧下载体验吧！http://fir.im/meijia\"\n```\n\n或者\n``` \npython sendEmail.py \"正式版本 iOS ${bundleShortVersion}(${bundleVersion})提交成功\" \"iOS ${bundleShortVersion} 提交成功！\"\n```\n\npython主要用smtplib，网上的文章大多都是旧的，特别是讲到SSL时特别复杂，其实具体看下smtplib的接口文档就可以实现了。另外有可能出现标题、内容乱码的现象。整合了下面的链接解决了：\n\n[python 发送邮件解决所有乱码问题]: http://outofmemory.cn/code-snippet/1464/python-send-youjian-resolve-suoyou-luanma-question\n[Unicode和Python的中文处理]: http://www.cnblogs.com/TsengYuen/archive/2012/05/22/2513290.html\n\n下面是实现了SSL Smtp登录的。\n\n``` \n#!/usr/bin/env python3\n#coding: utf-8\n\n# sendEmail title content\nimport sys\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.header import Header\n\nsender = 'xxxxxx@qq.com;'\nreceiver = 'xxx@qq.com;'\nsmtpserver = 'smtp.qq.com'\n#smtpserver = 'smtp.exmail.qq.com'\n\nusername = sender\npassword = 'xxxxxx'\n\ndef send_mail(title, content):\n\n    try:\n        msg = MIMEText(content,'plain','utf-8')\n        if not isinstance(title,unicode):\n            title = unicode(title, 'utf-8')\n        msg['Subject'] = title\n        msg['From'] = sender\n        msg['To'] = receiver\n        msg[\"Accept-Language\"]=\"zh-CN\"\n        msg[\"Accept-Charset\"]=\"ISO-8859-1,utf-8\"\n\n        smtp = smtplib.SMTP_SSL(smtpserver,465)\n        smtp.login(username, password)\n        smtp.sendmail(sender, receiver, msg.as_string())\n        smtp.quit()\n        return True\n    except Exception, e:\n        print str(e)\n        return False\n\nif send_mail(sys.argv[1], sys.argv[2]):\n    print \"done!\"\nelse:\n    print \"failed!\"\n```\n\n可以赋值给msg['CC']实现抄送，经过测试，抄送的人过多会有一部分不成功，网上查了是这个库的bug。发送多个人用分号，另外末尾也要用分号。\n\n## 上传符号表到Bugly\n\n用于分析解决崩溃bug挺好用的，而且他们的客服也很及时。\n发现他们的2.4.1版本有问题，反馈后他们给了2.4.3版本，经测试没问题。\n\n1. 在Bugly官网下载[符号表工具](https://bugly.qq.com/whitebook)\n\n2. 设置settings.txt\n\n3. 调用命令\n\n```\njava -jar buglySymboliOS.jar -d -i $dSYM -u -id \"xxxxxxxxx\" -key \"xxxxxxxxxxx\" -package \"com.xxx.xxx\" -version \"$version\" ­-o \"xxx.zip\"\n```\n注意版本号之类的要设置对。\n\n# 简单例子\n\n清理构建目录：\n```\nxcodebuild clean -configuration Release -alltargets\n```\n归档（其他参数不指定的话，默认用的是.xcworkspace或.xcodeproj文件里的配置）\n```\nxcodebuild archive -workspace xxx.xcworkspace -scheme xxx -configuration Release -archivePath ./xxx.xcarchive\n```\n导出IPA\n```\nxcodebuild -exportArchive -archivePath ./xxx.xcarchive -exportOptionsPlist ./AdHocExportOptions.plist -exportPath ./\n```\n上传FIR\n```\nfir publish ./xxx.ipa -T xxxxxx\n```\n提交AppStore\n```\n/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --validate-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml\n/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --upload-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml\n```\n发邮件\n```\npython sendEmail.py \"邮件内容\" \"用户名\" \"密码\"\n```\n上传符号表\n```\njava -jar buglySymboliOS.jar -d -i $dSYM -u -id \"xxxxxxxxx\" -key \"xxxxxxxxxxx\" -package \"com.xxx.xxx\" -version \"$version\" ­-o \"xxx.zip\"\n```\n\n# 对比实验\n\n为了了解一些区别，我做了几个对比。我这里定义下三种方式，方便下面说明。\n\n- xcodebuild+xcrun（xcodebuild build和xcrun）\n- 只用xcodebuild（archive和exportArchive），\n- Xcode。\n\n## 三种方式的对比\n\n我使用xcodebuild+xcrun、仅xcodebuild、Xcode三种分别对相同代码和配置进行操作，根据结果做比较：\n\n- xcodebuild+xcrun\n\nipa：40.7MB，.app：93.3MB，编译耗时：8m31s，打包耗时：15s。\n\n- 仅xcodebuild\n\nipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m24s，打包耗时：26s。\n\n- Xcode\n\nipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m40s，打包耗时：30s。\n\nXcode生成的`.xcarchive`文件可以在以下路径看到：\n\n> /Users/double/Library/Developer/Xcode/Archives\n\n可以看出，<u>仅使用xcodebuild的结果和使用Xcode编译打包的结果是一致的</u>，并且最终的ipa也可以正常安装使用。而第一种xcodebuild+xcrun的结果略大些，但是ipa也是可以正常使用的。这时需要了解下他们的区别。\n\n## xcodebuild+xcrun和仅xcodebuild的比较\n\n- 使用xcrun打包方式二产生的.xcarchive中的.app\n\n打包生成的.ipa文件大小同样为37.3MB，与方式二使用Xcodebuild -exportArchive的结果一致！这样说明：**使用xcrun的打包方法是正常的**，和xcodebuild -exportArchive的结果一致，而且**.ipa包仅和.app有关**。那么说明，<u>这两种方式的不同仅在于xcodebuild build和xcodebuild archive之间的不同</u>。\n\n- 删除.xcarchive中其他文件然后`exportArchive`\n\n这时命令提示错误，但是上面我们已经得出结论.ipa的生成只和.app有关，所以可能的原因是，这个`exportArchive`命令会检查.archive的完整性和正确性，防止生成的.archive不完整或者是伪造的。下面做个实验看下。\n\n## 命令到底做了什么\n根据命令运行时输出的内容，看下中间做了什么\n\n- xcrun -sdk iphoneos PackageApplication -v xxx.app -o xxx.ipa\n\n``` \nPackaging application: '/xxx/xxx.app'\nArguments: output=/xxx/xxx.ipa  verbose=1  \nEnvironment variables:\nSDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk\n......\nSHELL = /bin/bash\n\nOutput directory: '/xxx/xxx.ipa'\nTemporary Directory: '/var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK'  (will NOT be deleted on exit when verbose set)\n+ /bin/cp -Rp /xxx/xxx.app /var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK/Payload\nProgram /bin/cp returned 0 : []\n### Checking original app\n+ /usr/bin/codesign --verify -vvvv /xxx/xxx.app\nProgram /usr/bin/codesign returned 0 : [/xxx/xxx.app: valid on disk\n/xxx/xxx.xcarchive/Products/Applications/xxx.app: satisfies its Designated Requirement\n]\nDone checking the original app\n+ /usr/bin/zip --symlinks --verbose --recurse-paths /Users/double/Desktop/1.ipa .\nProgram /usr/bin/zip returned 0 : [  adding: Payload/\t(in=0) (out=0) (stored 0%)\n  adding: Payload/xxx.app/\t(in=0) (out=0) (stored 0%)\n  ......\n```\n\n主要检查了环境变量，然后验证签名，然后压缩（看到了吗，居然是/usr/bin/zip），后面adding的基本都是.nib和.png等的压缩。看起来.archive只是一种压缩形式，包含了.app、.dSYM、.plist和其他一些文件。\n\n这里的`codesign`工具就是签名相关的，可以查看说明：\n\n``` \nSYNOPSIS\n     codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]\n     codesign -v [-R requirement] [-v] [path|pid ...]\n     codesign -d [-v] [path|pid ...]\n     codesign -h [-v] [pid ...]\n```\n\n-s是签名，-v是验证。所以可以在.app生成后再签名。\n\n- xcodebuild clean\n\n清理工作，根据参数删除指定的workplace、target、configuration（release或debug） 的中间文件，都是工程目录下的build文件夹。\n\n- xcodebuild archive\n\n下面是里面主要的步骤：\n\n1. Create product structure 创建.app文件\n2. CompileC 编译文件（clang编译，指定了编译的SDK版本和指令集）\n3. Ld\n4. CreateUniversalBinary (lipo)\n5. CompileStoryboard (ibtool )\n6. CompileAssetCatalog (actool )\n7. ProcessInfoPlistFile (builtin-infoPlistUtility )\n8. GenerateDSYMFile (dsymutil )\n9. LinkStoryboards(ibtool )\n10. Strip \n11. ProcessProductPackaging (builtin-productPackagingUtility )\n12. CodeSign (codesign --force --sign)\n13. Validate (builtin-validationUtility )\n\n# 总结\n\n呼呼写了这么多，终于到总结部分了。这个过程学到了很多东西，脚本成果确实方便了很多，减少了编译打包过程中人工监守、人工操作的成本，并且测试和提交到appStore的包都验证过可用。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails.md","raw":"---\ntitle: 详解Shell脚本实现iOS自动化编译打包提交\ndate: 2015-12-27 16:00:00\ntags: \n     - iOS\n     - 持续集成\n     - shell\ncategories: iOS\nkeywords: iOS Shell 持续集成\ndescription: 详解Shell脚本实现iOS自动化编译打包提交的过程\n---\n\n# 目录\n\n- 前言\n- Shell脚本涉及的工具\n  - xcodebuild和xcrun\n  - altool\n  - fir-cli\n  - PlistBuddy\n- 一些概念的区别\n- 具体实现\n  - xcodebuild和xcrun\n  - 准备Plist文件\n  - 获取命令行参数\n  - 清理构建目录\n  - 编译打包成Archive\n  - 将Archive导出\n  - 上传到Fir\n  - 验证并上传到App Store\n  - 邮件通知相关同事\n  - 上传符号表到Bugly\n- 简单例子\n- 对比实验\n  - 三种方式的对比\n  - xcodebuild+xcrun和仅xcodebuild的比较\n  - 命令到底做了什么\n- 总结\n\n# 前言\n\n现在涉及到编译打包的工作主要是以下两个：\n1. 提交测试版本给测试同事\n2. 提交App Store审核\n\n两个流程分别是：\n\n- 修改证书和配置文件，然后「Product -> Archive」编译打包，之后在自动弹出的 「Organizer」 中进行选择，根据需要导出 ad hoc enterprise 类型的 ipa 包。等待导出之后再提交到Fir上，等Fir提交完成就需要告知测试同事。整个流程下来一般都要半个多小时，而且需要人工监守操作。\n- 第二个也是差不多，打包完之后需要操作几个步骤然后上传到App Store，上传时间较长，而且中间可能会有错误需要处理。上传后等待苹果处理二进制包，苹果处理后上去选择构建包，点击提交审核。\n\n所以研究下自动化编译打包，提高下效率，减少人工操作成本。\n\n主要有两种实现途径，AppleScript和Shell脚本，`AppleScript`没怎么研究，网上说是很强大的脚本语言。\n\n下面主要讲Shell脚本的实现，网上也有人实现了并托管在`github`上，可以参考下。\n> https://github.com/webfrogs/xcode_shell\n\n# Shell脚本涉及的工具\n\n主要是以下几个工具：\n\n1. xcodebuild\n2. xcrun\n3. altool（提交到App Store使用）\n4. fir-cli（上传到fir时使用）\n5. Python的smtplib（之前已经写过python的发邮件了，所以就直接用没有用Shell写。）\n6. PlistBuddy\n7. BuglySymboliOS（Bugly的符号表工具包）\n\n## xcodebuild和xcrun\n`xcodebuild`和`xcrun`都是来自`Command Line Tools`，Xcode自带，如果没有可以通过以下命令安装：\n\n``` \nxcode-select --install\n```\n\n或者在下面的链接下载安装：\n>  https://developer.apple.com/downloads/ \n\n安装完可在以下路径看到这两个工具：\n> /Applications/Xcode.app/Contents/Developer/usr/bin/\n\n- xcodebuild\n主要是用来编译，打包成Archive和导出ipa包。\n\n> https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\n\n可以执行 `xcodebuild -help` 查看，主要展示了几种用法、一些可选项，最后是比较重要的exportOptionsPlist文件的一些可选key，这个文件在后面导出ipa包会用到。\n\n主要下面三个查看的命令比较重要：\n``` \n-showsdks                           display a compact list of the installed SDKs\n-showBuildSettings                  display a list of build settings and values\n-list                               lists the targets and configurations in a project, or the schemes in a workspace\n```\n\n后面两个需要在Xcode的project或者workspace目录下才能用。\n\n- xcrun\n``` \nxcrun -h\n```\n\n主要是打包，看网上比较多是用这个工具打包各种渠道包。\n\n## altool\n\n这个工具在网上搜索几乎没有什么结果，大概国内直接用命令行工具提交App Store的比较少。后来在StackOverflow上才找到相关的文档：\n> https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf\n\n在上面的文档第38页讲述了如何使用altool上传二进制文件。\n\n这个工具实际上是ApplicationLoader，打开Xcode-左上角Xcode-Open Developer Tool-Application Loader 可看到。有个“交付您的应用”操作，网上看到有人是直接用这个工具上传的。\n\naltool的路径是：\n\n> /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Support/altool\n\n使用时会提示下面的错误：\n``` \naltool[] *** Error: Exception while launching iTunesTransporter: \nTransporter not found at path: /usr/local/itms/bin/iTMSTransporter. \nYou should reinstall the application.\n```\n\n建立个软链接可解决（类似于Windows的快捷方式）：\n``` \nln -s /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms /usr/local/itms\n```\n\n## fir-cli\n安装时会提示各种权限不允许，可以执行下面命令：\n\n``` \necho 'gem: --bindir /usr/local/bin' >> ~/.gemrc\nsudo 'gem install fir-cli\n```\n\nfir有提供Android Studio、Eclipse、gradle插件，可以看下。\n> http://fir.im/tools\n\n这是\b它的github地址，其中讲到有对?`xcodebuild`?原生指令进行了封装。\n> https://github.com/FIRHQ/fir-cli/blob/master/README.md\n\n## PlistBuddy\n\nPlist在Mac OSX系统中起着举足轻重的作用，系统和程序使用Plist文件来存储自己的安装/配置/属性等信息。而PlistBuddy是Mac里一个用于命令行下读写plist文件的工具，在/usr/libexec/下。可以通过它读取或修改plist文件的内容。\n\n这里我仅通过它来获取内部版本号、外部版本号。在一些文章中见过用来修改plist文件的信息来导出出不同需要的包。\n\n# 一些概念的区别\n\nWorkspace、Project、Scheme、Target的区别。\n\n下面是官方文档：\n> https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1\n\n下面从上往下大概说下，具体看文档比较好：\n\n- Workspace\n`Workspace`是最大的集合，可以包含多个`Project`，可以管理不同的`Project`之间的关系。`Workspace`是以`xcworkspace`的文件形式存在的。（这点和`Project`一致）。`Workspace`的存在是为了解决原来仅有`Project`的时候不同的`Project`之间的引用和调用困难的问题。同时，一个`Workspace`的`Project`共用一个编译路径。比如使用CocoaPod、或者使用其他开发库/框架。\n\n- Project\n`Project`是一个仓库，包含编译一个或多个`product`所需的文件、资源和信息，保持和聚合这些元素间的关系。（每个`Target`能指定自己的`Build Settings`来覆盖`Project`的）\n\n> - Source code, including header files and implementation files\n> - Libraries and frameworks, internal and external\n> - Resource files\n> - Image files\n> - Interface Builder (nib) files\n\n- Scheme\n`Scheme`包含了一些要构建的Scheme，一些构建时用到的设置，一些要运行的测试。同时只能有一个`Scheme`是有效的。\n\n- Target\n`Target`是对应了具体一个想要构建的`Product`,包含了一些构建这个`Product`所需的配置和文件（`build settings`和`build phases`）。一个`Project`可以包含多个`Target`。\n\n# 具体实现\n\n看起来有两种实现方法：\n- 网上可以查到的文章，大多数都是用`xcodebuild`和`xcrun`实现的，比如：\n``` \nxcodebuild -workspace XXX -scheme XXX -configuration Release\nxcrun -sdk iphoneos PackageApplication -v \"/XXX/XXX.app\" -o \"/XXX/XXX\"\n```\n\n这些文章都是相对比早期的，大多数用于打包不同渠道包。\n\n- 另一种是`xcodebuild`的`archive`和`-exportArchive`，只有一两篇文章是用这个，而且也过时了，因为现在最新是需要用`-exportOptionsPlist`这个选项。\n\n我用的是第二种，并用上`-exportOptionsPlist`选项，后面我会简单给下这两种的结果比较。脚本流程是：\n\n1. 准备两个`Plist`文件，用于导出不同`ipa`包时使用。\n2. 获取命令行参数，区分上传到`Fir`还是`App Store`\n3. 清理构建目录\n4. 编译打包\n5. 导出包\n6. 上传到`Fir`或者验证并上传到`App Store`\n7. 发邮件通知\n\n## 准备Plist文件\n\n根据`xcodebuild -help`提供的可选key可以知道，`compileBitcode`、`embedOnDemandResourcesAssetPacksInBundle`、`iCloudContainerEnvironment`、`manifest`、`onDemandResourcesAssetPacksBaseURL`、`thinning`这几个key用于非`App Store`导出的；`uploadBitcode`、`uploadSymbols`用于`App Store`导出；`method`、`teamID`共用。\n\nmethod的可选值为:\n> app-store, package, ad-hoc, enterprise, development, and developer-id\n\n所以我建了两个文件：`AppStoreExportOptions.plist`、`AdHocExportOptions.plist`。\n\nAppStoreExportOptions.plist：method＝app-store，uploadBitcode＝YES，uploadSymbols＝YES\n\nAdHocExportOptions.plist：method＝ad-hoc，compileBitcode＝NO\n\n## 获取命令行参数\n用`Shell`内置的`getopts`命令，这属于Shell的范畴就不多讲了：\n\n``` \nif [ $# -lt 1 ];then\n    echo \"Error! Should enter the archive type (AdHoc or AppStore).\"\n    echo \"\"\n    exit 2\nfi\nwhile getopts 't:' optname\ndo\n    case \"$optname\" in\n    t)\n        if [ ${OPTARG} != \"AdHoc\" ] && [ ${OPTARG} != \"AppStore\" ];then\n            echo \"invalid parameter of $OPTARG\"\n            echo \"\"\n            exit 1\n        fi\n        type=${OPTARG}\n        ;;\n    *)\n        echo \"Error! Unknown error while processing options\"\n        echo \"\"\n        exit 2\n        ;;\n    esac\ndone\n```\n\n## 清理构建目录\n就如在Xcode操作「Product -> Clean」。\n\n``` \nlog_path=\"/XXX/XXX\"\nconfiguration=\"Release\"\nxcodebuild clean -configuration \"$configuration\" -alltargets >> $log_path\n```\n\nlog_path是一个文档路径，只是用来记录命令的输出，因为都打在终端会很多，另外也方便后面分析。后面的命令也是如此。这里面带的选项可以根据需要参考`xcodebuild -help`的信息。\n\n## 编译打包成Archive\n\n就如在Xcode操作「Product -> Archive」\n\n``` \nworkspaceName=\"XXX.xcworkspace\"\nscheme=\"XXX\"\nconfigurationBuildDir=\"XXX/build\"\ncodeSignIdentity=\"iPhone Distribution: XXX, Ltd. (xxxxxxxxxx)\"\nadHocProvisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nappStoreProvisioningProfile=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nconfiguration=\"Release\"\narchivePath=\"/xxx/XXX.xcarchive\"\n\nxcodebuild archive -workspace \"$workspaceName\" -scheme \"$scheme\" -configuration \"$configuration\" -archivePath \"$archivePath\" CONFIGURATION_BUILD_DIR=\"$configurationBuildDir\" CODE_SIGN_IDENTITY=\"$codeSignIdentity\" PROVISIONING_PROFILE=\"$provisioningProfile\" >> $log_path\n```\n\n这里的`CONFIGURATION_BUILD_DIR`是中间文件生成的路径，可以不指定；`CODE_SIGN_IDENTITY`是证书名（在对应`TARGETS`的`Build Settings`中选择完`Code Sinning`，再点击选择`Other...`，就可以得到这串东西）；`PROVISIONING_PROFILE`是配置文件（获取方法同CODE_SIGN_IDENTITY，格式一般是`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`）。还可以添加其他参数，不设置的都是默认使用项目Build Settings里面的配置，包括`CODE_SIGN_IDENTITY`和`PROVISIONING_PROFILE`。\n\n如果是workspace就用`-workspace`，就像编译带有`CocoaPods`的项目，如果是普通项目则用`-project`。\n\n执行完会生成一个.xcarchive文件和build文件夹如下：\n\n``` \n.xcarchive\nbuild文件夹\n\t|------.a\n\t|------.app\n\t|------.app.dSYM\n\t|------.swiftmodule文件夹\n\t\t|------arm.swiftdoc\n\t\t|------arm.swiftmodule\n\t\t|------arm64.swiftdoc\n\t\t|------arm64.swiftmodule\n```\n\n## 将Archive导出\n\n``` \nxcodebuild -exportArchive -archivePath \"$archivePath\" -exportOptionsPlist \"$exportOptionsPlist\" -exportPath \"/XXX/XXX\" >> $log_path\n```\n\n其中`$exportOptionsPlist`是对应使用的Plist的完整路径（包括文件名）。\n\n然后就会在指定的`exportPath`路径下生成.ipa文件。\n\n## 上传到Fir\n\n``` \nfirApiToken=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nipaPath=\"/xxx/xxx.ipa\"\nfir publish \"$ipaPath\" -T \"$firApiToken\" >> $log_path\n```\n\n`firApiToken`在登录Fir后，右上角-API token看到。\n\n## 验证并上传到App Store\n\n``` \naltoolPath=\"/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n${altoolPath} --validate-app -f ${ipaPath} -u xxxxxx -p xxxxxx -t ios --output-format xml >>\n${altoolPath} --upload-app -f ${ipaPath} -u xxxxxx -p xxxxxx -t ios --output-format xml\n```\n\n在上面的PDF文档第38页讲明了用法和各个可选项，具体可以看下PDF。需要说明的是，生成的结果是xml打印在终端，可以保存到文档再解析出key来判断是否成功，目前这步还没做。\n\n这是成功的结果：\n\n``` \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>os-version</key>\n\t<string>10.11.2</string>\n\t<key>success-message</key>\n\t<string>No errors validating archive at /XXX/XXX.ipa</string>\n\t<key>tool-version</key>\n\t<string>1.1.902</string>\n\t<key>xcode-versions</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>path</key>\n\t\t\t<string>/Applications/Xcode.app</string>\n\t\t\t<key>version.plist</key>\n\t\t\t<dict>\n\t\t\t\t<key>BuildVersion</key>\n\t\t\t\t<string>7</string>\n\t\t\t\t<key>CFBundleShortVersionString</key>\n\t\t\t\t<string>7.2</string>\n\t\t\t\t<key>CFBundleVersion</key>\n\t\t\t\t<string>9548</string>\n\t\t\t\t<key>ProductBuildVersion</key>\n\t\t\t\t<string>7C68</string>\n\t\t\t\t<key>ProjectName</key>\n\t\t\t\t<string>IDEFrameworks</string>\n\t\t\t\t<key>SourceVersion</key>\n\t\t\t\t<string>9548000000000000</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n这是失败的结果（找不到iTMSTransporter的情况，用前面说的ln -s解决）：\n\n``` \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>os-version</key>\n\t<string>10.11.2</string>\n\t<key>product-errors</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>code</key>\n\t\t\t<integer>-10001</integer>\n\t\t\t<key>message</key>\n\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t<key>userInfo</key>\n\t\t\t<dict>\n\t\t\t\t<key>MZUnderlyingException</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t\t<key>NSLocalizedDescription</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t\t<key>NSLocalizedFailureReason</key>\n\t\t\t\t<string>Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>tool-version</key>\n\t<string>1.1.902</string>\n\t<key>xcode-versions</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>path</key>\n\t\t\t<string>/Applications/Xcode.app</string>\n\t\t\t<key>version.plist</key>\n\t\t\t<dict>\n\t\t\t\t<key>BuildVersion</key>\n\t\t\t\t<string>7</string>\n\t\t\t\t<key>CFBundleShortVersionString</key>\n\t\t\t\t<string>7.2</string>\n\t\t\t\t<key>CFBundleVersion</key>\n\t\t\t\t<string>9548</string>\n\t\t\t\t<key>ProductBuildVersion</key>\n\t\t\t\t<string>7C68</string>\n\t\t\t\t<key>ProjectName</key>\n\t\t\t\t<string>IDEFrameworks</string>\n\t\t\t\t<key>SourceVersion</key>\n\t\t\t\t<string>9548000000000000</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n```\n\n可见，成功会有个`success-message`的key，而失败会有`product-errors`的key。\n\n## 邮件通知相关同事\n\n发邮件时可能会想带上当前版本的一些信息，如版本号、内部版本号等，可以用PlistBuddy实现读取甚至修改Plist文件。\n\n``` \nappInfoPlistPath=\"`pwd`/xxx/xxx-Info.plist\"\nbundleShortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${appInfoPlistPath})\nbundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${appInfoPlistPath})\n```\n\n之后便是发邮件：\n\n``` \npython sendEmail.py \"测试版本 iOS ${bundleShortVersion}(${bundleVersion})上传成功\" \"赶紧下载体验吧！http://fir.im/meijia\"\n```\n\n或者\n``` \npython sendEmail.py \"正式版本 iOS ${bundleShortVersion}(${bundleVersion})提交成功\" \"iOS ${bundleShortVersion} 提交成功！\"\n```\n\npython主要用smtplib，网上的文章大多都是旧的，特别是讲到SSL时特别复杂，其实具体看下smtplib的接口文档就可以实现了。另外有可能出现标题、内容乱码的现象。整合了下面的链接解决了：\n\n[python 发送邮件解决所有乱码问题]: http://outofmemory.cn/code-snippet/1464/python-send-youjian-resolve-suoyou-luanma-question\n[Unicode和Python的中文处理]: http://www.cnblogs.com/TsengYuen/archive/2012/05/22/2513290.html\n\n下面是实现了SSL Smtp登录的。\n\n``` \n#!/usr/bin/env python3\n#coding: utf-8\n\n# sendEmail title content\nimport sys\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.header import Header\n\nsender = 'xxxxxx@qq.com;'\nreceiver = 'xxx@qq.com;'\nsmtpserver = 'smtp.qq.com'\n#smtpserver = 'smtp.exmail.qq.com'\n\nusername = sender\npassword = 'xxxxxx'\n\ndef send_mail(title, content):\n\n    try:\n        msg = MIMEText(content,'plain','utf-8')\n        if not isinstance(title,unicode):\n            title = unicode(title, 'utf-8')\n        msg['Subject'] = title\n        msg['From'] = sender\n        msg['To'] = receiver\n        msg[\"Accept-Language\"]=\"zh-CN\"\n        msg[\"Accept-Charset\"]=\"ISO-8859-1,utf-8\"\n\n        smtp = smtplib.SMTP_SSL(smtpserver,465)\n        smtp.login(username, password)\n        smtp.sendmail(sender, receiver, msg.as_string())\n        smtp.quit()\n        return True\n    except Exception, e:\n        print str(e)\n        return False\n\nif send_mail(sys.argv[1], sys.argv[2]):\n    print \"done!\"\nelse:\n    print \"failed!\"\n```\n\n可以赋值给msg['CC']实现抄送，经过测试，抄送的人过多会有一部分不成功，网上查了是这个库的bug。发送多个人用分号，另外末尾也要用分号。\n\n## 上传符号表到Bugly\n\n用于分析解决崩溃bug挺好用的，而且他们的客服也很及时。\n发现他们的2.4.1版本有问题，反馈后他们给了2.4.3版本，经测试没问题。\n\n1. 在Bugly官网下载[符号表工具](https://bugly.qq.com/whitebook)\n\n2. 设置settings.txt\n\n3. 调用命令\n\n```\njava -jar buglySymboliOS.jar -d -i $dSYM -u -id \"xxxxxxxxx\" -key \"xxxxxxxxxxx\" -package \"com.xxx.xxx\" -version \"$version\" ­-o \"xxx.zip\"\n```\n注意版本号之类的要设置对。\n\n# 简单例子\n\n清理构建目录：\n```\nxcodebuild clean -configuration Release -alltargets\n```\n归档（其他参数不指定的话，默认用的是.xcworkspace或.xcodeproj文件里的配置）\n```\nxcodebuild archive -workspace xxx.xcworkspace -scheme xxx -configuration Release -archivePath ./xxx.xcarchive\n```\n导出IPA\n```\nxcodebuild -exportArchive -archivePath ./xxx.xcarchive -exportOptionsPlist ./AdHocExportOptions.plist -exportPath ./\n```\n上传FIR\n```\nfir publish ./xxx.ipa -T xxxxxx\n```\n提交AppStore\n```\n/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --validate-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml\n/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --upload-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml\n```\n发邮件\n```\npython sendEmail.py \"邮件内容\" \"用户名\" \"密码\"\n```\n上传符号表\n```\njava -jar buglySymboliOS.jar -d -i $dSYM -u -id \"xxxxxxxxx\" -key \"xxxxxxxxxxx\" -package \"com.xxx.xxx\" -version \"$version\" ­-o \"xxx.zip\"\n```\n\n# 对比实验\n\n为了了解一些区别，我做了几个对比。我这里定义下三种方式，方便下面说明。\n\n- xcodebuild+xcrun（xcodebuild build和xcrun）\n- 只用xcodebuild（archive和exportArchive），\n- Xcode。\n\n## 三种方式的对比\n\n我使用xcodebuild+xcrun、仅xcodebuild、Xcode三种分别对相同代码和配置进行操作，根据结果做比较：\n\n- xcodebuild+xcrun\n\nipa：40.7MB，.app：93.3MB，编译耗时：8m31s，打包耗时：15s。\n\n- 仅xcodebuild\n\nipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m24s，打包耗时：26s。\n\n- Xcode\n\nipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m40s，打包耗时：30s。\n\nXcode生成的`.xcarchive`文件可以在以下路径看到：\n\n> /Users/double/Library/Developer/Xcode/Archives\n\n可以看出，<u>仅使用xcodebuild的结果和使用Xcode编译打包的结果是一致的</u>，并且最终的ipa也可以正常安装使用。而第一种xcodebuild+xcrun的结果略大些，但是ipa也是可以正常使用的。这时需要了解下他们的区别。\n\n## xcodebuild+xcrun和仅xcodebuild的比较\n\n- 使用xcrun打包方式二产生的.xcarchive中的.app\n\n打包生成的.ipa文件大小同样为37.3MB，与方式二使用Xcodebuild -exportArchive的结果一致！这样说明：**使用xcrun的打包方法是正常的**，和xcodebuild -exportArchive的结果一致，而且**.ipa包仅和.app有关**。那么说明，<u>这两种方式的不同仅在于xcodebuild build和xcodebuild archive之间的不同</u>。\n\n- 删除.xcarchive中其他文件然后`exportArchive`\n\n这时命令提示错误，但是上面我们已经得出结论.ipa的生成只和.app有关，所以可能的原因是，这个`exportArchive`命令会检查.archive的完整性和正确性，防止生成的.archive不完整或者是伪造的。下面做个实验看下。\n\n## 命令到底做了什么\n根据命令运行时输出的内容，看下中间做了什么\n\n- xcrun -sdk iphoneos PackageApplication -v xxx.app -o xxx.ipa\n\n``` \nPackaging application: '/xxx/xxx.app'\nArguments: output=/xxx/xxx.ipa  verbose=1  \nEnvironment variables:\nSDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk\n......\nSHELL = /bin/bash\n\nOutput directory: '/xxx/xxx.ipa'\nTemporary Directory: '/var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK'  (will NOT be deleted on exit when verbose set)\n+ /bin/cp -Rp /xxx/xxx.app /var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK/Payload\nProgram /bin/cp returned 0 : []\n### Checking original app\n+ /usr/bin/codesign --verify -vvvv /xxx/xxx.app\nProgram /usr/bin/codesign returned 0 : [/xxx/xxx.app: valid on disk\n/xxx/xxx.xcarchive/Products/Applications/xxx.app: satisfies its Designated Requirement\n]\nDone checking the original app\n+ /usr/bin/zip --symlinks --verbose --recurse-paths /Users/double/Desktop/1.ipa .\nProgram /usr/bin/zip returned 0 : [  adding: Payload/\t(in=0) (out=0) (stored 0%)\n  adding: Payload/xxx.app/\t(in=0) (out=0) (stored 0%)\n  ......\n```\n\n主要检查了环境变量，然后验证签名，然后压缩（看到了吗，居然是/usr/bin/zip），后面adding的基本都是.nib和.png等的压缩。看起来.archive只是一种压缩形式，包含了.app、.dSYM、.plist和其他一些文件。\n\n这里的`codesign`工具就是签名相关的，可以查看说明：\n\n``` \nSYNOPSIS\n     codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]\n     codesign -v [-R requirement] [-v] [path|pid ...]\n     codesign -d [-v] [path|pid ...]\n     codesign -h [-v] [pid ...]\n```\n\n-s是签名，-v是验证。所以可以在.app生成后再签名。\n\n- xcodebuild clean\n\n清理工作，根据参数删除指定的workplace、target、configuration（release或debug） 的中间文件，都是工程目录下的build文件夹。\n\n- xcodebuild archive\n\n下面是里面主要的步骤：\n\n1. Create product structure 创建.app文件\n2. CompileC 编译文件（clang编译，指定了编译的SDK版本和指令集）\n3. Ld\n4. CreateUniversalBinary (lipo)\n5. CompileStoryboard (ibtool )\n6. CompileAssetCatalog (actool )\n7. ProcessInfoPlistFile (builtin-infoPlistUtility )\n8. GenerateDSYMFile (dsymutil )\n9. LinkStoryboards(ibtool )\n10. Strip \n11. ProcessProductPackaging (builtin-productPackagingUtility )\n12. CodeSign (codesign --force --sign)\n13. Validate (builtin-validationUtility )\n\n# 总结\n\n呼呼写了这么多，终于到总结部分了。这个过程学到了很多东西，脚本成果确实方便了很多，减少了编译打包过程中人工监守、人工操作的成本，并且测试和提交到appStore的包都验证过可用。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"an-automated-script-for-building-archiving-submission-sending-emails","published":1,"updated":"2020-02-25T15:23:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7px001u07eieax4giut","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Shell脚本涉及的工具<ul>\n<li>xcodebuild和xcrun</li>\n<li>altool</li>\n<li>fir-cli</li>\n<li>PlistBuddy</li>\n</ul>\n</li>\n<li>一些概念的区别</li>\n<li>具体实现<ul>\n<li>xcodebuild和xcrun</li>\n<li>准备Plist文件</li>\n<li>获取命令行参数</li>\n<li>清理构建目录</li>\n<li>编译打包成Archive</li>\n<li>将Archive导出</li>\n<li>上传到Fir</li>\n<li>验证并上传到App Store</li>\n<li>邮件通知相关同事</li>\n<li>上传符号表到Bugly</li>\n</ul>\n</li>\n<li>简单例子</li>\n<li>对比实验<ul>\n<li>三种方式的对比</li>\n<li>xcodebuild+xcrun和仅xcodebuild的比较</li>\n<li>命令到底做了什么</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在涉及到编译打包的工作主要是以下两个：</p>\n<ol>\n<li>提交测试版本给测试同事</li>\n<li>提交App Store审核</li>\n</ol>\n<p>两个流程分别是：</p>\n<ul>\n<li>修改证书和配置文件，然后「Product -&gt; Archive」编译打包，之后在自动弹出的 「Organizer」 中进行选择，根据需要导出 ad hoc enterprise 类型的 ipa 包。等待导出之后再提交到Fir上，等Fir提交完成就需要告知测试同事。整个流程下来一般都要半个多小时，而且需要人工监守操作。</li>\n<li>第二个也是差不多，打包完之后需要操作几个步骤然后上传到App Store，上传时间较长，而且中间可能会有错误需要处理。上传后等待苹果处理二进制包，苹果处理后上去选择构建包，点击提交审核。</li>\n</ul>\n<p>所以研究下自动化编译打包，提高下效率，减少人工操作成本。</p>\n<p>主要有两种实现途径，AppleScript和Shell脚本，<code>AppleScript</code>没怎么研究，网上说是很强大的脚本语言。</p>\n<p>下面主要讲Shell脚本的实现，网上也有人实现了并托管在<code>github</code>上，可以参考下。</p>\n<blockquote>\n<p><a href=\"https://github.com/webfrogs/xcode_shell\" target=\"_blank\" rel=\"noopener\">https://github.com/webfrogs/xcode_shell</a></p>\n</blockquote>\n<h1 id=\"Shell脚本涉及的工具\"><a href=\"#Shell脚本涉及的工具\" class=\"headerlink\" title=\"Shell脚本涉及的工具\"></a>Shell脚本涉及的工具</h1><p>主要是以下几个工具：</p>\n<ol>\n<li>xcodebuild</li>\n<li>xcrun</li>\n<li>altool（提交到App Store使用）</li>\n<li>fir-cli（上传到fir时使用）</li>\n<li>Python的smtplib（之前已经写过python的发邮件了，所以就直接用没有用Shell写。）</li>\n<li>PlistBuddy</li>\n<li>BuglySymboliOS（Bugly的符号表工具包）</li>\n</ol>\n<h2 id=\"xcodebuild和xcrun\"><a href=\"#xcodebuild和xcrun\" class=\"headerlink\" title=\"xcodebuild和xcrun\"></a>xcodebuild和xcrun</h2><p><code>xcodebuild</code>和<code>xcrun</code>都是来自<code>Command Line Tools</code>，Xcode自带，如果没有可以通过以下命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>或者在下面的链接下载安装：</p>\n<blockquote>\n<p> <a href=\"https://developer.apple.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/downloads/</a> </p>\n</blockquote>\n<p>安装完可在以下路径看到这两个工具：</p>\n<blockquote>\n<p>/Applications/Xcode.app/Contents/Developer/usr/bin/</p>\n</blockquote>\n<ul>\n<li>xcodebuild<br>主要是用来编译，打包成Archive和导出ipa包。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html</a></p>\n</blockquote>\n<p>可以执行 <code>xcodebuild -help</code> 查看，主要展示了几种用法、一些可选项，最后是比较重要的exportOptionsPlist文件的一些可选key，这个文件在后面导出ipa包会用到。</p>\n<p>主要下面三个查看的命令比较重要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-showsdks                           display a compact list of the installed SDKs</span><br><span class=\"line\">-showBuildSettings                  display a list of build settings and values</span><br><span class=\"line\">-list                               lists the targets and configurations in a project, or the schemes in a workspace</span><br></pre></td></tr></table></figure>\n\n<p>后面两个需要在Xcode的project或者workspace目录下才能用。</p>\n<ul>\n<li>xcrun<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcrun -h</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>主要是打包，看网上比较多是用这个工具打包各种渠道包。</p>\n<h2 id=\"altool\"><a href=\"#altool\" class=\"headerlink\" title=\"altool\"></a>altool</h2><p>这个工具在网上搜索几乎没有什么结果，大概国内直接用命令行工具提交App Store的比较少。后来在StackOverflow上才找到相关的文档：</p>\n<blockquote>\n<p><a href=\"https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf\" target=\"_blank\" rel=\"noopener\">https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf</a></p>\n</blockquote>\n<p>在上面的文档第38页讲述了如何使用altool上传二进制文件。</p>\n<p>这个工具实际上是ApplicationLoader，打开Xcode-左上角Xcode-Open Developer Tool-Application Loader 可看到。有个“交付您的应用”操作，网上看到有人是直接用这个工具上传的。</p>\n<p>altool的路径是：</p>\n<blockquote>\n<p>/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Support/altool</p>\n</blockquote>\n<p>使用时会提示下面的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altool[] *** Error: Exception while launching iTunesTransporter: </span><br><span class=\"line\">Transporter not found at path: /usr/local/itms/bin/iTMSTransporter. </span><br><span class=\"line\">You should reinstall the application.</span><br></pre></td></tr></table></figure>\n\n<p>建立个软链接可解决（类似于Windows的快捷方式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms /usr/local/itms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fir-cli\"><a href=\"#fir-cli\" class=\"headerlink\" title=\"fir-cli\"></a>fir-cli</h2><p>安装时会提示各种权限不允许，可以执行下面命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;gem: --bindir /usr/local/bin&apos; &gt;&gt; ~/.gemrc</span><br><span class=\"line\">sudo &apos;gem install fir-cli</span><br></pre></td></tr></table></figure>\n\n<p>fir有提供Android Studio、Eclipse、gradle插件，可以看下。</p>\n<blockquote>\n<p><a href=\"http://fir.im/tools\" target=\"_blank\" rel=\"noopener\">http://fir.im/tools</a></p>\n</blockquote>\n<p>这是\b它的github地址，其中讲到有对?<code>xcodebuild</code>?原生指令进行了封装。</p>\n<blockquote>\n<p><a href=\"https://github.com/FIRHQ/fir-cli/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/FIRHQ/fir-cli/blob/master/README.md</a></p>\n</blockquote>\n<h2 id=\"PlistBuddy\"><a href=\"#PlistBuddy\" class=\"headerlink\" title=\"PlistBuddy\"></a>PlistBuddy</h2><p>Plist在Mac OSX系统中起着举足轻重的作用，系统和程序使用Plist文件来存储自己的安装/配置/属性等信息。而PlistBuddy是Mac里一个用于命令行下读写plist文件的工具，在/usr/libexec/下。可以通过它读取或修改plist文件的内容。</p>\n<p>这里我仅通过它来获取内部版本号、外部版本号。在一些文章中见过用来修改plist文件的信息来导出出不同需要的包。</p>\n<h1 id=\"一些概念的区别\"><a href=\"#一些概念的区别\" class=\"headerlink\" title=\"一些概念的区别\"></a>一些概念的区别</h1><p>Workspace、Project、Scheme、Target的区别。</p>\n<p>下面是官方文档：</p>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1</a></p>\n</blockquote>\n<p>下面从上往下大概说下，具体看文档比较好：</p>\n<ul>\n<li><p>Workspace<br><code>Workspace</code>是最大的集合，可以包含多个<code>Project</code>，可以管理不同的<code>Project</code>之间的关系。<code>Workspace</code>是以<code>xcworkspace</code>的文件形式存在的。（这点和<code>Project</code>一致）。<code>Workspace</code>的存在是为了解决原来仅有<code>Project</code>的时候不同的<code>Project</code>之间的引用和调用困难的问题。同时，一个<code>Workspace</code>的<code>Project</code>共用一个编译路径。比如使用CocoaPod、或者使用其他开发库/框架。</p>\n</li>\n<li><p>Project<br><code>Project</code>是一个仓库，包含编译一个或多个<code>product</code>所需的文件、资源和信息，保持和聚合这些元素间的关系。（每个<code>Target</code>能指定自己的<code>Build Settings</code>来覆盖<code>Project</code>的）</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>Source code, including header files and implementation files</li>\n<li>Libraries and frameworks, internal and external</li>\n<li>Resource files</li>\n<li>Image files</li>\n<li>Interface Builder (nib) files</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>Scheme<br><code>Scheme</code>包含了一些要构建的Scheme，一些构建时用到的设置，一些要运行的测试。同时只能有一个<code>Scheme</code>是有效的。</p>\n</li>\n<li><p>Target<br><code>Target</code>是对应了具体一个想要构建的<code>Product</code>,包含了一些构建这个<code>Product</code>所需的配置和文件（<code>build settings</code>和<code>build phases</code>）。一个<code>Project</code>可以包含多个<code>Target</code>。</p>\n</li>\n</ul>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><p>看起来有两种实现方法：</p>\n<ul>\n<li>网上可以查到的文章，大多数都是用<code>xcodebuild</code>和<code>xcrun</code>实现的，比如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -workspace XXX -scheme XXX -configuration Release</span><br><span class=\"line\">xcrun -sdk iphoneos PackageApplication -v &quot;/XXX/XXX.app&quot; -o &quot;/XXX/XXX&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>这些文章都是相对比早期的，大多数用于打包不同渠道包。</p>\n<ul>\n<li>另一种是<code>xcodebuild</code>的<code>archive</code>和<code>-exportArchive</code>，只有一两篇文章是用这个，而且也过时了，因为现在最新是需要用<code>-exportOptionsPlist</code>这个选项。</li>\n</ul>\n<p>我用的是第二种，并用上<code>-exportOptionsPlist</code>选项，后面我会简单给下这两种的结果比较。脚本流程是：</p>\n<ol>\n<li>准备两个<code>Plist</code>文件，用于导出不同<code>ipa</code>包时使用。</li>\n<li>获取命令行参数，区分上传到<code>Fir</code>还是<code>App Store</code></li>\n<li>清理构建目录</li>\n<li>编译打包</li>\n<li>导出包</li>\n<li>上传到<code>Fir</code>或者验证并上传到<code>App Store</code></li>\n<li>发邮件通知</li>\n</ol>\n<h2 id=\"准备Plist文件\"><a href=\"#准备Plist文件\" class=\"headerlink\" title=\"准备Plist文件\"></a>准备Plist文件</h2><p>根据<code>xcodebuild -help</code>提供的可选key可以知道，<code>compileBitcode</code>、<code>embedOnDemandResourcesAssetPacksInBundle</code>、<code>iCloudContainerEnvironment</code>、<code>manifest</code>、<code>onDemandResourcesAssetPacksBaseURL</code>、<code>thinning</code>这几个key用于非<code>App Store</code>导出的；<code>uploadBitcode</code>、<code>uploadSymbols</code>用于<code>App Store</code>导出；<code>method</code>、<code>teamID</code>共用。</p>\n<p>method的可选值为:</p>\n<blockquote>\n<p>app-store, package, ad-hoc, enterprise, development, and developer-id</p>\n</blockquote>\n<p>所以我建了两个文件：<code>AppStoreExportOptions.plist</code>、<code>AdHocExportOptions.plist</code>。</p>\n<p>AppStoreExportOptions.plist：method＝app-store，uploadBitcode＝YES，uploadSymbols＝YES</p>\n<p>AdHocExportOptions.plist：method＝ad-hoc，compileBitcode＝NO</p>\n<h2 id=\"获取命令行参数\"><a href=\"#获取命令行参数\" class=\"headerlink\" title=\"获取命令行参数\"></a>获取命令行参数</h2><p>用<code>Shell</code>内置的<code>getopts</code>命令，这属于Shell的范畴就不多讲了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $# -lt 1 ];then</span><br><span class=\"line\">    echo &quot;Error! Should enter the archive type (AdHoc or AppStore).&quot;</span><br><span class=\"line\">    echo &quot;&quot;</span><br><span class=\"line\">    exit 2</span><br><span class=\"line\">fi</span><br><span class=\"line\">while getopts &apos;t:&apos; optname</span><br><span class=\"line\">do</span><br><span class=\"line\">    case &quot;$optname&quot; in</span><br><span class=\"line\">    t)</span><br><span class=\"line\">        if [ $&#123;OPTARG&#125; != &quot;AdHoc&quot; ] &amp;&amp; [ $&#123;OPTARG&#125; != &quot;AppStore&quot; ];then</span><br><span class=\"line\">            echo &quot;invalid parameter of $OPTARG&quot;</span><br><span class=\"line\">            echo &quot;&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        type=$&#123;OPTARG&#125;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo &quot;Error! Unknown error while processing options&quot;</span><br><span class=\"line\">        echo &quot;&quot;</span><br><span class=\"line\">        exit 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清理构建目录\"><a href=\"#清理构建目录\" class=\"headerlink\" title=\"清理构建目录\"></a>清理构建目录</h2><p>就如在Xcode操作「Product -&gt; Clean」。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_path=&quot;/XXX/XXX&quot;</span><br><span class=\"line\">configuration=&quot;Release&quot;</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$configuration&quot; -alltargets &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>log_path是一个文档路径，只是用来记录命令的输出，因为都打在终端会很多，另外也方便后面分析。后面的命令也是如此。这里面带的选项可以根据需要参考<code>xcodebuild -help</code>的信息。</p>\n<h2 id=\"编译打包成Archive\"><a href=\"#编译打包成Archive\" class=\"headerlink\" title=\"编译打包成Archive\"></a>编译打包成Archive</h2><p>就如在Xcode操作「Product -&gt; Archive」</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspaceName=&quot;XXX.xcworkspace&quot;</span><br><span class=\"line\">scheme=&quot;XXX&quot;</span><br><span class=\"line\">configurationBuildDir=&quot;XXX/build&quot;</span><br><span class=\"line\">codeSignIdentity=&quot;iPhone Distribution: XXX, Ltd. (xxxxxxxxxx)&quot;</span><br><span class=\"line\">adHocProvisioningProfile=&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span><br><span class=\"line\">appStoreProvisioningProfile=&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span><br><span class=\"line\">configuration=&quot;Release&quot;</span><br><span class=\"line\">archivePath=&quot;/xxx/XXX.xcarchive&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild archive -workspace &quot;$workspaceName&quot; -scheme &quot;$scheme&quot; -configuration &quot;$configuration&quot; -archivePath &quot;$archivePath&quot; CONFIGURATION_BUILD_DIR=&quot;$configurationBuildDir&quot; CODE_SIGN_IDENTITY=&quot;$codeSignIdentity&quot; PROVISIONING_PROFILE=&quot;$provisioningProfile&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>CONFIGURATION_BUILD_DIR</code>是中间文件生成的路径，可以不指定；<code>CODE_SIGN_IDENTITY</code>是证书名（在对应<code>TARGETS</code>的<code>Build Settings</code>中选择完<code>Code Sinning</code>，再点击选择<code>Other...</code>，就可以得到这串东西）；<code>PROVISIONING_PROFILE</code>是配置文件（获取方法同CODE_SIGN_IDENTITY，格式一般是<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>）。还可以添加其他参数，不设置的都是默认使用项目Build Settings里面的配置，包括<code>CODE_SIGN_IDENTITY</code>和<code>PROVISIONING_PROFILE</code>。</p>\n<p>如果是workspace就用<code>-workspace</code>，就像编译带有<code>CocoaPods</code>的项目，如果是普通项目则用<code>-project</code>。</p>\n<p>执行完会生成一个.xcarchive文件和build文件夹如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">build文件夹</span><br><span class=\"line\">\t|------.a</span><br><span class=\"line\">\t|------.app</span><br><span class=\"line\">\t|------.app.dSYM</span><br><span class=\"line\">\t|------.swiftmodule文件夹</span><br><span class=\"line\">\t\t|------arm.swiftdoc</span><br><span class=\"line\">\t\t|------arm.swiftmodule</span><br><span class=\"line\">\t\t|------arm64.swiftdoc</span><br><span class=\"line\">\t\t|------arm64.swiftmodule</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将Archive导出\"><a href=\"#将Archive导出\" class=\"headerlink\" title=\"将Archive导出\"></a>将Archive导出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath &quot;$archivePath&quot; -exportOptionsPlist &quot;$exportOptionsPlist&quot; -exportPath &quot;/XXX/XXX&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>$exportOptionsPlist</code>是对应使用的Plist的完整路径（包括文件名）。</p>\n<p>然后就会在指定的<code>exportPath</code>路径下生成.ipa文件。</p>\n<h2 id=\"上传到Fir\"><a href=\"#上传到Fir\" class=\"headerlink\" title=\"上传到Fir\"></a>上传到Fir</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firApiToken=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class=\"line\">ipaPath=&quot;/xxx/xxx.ipa&quot;</span><br><span class=\"line\">fir publish &quot;$ipaPath&quot; -T &quot;$firApiToken&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p><code>firApiToken</code>在登录Fir后，右上角-API token看到。</p>\n<h2 id=\"验证并上传到App-Store\"><a href=\"#验证并上传到App-Store\" class=\"headerlink\" title=\"验证并上传到App Store\"></a>验证并上传到App Store</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\">$&#123;altoolPath&#125; --validate-app -f $&#123;ipaPath&#125; -u xxxxxx -p xxxxxx -t ios --output-format xml &gt;&gt;</span><br><span class=\"line\">$&#123;altoolPath&#125; --upload-app -f $&#123;ipaPath&#125; -u xxxxxx -p xxxxxx -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>在上面的PDF文档第38页讲明了用法和各个可选项，具体可以看下PDF。需要说明的是，生成的结果是xml打印在终端，可以保存到文档再解析出key来判断是否成功，目前这步还没做。</p>\n<p>这是成功的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;os-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;10.11.2&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;success-message&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;No errors validating archive at /XXX/XXX.ipa&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;tool-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;1.1.902&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;xcode-versions&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;path&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;/Applications/Xcode.app&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;version.plist&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;BuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProductBuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7C68&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProjectName&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;IDEFrameworks&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;SourceVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548000000000000&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这是失败的结果（找不到iTMSTransporter的情况，用前面说的ln -s解决）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;os-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;10.11.2&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;product-errors&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;code&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;integer&gt;-10001&lt;/integer&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;message&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;userInfo&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;MZUnderlyingException&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;NSLocalizedDescription&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;NSLocalizedFailureReason&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">\t&lt;key&gt;tool-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;1.1.902&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;xcode-versions&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;path&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;/Applications/Xcode.app&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;version.plist&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;BuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProductBuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7C68&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProjectName&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;IDEFrameworks&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;SourceVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548000000000000&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可见，成功会有个<code>success-message</code>的key，而失败会有<code>product-errors</code>的key。</p>\n<h2 id=\"邮件通知相关同事\"><a href=\"#邮件通知相关同事\" class=\"headerlink\" title=\"邮件通知相关同事\"></a>邮件通知相关同事</h2><p>发邮件时可能会想带上当前版本的一些信息，如版本号、内部版本号等，可以用PlistBuddy实现读取甚至修改Plist文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInfoPlistPath=&quot;`pwd`/xxx/xxx-Info.plist&quot;</span><br><span class=\"line\">bundleShortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;appInfoPlistPath&#125;)</span><br><span class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;appInfoPlistPath&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>之后便是发邮件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;测试版本 iOS $&#123;bundleShortVersion&#125;($&#123;bundleVersion&#125;)上传成功&quot; &quot;赶紧下载体验吧！http://fir.im/meijia&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;正式版本 iOS $&#123;bundleShortVersion&#125;($&#123;bundleVersion&#125;)提交成功&quot; &quot;iOS $&#123;bundleShortVersion&#125; 提交成功！&quot;</span><br></pre></td></tr></table></figure>\n\n<p>python主要用smtplib，网上的文章大多都是旧的，特别是讲到SSL时特别复杂，其实具体看下smtplib的接口文档就可以实现了。另外有可能出现标题、内容乱码的现象。整合了下面的链接解决了：</p>\n<p>下面是实现了SSL Smtp登录的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\">#coding: utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"># sendEmail title content</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import smtplib</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\"></span><br><span class=\"line\">sender = &apos;xxxxxx@qq.com;&apos;</span><br><span class=\"line\">receiver = &apos;xxx@qq.com;&apos;</span><br><span class=\"line\">smtpserver = &apos;smtp.qq.com&apos;</span><br><span class=\"line\">#smtpserver = &apos;smtp.exmail.qq.com&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">username = sender</span><br><span class=\"line\">password = &apos;xxxxxx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def send_mail(title, content):</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        msg = MIMEText(content,&apos;plain&apos;,&apos;utf-8&apos;)</span><br><span class=\"line\">        if not isinstance(title,unicode):</span><br><span class=\"line\">            title = unicode(title, &apos;utf-8&apos;)</span><br><span class=\"line\">        msg[&apos;Subject&apos;] = title</span><br><span class=\"line\">        msg[&apos;From&apos;] = sender</span><br><span class=\"line\">        msg[&apos;To&apos;] = receiver</span><br><span class=\"line\">        msg[&quot;Accept-Language&quot;]=&quot;zh-CN&quot;</span><br><span class=\"line\">        msg[&quot;Accept-Charset&quot;]=&quot;ISO-8859-1,utf-8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        smtp = smtplib.SMTP_SSL(smtpserver,465)</span><br><span class=\"line\">        smtp.login(username, password)</span><br><span class=\"line\">        smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class=\"line\">        smtp.quit()</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    except Exception, e:</span><br><span class=\"line\">        print str(e)</span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">if send_mail(sys.argv[1], sys.argv[2]):</span><br><span class=\"line\">    print &quot;done!&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print &quot;failed!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>可以赋值给msg[‘CC’]实现抄送，经过测试，抄送的人过多会有一部分不成功，网上查了是这个库的bug。发送多个人用分号，另外末尾也要用分号。</p>\n<h2 id=\"上传符号表到Bugly\"><a href=\"#上传符号表到Bugly\" class=\"headerlink\" title=\"上传符号表到Bugly\"></a>上传符号表到Bugly</h2><p>用于分析解决崩溃bug挺好用的，而且他们的客服也很及时。<br>发现他们的2.4.1版本有问题，反馈后他们给了2.4.3版本，经测试没问题。</p>\n<ol>\n<li><p>在Bugly官网下载<a href=\"https://bugly.qq.com/whitebook\" target=\"_blank\" rel=\"noopener\">符号表工具</a></p>\n</li>\n<li><p>设置settings.txt</p>\n</li>\n<li><p>调用命令</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar buglySymboliOS.jar -d -i $dSYM -u -id &quot;xxxxxxxxx&quot; -key &quot;xxxxxxxxxxx&quot; -package &quot;com.xxx.xxx&quot; -version &quot;$version&quot; ­-o &quot;xxx.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<p>注意版本号之类的要设置对。</p>\n<h1 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h1><p>清理构建目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -configuration Release -alltargets</span><br></pre></td></tr></table></figure>\n\n<p>归档（其他参数不指定的话，默认用的是.xcworkspace或.xcodeproj文件里的配置）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild archive -workspace xxx.xcworkspace -scheme xxx -configuration Release -archivePath ./xxx.xcarchive</span><br></pre></td></tr></table></figure>\n\n<p>导出IPA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath ./xxx.xcarchive -exportOptionsPlist ./AdHocExportOptions.plist -exportPath ./</span><br></pre></td></tr></table></figure>\n\n<p>上传FIR</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish ./xxx.ipa -T xxxxxx</span><br></pre></td></tr></table></figure>\n\n<p>提交AppStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --validate-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml</span><br><span class=\"line\">/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --upload-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>发邮件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;邮件内容&quot; &quot;用户名&quot; &quot;密码&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上传符号表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar buglySymboliOS.jar -d -i $dSYM -u -id &quot;xxxxxxxxx&quot; -key &quot;xxxxxxxxxxx&quot; -package &quot;com.xxx.xxx&quot; -version &quot;$version&quot; ­-o &quot;xxx.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对比实验\"><a href=\"#对比实验\" class=\"headerlink\" title=\"对比实验\"></a>对比实验</h1><p>为了了解一些区别，我做了几个对比。我这里定义下三种方式，方便下面说明。</p>\n<ul>\n<li>xcodebuild+xcrun（xcodebuild build和xcrun）</li>\n<li>只用xcodebuild（archive和exportArchive），</li>\n<li>Xcode。</li>\n</ul>\n<h2 id=\"三种方式的对比\"><a href=\"#三种方式的对比\" class=\"headerlink\" title=\"三种方式的对比\"></a>三种方式的对比</h2><p>我使用xcodebuild+xcrun、仅xcodebuild、Xcode三种分别对相同代码和配置进行操作，根据结果做比较：</p>\n<ul>\n<li>xcodebuild+xcrun</li>\n</ul>\n<p>ipa：40.7MB，.app：93.3MB，编译耗时：8m31s，打包耗时：15s。</p>\n<ul>\n<li>仅xcodebuild</li>\n</ul>\n<p>ipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m24s，打包耗时：26s。</p>\n<ul>\n<li>Xcode</li>\n</ul>\n<p>ipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m40s，打包耗时：30s。</p>\n<p>Xcode生成的<code>.xcarchive</code>文件可以在以下路径看到：</p>\n<blockquote>\n<p>/Users/double/Library/Developer/Xcode/Archives</p>\n</blockquote>\n<p>可以看出，<u>仅使用xcodebuild的结果和使用Xcode编译打包的结果是一致的</u>，并且最终的ipa也可以正常安装使用。而第一种xcodebuild+xcrun的结果略大些，但是ipa也是可以正常使用的。这时需要了解下他们的区别。</p>\n<h2 id=\"xcodebuild-xcrun和仅xcodebuild的比较\"><a href=\"#xcodebuild-xcrun和仅xcodebuild的比较\" class=\"headerlink\" title=\"xcodebuild+xcrun和仅xcodebuild的比较\"></a>xcodebuild+xcrun和仅xcodebuild的比较</h2><ul>\n<li>使用xcrun打包方式二产生的.xcarchive中的.app</li>\n</ul>\n<p>打包生成的.ipa文件大小同样为37.3MB，与方式二使用Xcodebuild -exportArchive的结果一致！这样说明：<strong>使用xcrun的打包方法是正常的</strong>，和xcodebuild -exportArchive的结果一致，而且<strong>.ipa包仅和.app有关</strong>。那么说明，<u>这两种方式的不同仅在于xcodebuild build和xcodebuild archive之间的不同</u>。</p>\n<ul>\n<li>删除.xcarchive中其他文件然后<code>exportArchive</code></li>\n</ul>\n<p>这时命令提示错误，但是上面我们已经得出结论.ipa的生成只和.app有关，所以可能的原因是，这个<code>exportArchive</code>命令会检查.archive的完整性和正确性，防止生成的.archive不完整或者是伪造的。下面做个实验看下。</p>\n<h2 id=\"命令到底做了什么\"><a href=\"#命令到底做了什么\" class=\"headerlink\" title=\"命令到底做了什么\"></a>命令到底做了什么</h2><p>根据命令运行时输出的内容，看下中间做了什么</p>\n<ul>\n<li>xcrun -sdk iphoneos PackageApplication -v xxx.app -o xxx.ipa</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Packaging application: &apos;/xxx/xxx.app&apos;</span><br><span class=\"line\">Arguments: output=/xxx/xxx.ipa  verbose=1  </span><br><span class=\"line\">Environment variables:</span><br><span class=\"line\">SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk</span><br><span class=\"line\">......</span><br><span class=\"line\">SHELL = /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">Output directory: &apos;/xxx/xxx.ipa&apos;</span><br><span class=\"line\">Temporary Directory: &apos;/var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK&apos;  (will NOT be deleted on exit when verbose set)</span><br><span class=\"line\">+ /bin/cp -Rp /xxx/xxx.app /var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK/Payload</span><br><span class=\"line\">Program /bin/cp returned 0 : []</span><br><span class=\"line\">### Checking original app</span><br><span class=\"line\">+ /usr/bin/codesign --verify -vvvv /xxx/xxx.app</span><br><span class=\"line\">Program /usr/bin/codesign returned 0 : [/xxx/xxx.app: valid on disk</span><br><span class=\"line\">/xxx/xxx.xcarchive/Products/Applications/xxx.app: satisfies its Designated Requirement</span><br><span class=\"line\">]</span><br><span class=\"line\">Done checking the original app</span><br><span class=\"line\">+ /usr/bin/zip --symlinks --verbose --recurse-paths /Users/double/Desktop/1.ipa .</span><br><span class=\"line\">Program /usr/bin/zip returned 0 : [  adding: Payload/\t(in=0) (out=0) (stored 0%)</span><br><span class=\"line\">  adding: Payload/xxx.app/\t(in=0) (out=0) (stored 0%)</span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure>\n\n<p>主要检查了环境变量，然后验证签名，然后压缩（看到了吗，居然是/usr/bin/zip），后面adding的基本都是.nib和.png等的压缩。看起来.archive只是一种压缩形式，包含了.app、.dSYM、.plist和其他一些文件。</p>\n<p>这里的<code>codesign</code>工具就是签名相关的，可以查看说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]</span><br><span class=\"line\">     codesign -v [-R requirement] [-v] [path|pid ...]</span><br><span class=\"line\">     codesign -d [-v] [path|pid ...]</span><br><span class=\"line\">     codesign -h [-v] [pid ...]</span><br></pre></td></tr></table></figure>\n\n<p>-s是签名，-v是验证。所以可以在.app生成后再签名。</p>\n<ul>\n<li>xcodebuild clean</li>\n</ul>\n<p>清理工作，根据参数删除指定的workplace、target、configuration（release或debug） 的中间文件，都是工程目录下的build文件夹。</p>\n<ul>\n<li>xcodebuild archive</li>\n</ul>\n<p>下面是里面主要的步骤：</p>\n<ol>\n<li>Create product structure 创建.app文件</li>\n<li>CompileC 编译文件（clang编译，指定了编译的SDK版本和指令集）</li>\n<li>Ld</li>\n<li>CreateUniversalBinary (lipo)</li>\n<li>CompileStoryboard (ibtool )</li>\n<li>CompileAssetCatalog (actool )</li>\n<li>ProcessInfoPlistFile (builtin-infoPlistUtility )</li>\n<li>GenerateDSYMFile (dsymutil )</li>\n<li>LinkStoryboards(ibtool )</li>\n<li>Strip </li>\n<li>ProcessProductPackaging (builtin-productPackagingUtility )</li>\n<li>CodeSign (codesign –force –sign)</li>\n<li>Validate (builtin-validationUtility )</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>呼呼写了这么多，终于到总结部分了。这个过程学到了很多东西，脚本成果确实方便了很多，减少了编译打包过程中人工监守、人工操作的成本，并且测试和提交到appStore的包都验证过可用。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Shell脚本涉及的工具<ul>\n<li>xcodebuild和xcrun</li>\n<li>altool</li>\n<li>fir-cli</li>\n<li>PlistBuddy</li>\n</ul>\n</li>\n<li>一些概念的区别</li>\n<li>具体实现<ul>\n<li>xcodebuild和xcrun</li>\n<li>准备Plist文件</li>\n<li>获取命令行参数</li>\n<li>清理构建目录</li>\n<li>编译打包成Archive</li>\n<li>将Archive导出</li>\n<li>上传到Fir</li>\n<li>验证并上传到App Store</li>\n<li>邮件通知相关同事</li>\n<li>上传符号表到Bugly</li>\n</ul>\n</li>\n<li>简单例子</li>\n<li>对比实验<ul>\n<li>三种方式的对比</li>\n<li>xcodebuild+xcrun和仅xcodebuild的比较</li>\n<li>命令到底做了什么</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现在涉及到编译打包的工作主要是以下两个：</p>\n<ol>\n<li>提交测试版本给测试同事</li>\n<li>提交App Store审核</li>\n</ol>\n<p>两个流程分别是：</p>\n<ul>\n<li>修改证书和配置文件，然后「Product -&gt; Archive」编译打包，之后在自动弹出的 「Organizer」 中进行选择，根据需要导出 ad hoc enterprise 类型的 ipa 包。等待导出之后再提交到Fir上，等Fir提交完成就需要告知测试同事。整个流程下来一般都要半个多小时，而且需要人工监守操作。</li>\n<li>第二个也是差不多，打包完之后需要操作几个步骤然后上传到App Store，上传时间较长，而且中间可能会有错误需要处理。上传后等待苹果处理二进制包，苹果处理后上去选择构建包，点击提交审核。</li>\n</ul>\n<p>所以研究下自动化编译打包，提高下效率，减少人工操作成本。</p>\n<p>主要有两种实现途径，AppleScript和Shell脚本，<code>AppleScript</code>没怎么研究，网上说是很强大的脚本语言。</p>\n<p>下面主要讲Shell脚本的实现，网上也有人实现了并托管在<code>github</code>上，可以参考下。</p>\n<blockquote>\n<p><a href=\"https://github.com/webfrogs/xcode_shell\" target=\"_blank\" rel=\"noopener\">https://github.com/webfrogs/xcode_shell</a></p>\n</blockquote>\n<h1 id=\"Shell脚本涉及的工具\"><a href=\"#Shell脚本涉及的工具\" class=\"headerlink\" title=\"Shell脚本涉及的工具\"></a>Shell脚本涉及的工具</h1><p>主要是以下几个工具：</p>\n<ol>\n<li>xcodebuild</li>\n<li>xcrun</li>\n<li>altool（提交到App Store使用）</li>\n<li>fir-cli（上传到fir时使用）</li>\n<li>Python的smtplib（之前已经写过python的发邮件了，所以就直接用没有用Shell写。）</li>\n<li>PlistBuddy</li>\n<li>BuglySymboliOS（Bugly的符号表工具包）</li>\n</ol>\n<h2 id=\"xcodebuild和xcrun\"><a href=\"#xcodebuild和xcrun\" class=\"headerlink\" title=\"xcodebuild和xcrun\"></a>xcodebuild和xcrun</h2><p><code>xcodebuild</code>和<code>xcrun</code>都是来自<code>Command Line Tools</code>，Xcode自带，如果没有可以通过以下命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>或者在下面的链接下载安装：</p>\n<blockquote>\n<p> <a href=\"https://developer.apple.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/downloads/</a> </p>\n</blockquote>\n<p>安装完可在以下路径看到这两个工具：</p>\n<blockquote>\n<p>/Applications/Xcode.app/Contents/Developer/usr/bin/</p>\n</blockquote>\n<ul>\n<li>xcodebuild<br>主要是用来编译，打包成Archive和导出ipa包。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html</a></p>\n</blockquote>\n<p>可以执行 <code>xcodebuild -help</code> 查看，主要展示了几种用法、一些可选项，最后是比较重要的exportOptionsPlist文件的一些可选key，这个文件在后面导出ipa包会用到。</p>\n<p>主要下面三个查看的命令比较重要：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-showsdks                           display a compact list of the installed SDKs</span><br><span class=\"line\">-showBuildSettings                  display a list of build settings and values</span><br><span class=\"line\">-list                               lists the targets and configurations in a project, or the schemes in a workspace</span><br></pre></td></tr></table></figure>\n\n<p>后面两个需要在Xcode的project或者workspace目录下才能用。</p>\n<ul>\n<li>xcrun<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcrun -h</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>主要是打包，看网上比较多是用这个工具打包各种渠道包。</p>\n<h2 id=\"altool\"><a href=\"#altool\" class=\"headerlink\" title=\"altool\"></a>altool</h2><p>这个工具在网上搜索几乎没有什么结果，大概国内直接用命令行工具提交App Store的比较少。后来在StackOverflow上才找到相关的文档：</p>\n<blockquote>\n<p><a href=\"https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf\" target=\"_blank\" rel=\"noopener\">https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf</a></p>\n</blockquote>\n<p>在上面的文档第38页讲述了如何使用altool上传二进制文件。</p>\n<p>这个工具实际上是ApplicationLoader，打开Xcode-左上角Xcode-Open Developer Tool-Application Loader 可看到。有个“交付您的应用”操作，网上看到有人是直接用这个工具上传的。</p>\n<p>altool的路径是：</p>\n<blockquote>\n<p>/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Support/altool</p>\n</blockquote>\n<p>使用时会提示下面的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altool[] *** Error: Exception while launching iTunesTransporter: </span><br><span class=\"line\">Transporter not found at path: /usr/local/itms/bin/iTMSTransporter. </span><br><span class=\"line\">You should reinstall the application.</span><br></pre></td></tr></table></figure>\n\n<p>建立个软链接可解决（类似于Windows的快捷方式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms /usr/local/itms</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fir-cli\"><a href=\"#fir-cli\" class=\"headerlink\" title=\"fir-cli\"></a>fir-cli</h2><p>安装时会提示各种权限不允许，可以执行下面命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;gem: --bindir /usr/local/bin&apos; &gt;&gt; ~/.gemrc</span><br><span class=\"line\">sudo &apos;gem install fir-cli</span><br></pre></td></tr></table></figure>\n\n<p>fir有提供Android Studio、Eclipse、gradle插件，可以看下。</p>\n<blockquote>\n<p><a href=\"http://fir.im/tools\" target=\"_blank\" rel=\"noopener\">http://fir.im/tools</a></p>\n</blockquote>\n<p>这是\b它的github地址，其中讲到有对?<code>xcodebuild</code>?原生指令进行了封装。</p>\n<blockquote>\n<p><a href=\"https://github.com/FIRHQ/fir-cli/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/FIRHQ/fir-cli/blob/master/README.md</a></p>\n</blockquote>\n<h2 id=\"PlistBuddy\"><a href=\"#PlistBuddy\" class=\"headerlink\" title=\"PlistBuddy\"></a>PlistBuddy</h2><p>Plist在Mac OSX系统中起着举足轻重的作用，系统和程序使用Plist文件来存储自己的安装/配置/属性等信息。而PlistBuddy是Mac里一个用于命令行下读写plist文件的工具，在/usr/libexec/下。可以通过它读取或修改plist文件的内容。</p>\n<p>这里我仅通过它来获取内部版本号、外部版本号。在一些文章中见过用来修改plist文件的信息来导出出不同需要的包。</p>\n<h1 id=\"一些概念的区别\"><a href=\"#一些概念的区别\" class=\"headerlink\" title=\"一些概念的区别\"></a>一些概念的区别</h1><p>Workspace、Project、Scheme、Target的区别。</p>\n<p>下面是官方文档：</p>\n<blockquote>\n<p><a href=\"https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Targets.html#//apple_ref/doc/uid/TP40009328-CH4-SW1</a></p>\n</blockquote>\n<p>下面从上往下大概说下，具体看文档比较好：</p>\n<ul>\n<li><p>Workspace<br><code>Workspace</code>是最大的集合，可以包含多个<code>Project</code>，可以管理不同的<code>Project</code>之间的关系。<code>Workspace</code>是以<code>xcworkspace</code>的文件形式存在的。（这点和<code>Project</code>一致）。<code>Workspace</code>的存在是为了解决原来仅有<code>Project</code>的时候不同的<code>Project</code>之间的引用和调用困难的问题。同时，一个<code>Workspace</code>的<code>Project</code>共用一个编译路径。比如使用CocoaPod、或者使用其他开发库/框架。</p>\n</li>\n<li><p>Project<br><code>Project</code>是一个仓库，包含编译一个或多个<code>product</code>所需的文件、资源和信息，保持和聚合这些元素间的关系。（每个<code>Target</code>能指定自己的<code>Build Settings</code>来覆盖<code>Project</code>的）</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>Source code, including header files and implementation files</li>\n<li>Libraries and frameworks, internal and external</li>\n<li>Resource files</li>\n<li>Image files</li>\n<li>Interface Builder (nib) files</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>Scheme<br><code>Scheme</code>包含了一些要构建的Scheme，一些构建时用到的设置，一些要运行的测试。同时只能有一个<code>Scheme</code>是有效的。</p>\n</li>\n<li><p>Target<br><code>Target</code>是对应了具体一个想要构建的<code>Product</code>,包含了一些构建这个<code>Product</code>所需的配置和文件（<code>build settings</code>和<code>build phases</code>）。一个<code>Project</code>可以包含多个<code>Target</code>。</p>\n</li>\n</ul>\n<h1 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h1><p>看起来有两种实现方法：</p>\n<ul>\n<li>网上可以查到的文章，大多数都是用<code>xcodebuild</code>和<code>xcrun</code>实现的，比如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -workspace XXX -scheme XXX -configuration Release</span><br><span class=\"line\">xcrun -sdk iphoneos PackageApplication -v &quot;/XXX/XXX.app&quot; -o &quot;/XXX/XXX&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>这些文章都是相对比早期的，大多数用于打包不同渠道包。</p>\n<ul>\n<li>另一种是<code>xcodebuild</code>的<code>archive</code>和<code>-exportArchive</code>，只有一两篇文章是用这个，而且也过时了，因为现在最新是需要用<code>-exportOptionsPlist</code>这个选项。</li>\n</ul>\n<p>我用的是第二种，并用上<code>-exportOptionsPlist</code>选项，后面我会简单给下这两种的结果比较。脚本流程是：</p>\n<ol>\n<li>准备两个<code>Plist</code>文件，用于导出不同<code>ipa</code>包时使用。</li>\n<li>获取命令行参数，区分上传到<code>Fir</code>还是<code>App Store</code></li>\n<li>清理构建目录</li>\n<li>编译打包</li>\n<li>导出包</li>\n<li>上传到<code>Fir</code>或者验证并上传到<code>App Store</code></li>\n<li>发邮件通知</li>\n</ol>\n<h2 id=\"准备Plist文件\"><a href=\"#准备Plist文件\" class=\"headerlink\" title=\"准备Plist文件\"></a>准备Plist文件</h2><p>根据<code>xcodebuild -help</code>提供的可选key可以知道，<code>compileBitcode</code>、<code>embedOnDemandResourcesAssetPacksInBundle</code>、<code>iCloudContainerEnvironment</code>、<code>manifest</code>、<code>onDemandResourcesAssetPacksBaseURL</code>、<code>thinning</code>这几个key用于非<code>App Store</code>导出的；<code>uploadBitcode</code>、<code>uploadSymbols</code>用于<code>App Store</code>导出；<code>method</code>、<code>teamID</code>共用。</p>\n<p>method的可选值为:</p>\n<blockquote>\n<p>app-store, package, ad-hoc, enterprise, development, and developer-id</p>\n</blockquote>\n<p>所以我建了两个文件：<code>AppStoreExportOptions.plist</code>、<code>AdHocExportOptions.plist</code>。</p>\n<p>AppStoreExportOptions.plist：method＝app-store，uploadBitcode＝YES，uploadSymbols＝YES</p>\n<p>AdHocExportOptions.plist：method＝ad-hoc，compileBitcode＝NO</p>\n<h2 id=\"获取命令行参数\"><a href=\"#获取命令行参数\" class=\"headerlink\" title=\"获取命令行参数\"></a>获取命令行参数</h2><p>用<code>Shell</code>内置的<code>getopts</code>命令，这属于Shell的范畴就不多讲了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $# -lt 1 ];then</span><br><span class=\"line\">    echo &quot;Error! Should enter the archive type (AdHoc or AppStore).&quot;</span><br><span class=\"line\">    echo &quot;&quot;</span><br><span class=\"line\">    exit 2</span><br><span class=\"line\">fi</span><br><span class=\"line\">while getopts &apos;t:&apos; optname</span><br><span class=\"line\">do</span><br><span class=\"line\">    case &quot;$optname&quot; in</span><br><span class=\"line\">    t)</span><br><span class=\"line\">        if [ $&#123;OPTARG&#125; != &quot;AdHoc&quot; ] &amp;&amp; [ $&#123;OPTARG&#125; != &quot;AppStore&quot; ];then</span><br><span class=\"line\">            echo &quot;invalid parameter of $OPTARG&quot;</span><br><span class=\"line\">            echo &quot;&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        type=$&#123;OPTARG&#125;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo &quot;Error! Unknown error while processing options&quot;</span><br><span class=\"line\">        echo &quot;&quot;</span><br><span class=\"line\">        exit 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清理构建目录\"><a href=\"#清理构建目录\" class=\"headerlink\" title=\"清理构建目录\"></a>清理构建目录</h2><p>就如在Xcode操作「Product -&gt; Clean」。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_path=&quot;/XXX/XXX&quot;</span><br><span class=\"line\">configuration=&quot;Release&quot;</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$configuration&quot; -alltargets &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>log_path是一个文档路径，只是用来记录命令的输出，因为都打在终端会很多，另外也方便后面分析。后面的命令也是如此。这里面带的选项可以根据需要参考<code>xcodebuild -help</code>的信息。</p>\n<h2 id=\"编译打包成Archive\"><a href=\"#编译打包成Archive\" class=\"headerlink\" title=\"编译打包成Archive\"></a>编译打包成Archive</h2><p>就如在Xcode操作「Product -&gt; Archive」</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspaceName=&quot;XXX.xcworkspace&quot;</span><br><span class=\"line\">scheme=&quot;XXX&quot;</span><br><span class=\"line\">configurationBuildDir=&quot;XXX/build&quot;</span><br><span class=\"line\">codeSignIdentity=&quot;iPhone Distribution: XXX, Ltd. (xxxxxxxxxx)&quot;</span><br><span class=\"line\">adHocProvisioningProfile=&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span><br><span class=\"line\">appStoreProvisioningProfile=&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span><br><span class=\"line\">configuration=&quot;Release&quot;</span><br><span class=\"line\">archivePath=&quot;/xxx/XXX.xcarchive&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild archive -workspace &quot;$workspaceName&quot; -scheme &quot;$scheme&quot; -configuration &quot;$configuration&quot; -archivePath &quot;$archivePath&quot; CONFIGURATION_BUILD_DIR=&quot;$configurationBuildDir&quot; CODE_SIGN_IDENTITY=&quot;$codeSignIdentity&quot; PROVISIONING_PROFILE=&quot;$provisioningProfile&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>CONFIGURATION_BUILD_DIR</code>是中间文件生成的路径，可以不指定；<code>CODE_SIGN_IDENTITY</code>是证书名（在对应<code>TARGETS</code>的<code>Build Settings</code>中选择完<code>Code Sinning</code>，再点击选择<code>Other...</code>，就可以得到这串东西）；<code>PROVISIONING_PROFILE</code>是配置文件（获取方法同CODE_SIGN_IDENTITY，格式一般是<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>）。还可以添加其他参数，不设置的都是默认使用项目Build Settings里面的配置，包括<code>CODE_SIGN_IDENTITY</code>和<code>PROVISIONING_PROFILE</code>。</p>\n<p>如果是workspace就用<code>-workspace</code>，就像编译带有<code>CocoaPods</code>的项目，如果是普通项目则用<code>-project</code>。</p>\n<p>执行完会生成一个.xcarchive文件和build文件夹如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">build文件夹</span><br><span class=\"line\">\t|------.a</span><br><span class=\"line\">\t|------.app</span><br><span class=\"line\">\t|------.app.dSYM</span><br><span class=\"line\">\t|------.swiftmodule文件夹</span><br><span class=\"line\">\t\t|------arm.swiftdoc</span><br><span class=\"line\">\t\t|------arm.swiftmodule</span><br><span class=\"line\">\t\t|------arm64.swiftdoc</span><br><span class=\"line\">\t\t|------arm64.swiftmodule</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将Archive导出\"><a href=\"#将Archive导出\" class=\"headerlink\" title=\"将Archive导出\"></a>将Archive导出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath &quot;$archivePath&quot; -exportOptionsPlist &quot;$exportOptionsPlist&quot; -exportPath &quot;/XXX/XXX&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>$exportOptionsPlist</code>是对应使用的Plist的完整路径（包括文件名）。</p>\n<p>然后就会在指定的<code>exportPath</code>路径下生成.ipa文件。</p>\n<h2 id=\"上传到Fir\"><a href=\"#上传到Fir\" class=\"headerlink\" title=\"上传到Fir\"></a>上传到Fir</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firApiToken=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class=\"line\">ipaPath=&quot;/xxx/xxx.ipa&quot;</span><br><span class=\"line\">fir publish &quot;$ipaPath&quot; -T &quot;$firApiToken&quot; &gt;&gt; $log_path</span><br></pre></td></tr></table></figure>\n\n<p><code>firApiToken</code>在登录Fir后，右上角-API token看到。</p>\n<h2 id=\"验证并上传到App-Store\"><a href=\"#验证并上传到App-Store\" class=\"headerlink\" title=\"验证并上传到App Store\"></a>验证并上传到App Store</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\">$&#123;altoolPath&#125; --validate-app -f $&#123;ipaPath&#125; -u xxxxxx -p xxxxxx -t ios --output-format xml &gt;&gt;</span><br><span class=\"line\">$&#123;altoolPath&#125; --upload-app -f $&#123;ipaPath&#125; -u xxxxxx -p xxxxxx -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>在上面的PDF文档第38页讲明了用法和各个可选项，具体可以看下PDF。需要说明的是，生成的结果是xml打印在终端，可以保存到文档再解析出key来判断是否成功，目前这步还没做。</p>\n<p>这是成功的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;os-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;10.11.2&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;success-message&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;No errors validating archive at /XXX/XXX.ipa&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;tool-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;1.1.902&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;xcode-versions&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;path&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;/Applications/Xcode.app&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;version.plist&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;BuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProductBuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7C68&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProjectName&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;IDEFrameworks&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;SourceVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548000000000000&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这是失败的结果（找不到iTMSTransporter的情况，用前面说的ln -s解决）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">\t&lt;key&gt;os-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;10.11.2&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;product-errors&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;code&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;integer&gt;-10001&lt;/integer&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;message&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;userInfo&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;MZUnderlyingException&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;NSLocalizedDescription&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;NSLocalizedFailureReason&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;Transporter not found at path: /usr/local/itms/bin/iTMSTransporter.  You should reinstall the application.&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">\t&lt;key&gt;tool-version&lt;/key&gt;</span><br><span class=\"line\">\t&lt;string&gt;1.1.902&lt;/string&gt;</span><br><span class=\"line\">\t&lt;key&gt;xcode-versions&lt;/key&gt;</span><br><span class=\"line\">\t&lt;array&gt;</span><br><span class=\"line\">\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;path&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;string&gt;/Applications/Xcode.app&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;key&gt;version.plist&lt;/key&gt;</span><br><span class=\"line\">\t\t\t&lt;dict&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;BuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleShortVersionString&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7.2&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;CFBundleVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProductBuildVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;7C68&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;ProjectName&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;IDEFrameworks&lt;/string&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;SourceVersion&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;string&gt;9548000000000000&lt;/string&gt;</span><br><span class=\"line\">\t\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t\t&lt;/dict&gt;</span><br><span class=\"line\">\t&lt;/array&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可见，成功会有个<code>success-message</code>的key，而失败会有<code>product-errors</code>的key。</p>\n<h2 id=\"邮件通知相关同事\"><a href=\"#邮件通知相关同事\" class=\"headerlink\" title=\"邮件通知相关同事\"></a>邮件通知相关同事</h2><p>发邮件时可能会想带上当前版本的一些信息，如版本号、内部版本号等，可以用PlistBuddy实现读取甚至修改Plist文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appInfoPlistPath=&quot;`pwd`/xxx/xxx-Info.plist&quot;</span><br><span class=\"line\">bundleShortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;appInfoPlistPath&#125;)</span><br><span class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;appInfoPlistPath&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>之后便是发邮件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;测试版本 iOS $&#123;bundleShortVersion&#125;($&#123;bundleVersion&#125;)上传成功&quot; &quot;赶紧下载体验吧！http://fir.im/meijia&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;正式版本 iOS $&#123;bundleShortVersion&#125;($&#123;bundleVersion&#125;)提交成功&quot; &quot;iOS $&#123;bundleShortVersion&#125; 提交成功！&quot;</span><br></pre></td></tr></table></figure>\n\n<p>python主要用smtplib，网上的文章大多都是旧的，特别是讲到SSL时特别复杂，其实具体看下smtplib的接口文档就可以实现了。另外有可能出现标题、内容乱码的现象。整合了下面的链接解决了：</p>\n<p>下面是实现了SSL Smtp登录的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\">#coding: utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"># sendEmail title content</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import smtplib</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\"></span><br><span class=\"line\">sender = &apos;xxxxxx@qq.com;&apos;</span><br><span class=\"line\">receiver = &apos;xxx@qq.com;&apos;</span><br><span class=\"line\">smtpserver = &apos;smtp.qq.com&apos;</span><br><span class=\"line\">#smtpserver = &apos;smtp.exmail.qq.com&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">username = sender</span><br><span class=\"line\">password = &apos;xxxxxx&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def send_mail(title, content):</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        msg = MIMEText(content,&apos;plain&apos;,&apos;utf-8&apos;)</span><br><span class=\"line\">        if not isinstance(title,unicode):</span><br><span class=\"line\">            title = unicode(title, &apos;utf-8&apos;)</span><br><span class=\"line\">        msg[&apos;Subject&apos;] = title</span><br><span class=\"line\">        msg[&apos;From&apos;] = sender</span><br><span class=\"line\">        msg[&apos;To&apos;] = receiver</span><br><span class=\"line\">        msg[&quot;Accept-Language&quot;]=&quot;zh-CN&quot;</span><br><span class=\"line\">        msg[&quot;Accept-Charset&quot;]=&quot;ISO-8859-1,utf-8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        smtp = smtplib.SMTP_SSL(smtpserver,465)</span><br><span class=\"line\">        smtp.login(username, password)</span><br><span class=\"line\">        smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class=\"line\">        smtp.quit()</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    except Exception, e:</span><br><span class=\"line\">        print str(e)</span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">if send_mail(sys.argv[1], sys.argv[2]):</span><br><span class=\"line\">    print &quot;done!&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print &quot;failed!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>可以赋值给msg[‘CC’]实现抄送，经过测试，抄送的人过多会有一部分不成功，网上查了是这个库的bug。发送多个人用分号，另外末尾也要用分号。</p>\n<h2 id=\"上传符号表到Bugly\"><a href=\"#上传符号表到Bugly\" class=\"headerlink\" title=\"上传符号表到Bugly\"></a>上传符号表到Bugly</h2><p>用于分析解决崩溃bug挺好用的，而且他们的客服也很及时。<br>发现他们的2.4.1版本有问题，反馈后他们给了2.4.3版本，经测试没问题。</p>\n<ol>\n<li><p>在Bugly官网下载<a href=\"https://bugly.qq.com/whitebook\" target=\"_blank\" rel=\"noopener\">符号表工具</a></p>\n</li>\n<li><p>设置settings.txt</p>\n</li>\n<li><p>调用命令</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar buglySymboliOS.jar -d -i $dSYM -u -id &quot;xxxxxxxxx&quot; -key &quot;xxxxxxxxxxx&quot; -package &quot;com.xxx.xxx&quot; -version &quot;$version&quot; ­-o &quot;xxx.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<p>注意版本号之类的要设置对。</p>\n<h1 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h1><p>清理构建目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -configuration Release -alltargets</span><br></pre></td></tr></table></figure>\n\n<p>归档（其他参数不指定的话，默认用的是.xcworkspace或.xcodeproj文件里的配置）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild archive -workspace xxx.xcworkspace -scheme xxx -configuration Release -archivePath ./xxx.xcarchive</span><br></pre></td></tr></table></figure>\n\n<p>导出IPA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath ./xxx.xcarchive -exportOptionsPlist ./AdHocExportOptions.plist -exportPath ./</span><br></pre></td></tr></table></figure>\n\n<p>上传FIR</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish ./xxx.ipa -T xxxxxx</span><br></pre></td></tr></table></figure>\n\n<p>提交AppStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --validate-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml</span><br><span class=\"line\">/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --upload-app -f ./xxx.ipa -u xxx -p xxx -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>发邮件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sendEmail.py &quot;邮件内容&quot; &quot;用户名&quot; &quot;密码&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上传符号表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar buglySymboliOS.jar -d -i $dSYM -u -id &quot;xxxxxxxxx&quot; -key &quot;xxxxxxxxxxx&quot; -package &quot;com.xxx.xxx&quot; -version &quot;$version&quot; ­-o &quot;xxx.zip&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对比实验\"><a href=\"#对比实验\" class=\"headerlink\" title=\"对比实验\"></a>对比实验</h1><p>为了了解一些区别，我做了几个对比。我这里定义下三种方式，方便下面说明。</p>\n<ul>\n<li>xcodebuild+xcrun（xcodebuild build和xcrun）</li>\n<li>只用xcodebuild（archive和exportArchive），</li>\n<li>Xcode。</li>\n</ul>\n<h2 id=\"三种方式的对比\"><a href=\"#三种方式的对比\" class=\"headerlink\" title=\"三种方式的对比\"></a>三种方式的对比</h2><p>我使用xcodebuild+xcrun、仅xcodebuild、Xcode三种分别对相同代码和配置进行操作，根据结果做比较：</p>\n<ul>\n<li>xcodebuild+xcrun</li>\n</ul>\n<p>ipa：40.7MB，.app：93.3MB，编译耗时：8m31s，打包耗时：15s。</p>\n<ul>\n<li>仅xcodebuild</li>\n</ul>\n<p>ipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m24s，打包耗时：26s。</p>\n<ul>\n<li>Xcode</li>\n</ul>\n<p>ipa：37.3MB，.app：74MB，.xcarchive：227.3MB，编译耗时：8m40s，打包耗时：30s。</p>\n<p>Xcode生成的<code>.xcarchive</code>文件可以在以下路径看到：</p>\n<blockquote>\n<p>/Users/double/Library/Developer/Xcode/Archives</p>\n</blockquote>\n<p>可以看出，<u>仅使用xcodebuild的结果和使用Xcode编译打包的结果是一致的</u>，并且最终的ipa也可以正常安装使用。而第一种xcodebuild+xcrun的结果略大些，但是ipa也是可以正常使用的。这时需要了解下他们的区别。</p>\n<h2 id=\"xcodebuild-xcrun和仅xcodebuild的比较\"><a href=\"#xcodebuild-xcrun和仅xcodebuild的比较\" class=\"headerlink\" title=\"xcodebuild+xcrun和仅xcodebuild的比较\"></a>xcodebuild+xcrun和仅xcodebuild的比较</h2><ul>\n<li>使用xcrun打包方式二产生的.xcarchive中的.app</li>\n</ul>\n<p>打包生成的.ipa文件大小同样为37.3MB，与方式二使用Xcodebuild -exportArchive的结果一致！这样说明：<strong>使用xcrun的打包方法是正常的</strong>，和xcodebuild -exportArchive的结果一致，而且<strong>.ipa包仅和.app有关</strong>。那么说明，<u>这两种方式的不同仅在于xcodebuild build和xcodebuild archive之间的不同</u>。</p>\n<ul>\n<li>删除.xcarchive中其他文件然后<code>exportArchive</code></li>\n</ul>\n<p>这时命令提示错误，但是上面我们已经得出结论.ipa的生成只和.app有关，所以可能的原因是，这个<code>exportArchive</code>命令会检查.archive的完整性和正确性，防止生成的.archive不完整或者是伪造的。下面做个实验看下。</p>\n<h2 id=\"命令到底做了什么\"><a href=\"#命令到底做了什么\" class=\"headerlink\" title=\"命令到底做了什么\"></a>命令到底做了什么</h2><p>根据命令运行时输出的内容，看下中间做了什么</p>\n<ul>\n<li>xcrun -sdk iphoneos PackageApplication -v xxx.app -o xxx.ipa</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Packaging application: &apos;/xxx/xxx.app&apos;</span><br><span class=\"line\">Arguments: output=/xxx/xxx.ipa  verbose=1  </span><br><span class=\"line\">Environment variables:</span><br><span class=\"line\">SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk</span><br><span class=\"line\">......</span><br><span class=\"line\">SHELL = /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">Output directory: &apos;/xxx/xxx.ipa&apos;</span><br><span class=\"line\">Temporary Directory: &apos;/var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK&apos;  (will NOT be deleted on exit when verbose set)</span><br><span class=\"line\">+ /bin/cp -Rp /xxx/xxx.app /var/folders/21/6s9bb23j0s1343pm7ltnlgpm0000gn/T/taOIiK9AyK/Payload</span><br><span class=\"line\">Program /bin/cp returned 0 : []</span><br><span class=\"line\">### Checking original app</span><br><span class=\"line\">+ /usr/bin/codesign --verify -vvvv /xxx/xxx.app</span><br><span class=\"line\">Program /usr/bin/codesign returned 0 : [/xxx/xxx.app: valid on disk</span><br><span class=\"line\">/xxx/xxx.xcarchive/Products/Applications/xxx.app: satisfies its Designated Requirement</span><br><span class=\"line\">]</span><br><span class=\"line\">Done checking the original app</span><br><span class=\"line\">+ /usr/bin/zip --symlinks --verbose --recurse-paths /Users/double/Desktop/1.ipa .</span><br><span class=\"line\">Program /usr/bin/zip returned 0 : [  adding: Payload/\t(in=0) (out=0) (stored 0%)</span><br><span class=\"line\">  adding: Payload/xxx.app/\t(in=0) (out=0) (stored 0%)</span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure>\n\n<p>主要检查了环境变量，然后验证签名，然后压缩（看到了吗，居然是/usr/bin/zip），后面adding的基本都是.nib和.png等的压缩。看起来.archive只是一种压缩形式，包含了.app、.dSYM、.plist和其他一些文件。</p>\n<p>这里的<code>codesign</code>工具就是签名相关的，可以查看说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]</span><br><span class=\"line\">     codesign -v [-R requirement] [-v] [path|pid ...]</span><br><span class=\"line\">     codesign -d [-v] [path|pid ...]</span><br><span class=\"line\">     codesign -h [-v] [pid ...]</span><br></pre></td></tr></table></figure>\n\n<p>-s是签名，-v是验证。所以可以在.app生成后再签名。</p>\n<ul>\n<li>xcodebuild clean</li>\n</ul>\n<p>清理工作，根据参数删除指定的workplace、target、configuration（release或debug） 的中间文件，都是工程目录下的build文件夹。</p>\n<ul>\n<li>xcodebuild archive</li>\n</ul>\n<p>下面是里面主要的步骤：</p>\n<ol>\n<li>Create product structure 创建.app文件</li>\n<li>CompileC 编译文件（clang编译，指定了编译的SDK版本和指令集）</li>\n<li>Ld</li>\n<li>CreateUniversalBinary (lipo)</li>\n<li>CompileStoryboard (ibtool )</li>\n<li>CompileAssetCatalog (actool )</li>\n<li>ProcessInfoPlistFile (builtin-infoPlistUtility )</li>\n<li>GenerateDSYMFile (dsymutil )</li>\n<li>LinkStoryboards(ibtool )</li>\n<li>Strip </li>\n<li>ProcessProductPackaging (builtin-productPackagingUtility )</li>\n<li>CodeSign (codesign –force –sign)</li>\n<li>Validate (builtin-validationUtility )</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>呼呼写了这么多，终于到总结部分了。这个过程学到了很多东西，脚本成果确实方便了很多，减少了编译打包过程中人工监守、人工操作的成本，并且测试和提交到appStore的包都验证过可用。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"App图片压缩裁剪原理和上传方案，以及那些有趣的事儿...","date":"2016-02-26T08:00:00.000Z","keywords":"iOS Android 图片压缩","description":"App图片压缩裁剪原理和上传方案，以及那些有趣的事儿...","_content":"\n# 目录\n\n- App怎么压缩质量？\n  - iOS和Android压缩接口\n  - 实验一\n- 如何计算图片的大小？\n- JPEG&JFIF压缩做了什么？\n  - 色彩空间转换\n  - 缩减取样\n  - 离散余弦变换\n  - 量化\n  - 编码\n- App怎么裁剪分辨率？\n- 图片压缩裁剪上传方案\n  - 实验一：上传速度\n  - 实验二：用户设备主要分辨率\n  - 实验三：上传的照片的主要分辨率\n  - 实验四：压缩质量的大致规律\n  - 实验五：等比例裁剪后压缩质量的大致规律\n  - 实验六：WebP压缩\n  - 制定方案\n- 总结\n- 附录\n  - 图像的一些概念澄清\n  - 压缩算法概念\n  - 微信图片处理规律\n  - Base64编码后大小\n  - iOS的pt与Android的sp\n  - Android图片质量会比iPhone的差？\n  - iOS的UIImage保存图片问题\n  - 压缩再压缩做了什么\n\n最近有反馈说App上传图片偶尔会失败，特别是在网速慢和iPhone 6s的机器上。有些提示是“413 Request Entity Too Large”，Request大小1.15MB。之前只是简单地压到0.7，没有做裁剪等其他处理。\n\n所以这几天整体研究下iOS和Android的图片压缩裁剪和JPEG压缩原理，也稍微找了微信发图片的规律，越深入发现越多有趣的东西，问题一环扣一环。\n\n# App怎么压缩质量？\n最先接触的是压缩质量，所以看下压缩质量做了什么。\n\n## iOS和Android压缩接口\niOS:\n\n``` \nUIImageJPEGRepresentation(UIImage * __nonnull image, CGFloat compressionQuality);  \n// return image as JPEG. May return nil if image has no CGImageRef or invalid bitmap format. compression is 0(most)..1(least)\n```\n\nAndroid:\n\n``` \n/** \n    * Write a compressed version of the bitmap to the specified outputstream. \n    * If this returns true, the bitmap can be reconstructed by passing a \n    * corresponding inputstream to BitmapFactory.decodeStream(). Note: not \n    * all Formats support all bitmap configs directly, so it is possible that \n    * the returned bitmap from BitmapFactory could be in a different bitdepth, \n    * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque \n    * pixels). \n    * \n    * @param format   The format of the compressed image \n    * @param quality  Hint to the compressor, 0-100. 0 meaning compress for \n    *                 small size, 100 meaning compress for max quality. Some \n    *                 formats, like PNG which is lossless, will ignore the \n    *                 quality setting \n    * @param stream   The outputstream to write the compressed data. \n    * @return true if successfully compressed to the specified stream. \n*/\ncompress(CompressFormat format, int quality, OutputStream stream)\n```\n\n从官方注释看，iOS的compressionQuality取值从0-1，且“1”注明是least，也就是说**“1”不是不压缩，而是压缩强度最弱**；Android的quality取值0-100，也是**100代表最大质量，不是不压缩**。最后面测试也验证了这个问题，而*不是网上很多文档说的不压缩*。我们先统称compressionQuality和quality为质量系数，下文也是。\n\n## 实验一\n\n于是拍了一张照片A，然后Android和iOS都压缩得到照片B。\n\n对比了A、B两张图，想看看到底影响了什么：\n\n> 宽度：2448像素\n> 高度：3264像素\n> 分辨率：72像素/英寸\n> 文档：22.9MB\n> 通道：3（RGB）\n\n注：*需弄明白附录的关于图像的一些概念澄清*。\n\n两张照片看到的参数都一样，那为什么它们的文件大小会不一样呢？（*过程中发现iOS的UIImage会做多一些工作，使得实验结果有误，原因后面会提到。*）（用Picasa看图软件可以查看质量，数值上看到等于我们的质量系数）所以就想到第二个问题，文件大小怎么计算的？由什么决定？\n\n# 如何计算图片的大小？\n总分辨率 * 像素表示的位数。\n\n像素表示的位数：这就涉及到色彩模式，比较常见有RGB、CMYK、YUV等。RGB一般用RGB24（还有RGB555、RGB565、RGB32），即红绿蓝都分别用8位表示，所以用了24位表示一个像素，可以组合出2^24种颜色。\n\n上面两张图水平有2448个像素，垂直有3264个像素，每个像素用24b表示，按这公式大小应该都是：2448x3264x24b＝23970816B=22.86MB。为什么呢？\n\n后来明白，原来这公式是算位图的占用空间大小，而JPEG&JFIF是将位图压缩，不仅压缩图像质量还压缩图像占用空间（后面会讲到）。也就是说**图像压缩不等于压缩质量和分辨率，还有压缩占用空间**。\n\n网上查到JFIF文件没有计算大小的公式，因为压缩质量和压缩后大小没有特定关系，如线性关系。**那\b么JPEG&JFIF压缩做了什么？这个质量到底代表了什么？**\n\n# JPEG&JFIF压缩做了什么？\n\n其实JPEG&JFIF做了两件事情：\n\n1. 去掉视觉上的冗余信息\n2. 去掉数据本身结构的冗余\n\n第一步实现通过色彩空间转换、缩减取样、离散余弦变换、量化，第二步实现通过编码。\n\n其实这部分可以选择跳过，只是我为了理解压缩质量是怎么体现的而去看的，后面也发现理解后很多问题都很清晰明白。\n\n## 色彩空间转换\nJPEG需要YUV色彩模式，所以需要将RGB转成YUV：\n- Y=0.299R'+0.587G'+0.114B'\n- U=-0.147R'-0.289G'+0.436B'\n- V=0.615R'-0.515G'-0.100B'\n\n## 缩减取样\nYUV分别代表亮度、色度、饱和度，因为人类的眼睛对于亮度差异的敏感度高于色彩变化，所以一般会对U、V进行缩减采样。在JPEG上这种缩减取样的比例可以是4:4:4（无缩减取样）、4:2:2、4:2:0。所以经常会看到YUV444，YUV422和YUV420等。\n\n## 离散余弦变换\n将每个8x8的子区域转换到频率空间，这部分是无损的。\n\n-415 -30 -61  27  56 -20 -2  0\n   4    -22 -61  10  13  -7  -9  5\n  -47   7   77  -25 -29 10  5  -6\n  -49  12  34  -15 -10  6   2   2\n  12   -7  -13   -4   -2   2   -3  3\n   -8    3    2     -6   -2   1   4   2\n  -1     0    0    -2    -1   -3  4  -1\n   0     0    -1   -4    -1    0   1  2\n\n## 量化\n量化是有损的过程，也是失真的主要原因。上面矩阵中每个值都是幅度，量化是利用人眼特点在高频率上降低信息的数量（简单地把频率领域上每个成分，除以一个对于该成分的常数就可完成，且接着舍位取最接近的整数），与一个基本矩阵运算然后得到一个新的矩阵，**该新矩阵数据基本集中在左上角**。\n\n其实**量化做的就是减少非0系数幅度和增加0值系数的个数**。\n**我们接口中的质量系数就是和这里的基本矩阵有关。**\n\n## 编码\n\nZ扫描0值行程长度编码、哈夫曼编码。\nZ扫描0值行程长度编码利用了量化后矩阵的特点，使得0值的都能串在最后面，对于过早结束的最后用EOB表示。\n这一步就是**压缩文件的占用空间**。\n\n# App怎么裁剪分辨率？\n弄清楚压缩质量问题后，我们知道，影响位图的大小有分辨率，那么减少分辨率也就能使压缩得更小了。注意这里裁剪分辨率不等于裁剪图片，不会丢失图片的某一部分。\n\niOS:\n\n``` \nUIGraphicsBeginImageContext(newSize);\n[imageFixed drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\nUIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n```\n\nAndroid:\n\n``` \nBitmap image = BitmapFactory.decodeStream(file);\nint bitmapWidth = image.getWidth();\nint bitmapHeight = image.getHeight();\nMatrix matrix = new Matrix();\nmatrix.postScale(scaleRatio, scaleRatio);\nBitmap scaledBitmap = Bitmap.createBitmap(image, 0, 0, bitmapWidth, bitmapHeight, matrix, false);\n```\n\n我们是等比例裁剪，比例和裁剪后占用空间大小并不一定成线性关系，这个裁剪具体怎么实现的和每个像素的质量有关系。\n\n# 图片压缩裁剪上传方案\n明白一个图片的清晰度等受什么影响之后，可以来定下方案了，但是还得做些测试获取数据，依据数据结果来定方案。\n\n## 实验一：上传速度\n我们用Charles模拟了各种网络环境下上传相同照片的网速：\n\n|   环境   |  wifi  |  8M   |  16M   |  32M   |\n| :----: | :----: | :---: | :----: |\n| 速度KB/s | 754.78 | 115.4 | 115.78 | 116.25 |\n\n|   环境   |  32M光纤  | 100M光纤 |   3G   |   4G   |\n| :----: | :----: | :---: | :----: |\n| 速度KB/s | 174.65 | 167.33 | 114.18 | 174.73 |\n\n这些不等价于我们用户的网速平均值，而且只取一次样本，所以只是作为参考。\n\n## 实验二：用户设备主要分辨率\n因为照片都是在用户设备上看的，所以了解下用户的主流分辨率，将分辨率裁剪到趋近或稍大于该主流分辨率会比较适合。iOS和Android都取接近的值。\n\n在友盟查看了我们的应用的相关数据：\n\n- Android，较大占比的是宽度1080像素和720像素的设备。宽度1080像素的，新增用户占比49.69%，启动次数占比44.29%；宽度720像素的，新增用户占比32.47%，启动次数占比37.76%。\n- iOS，较大占比的是宽度1242像素、750像素和640像素的设备。宽度1242像素的，新增用户占比31.84%，启动次数占比26.91%；宽度750像素的，新增用户占比36.20%，启动次数占比31.59%；宽度640像素的，新增用户占比20.36%，启动次数占比20.84%。\n\n## 实验三：上传的照片的主要分辨率\n找下上传的照片的主要分辨率，可以针对这些分辨率去确定和衡量方案。\n也是在友盟上看我们的应用的数据：\n\n- iOS主流机型是iPhone6、iPhone6s、iPhone6 Plus、iPhone6s Plus，占到70%左右。它们的拍照分辨率分别是2448x3264，3024x4032。\n- Android相对较碎片化，只能是针对最大的分辨率去衡量。\n\n## 实验四：压缩质量的大致规律\n\n2448x3264照片压缩后的数据大小（单位B）：\n\n| 压缩强度 |   图片1   |   图片2   |   图片3   |   图片4   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 197777  | 174464  | 152897  | 195214  |\n| 0.2  | 212779  | 183532  | 163225  | 209426  |\n| 0.3  | 253658  | 205512  | 196188  | 248320  |\n| 0.4  | 360091  | 256013  | 283607  | 349968  |\n| 0.5  | 498199  | 336823  | 390525  | 485286  |\n| 0.6  | 724491  | 488737  | 548437  | 698421  |\n| 0.7  | 1209508 | 883664  | 936968  | 1161342 |\n| 0.8  | 1475669 | 1063724 | 1130241 | 1415084 |\n| 0.9  | 1700461 | 1247600 | 1334143 | 1636293 |\n| 1.0  | 4568157 | 3629379 | 4139209 | 4433556 |\n| 原图占用 | 1714688 | 1257647 | 1353635 | 1647936 |\n\n3024x4032照片压缩后的数据大小（单位B）：\n\n| 压缩强度 |   图片5   |   图片6   |   图片7   |   图片8   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 551527  | 325434  | 296792  | 492494  |\n| 0.2  | 619307  | 352608  | 328183  | 547533  |\n| 0.3  | 785915  | 422342  | 416459  | 683265  |\n| 0.4  | 1061504 | 537826  | 589206  | 931686  |\n| 0.5  | 1408297 | 891288  | 839938  | 1290788 |\n| 0.6  | 2071014 | 973894  | 1108102 | 1607344 |\n| 0.7  | 2547536 | 1228021 | 1756824 | 2479774 |\n| 0.8  | 2652258 | 1320258 | 1831889 | 2617015 |\n| 0.9  | 3336839 | 1603754 | 2212214 | 3079872 |\n| 1.0  | 7282230 | 4337074 | 5787540 | 7962849 |\n| 原图占用 | 2635183 | 1511290 | 1860418 | 2641699 |\n\n- 会出现压缩出来反而比原图大的问题，后面会讨论\n- 在没有裁剪的情况下，压到0.6依旧不是太理想，特别是分辨率更高的照片。\n- 在excel表格中将数据组成折线图，可以看出在0.9、0.8的时候下降幅度较大，后面相对平缓一点。\n\n## 实验五：等比例裁剪后压缩质量的大致规律\n2448x3264照片等比例压缩到宽度1224像素时的数据大小（单位B）：\n\n| 压缩强度 |   图片1   |   图片2   |   图片3   |   图片4   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  |  58975  |  52025  |  43301  |  60029  |\n| 0.2  |  64446  |  55583  |  46529  |  65347  |\n| 0.3  |  76982  |  63805  |  55494  |  77891  |\n| 0.4  |  99499  |  77605  |  76695  | 100042  |\n| 0.5  | 129826  |  95116  | 103949  | 129597  |\n| 0.6  | 173036  | 120654  | 144188  | 173569  |\n| 0.7  | 246847  | 174977  | 209876  | 249223  |\n| 0.8  | 303546  | 208392  | 261322  | 308841  |\n| 0.9  | 411181  | 294795  | 358003  | 420013  |\n| 1.0  | 1574657 | 1280563 | 1536779 | 1566585 |\n| 原图占用 | 1714688 | 1257647 | 1353635 | 1647936 |\n\n3024x4032照片等比例压缩到宽度1224像素时的数据大小（单位B）：\n\n| 压缩强度 |   图片5   |   图片6   |   图片7   |   图片8   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 111697  |  70802  |  54321  | 121994  |\n| 0.2  | 127179  |  77524  |  61810  | 136869  |\n| 0.3  | 163959  |  94048  |  79713  | 172194  |\n| 0.4  | 225870  | 122258  | 113295  | 230197  |\n| 0.5  | 302097  | 157160  | 155152  | 300772  |\n| 0.6  | 395440  | 202312  | 210836  | 385183  |\n| 0.7  | 524345  | 273895  | 295530  | 505417  |\n| 0.8  | 623839  | 323884  | 363596  | 593923  |\n| 0.9  | 777293  | 420943  | 481205  | 745946  |\n| 1.0  | 2184791 | 1530139 | 1774130 | 2291622 |\n| 原图占用 | 2635183 | 1511290 | 1860418 | 2641699 |\n\n- 可以看到裁剪这个分辨率后压缩质量0.6的大小相对可接受，而且图片质量影响也较小。\n- 在这个分辨率下，压缩质量0.8时基本压缩到1/4至1/5。\n\n## 实验六：WebP压缩\nWebP据称在同等质量下大小可以压缩至JPEG的2/3。在iOS和Android都做了WebP的压缩测试，发现压缩速度非常慢，需要20s-35s，这是很不可接受的。上网查到WebP的压缩效率的确较慢，是JPEG的8倍左右，而且相比JPEG需要耗费更多的系统性能。所以本来想用WebP做兜底的方案暂时落空。\n\n## 制定方案\n\n方案的目的是：\n\n1. 上传图片不超时\n2. 处理后质量清晰度可接受\n3. 缩短上传耗时\n\n结合实验结论：\n\n- 根据实验一，平均上传速度100KB/s，另外我们测试很差情况下有15KB/s的情况。我们的接口超时30s，所以可接受的图片大小最大为450KB。\n- 根据实验二，等比例宽度取750-1242像素比较合适。\n- 根据实验三、四、五，等比例裁剪到宽度1224像素后压缩至0.6、0.7大小相对可接受。质量相对可接受（主观感受）。\n- [JPG、PNG和GIF图片的基本原理及优化方法](http://www.mahaixiang.cn/Photoshop/400.html)讲到，通常建议JPG质量最好是在60左右的原因。当在Photoshop中把质量设置低于51的时候，它就会执行另一个叫做“降色采样”的优化算法，它会在8个像素周围平均采样，这样会在边缘产生杂色。\n\n定下方案：\n\n1. 照片宽度大于1224像素（因为iPhone6照片宽度2448所以想取个可以整除的）时等比例裁剪宽度成1224。因为分辨率太大甚至两倍于手机分辨率实际没有任何用处。\n2. 压缩质量系数至0.8(80)看下大小是否小于300KB，排除一些小分辨率的照片。小于则上传，大于则继续压缩，取0.7(70)，排除一些中等的，如果还大于则取0.6(60)后不判断直接上传。根据上面的实验可以看到在宽度1224像素下基本都会小于300KB，大于的则处于450KB内，且450KB是网速最差的情况，因此基本可以保证上传。\n\n# 总结\n方案目前看压缩的质量和时间控制都相对较好，但是还要继续观察一段时间看需不需要再调整参数。在这过程中理清了很多概念，了解了图片压缩过程中发生了什么事情，挺有趣的，根本停不下来。\n\n# 附录\n文中涉及到的一些概念以及发现的一些其他相关事情。\n\n## 图像的一些概念澄清\n\n其实图像真正的信息是它的**总分辨率**（图像宽度x图像高度）和**分辨率**（水平分辨率&垂直分辨率），**而涉及到英寸、厘米等长度单位时的大小，其实不是图像的信息，只是在涉及到外部，比如打印、设备屏幕显示等等时，换算出来的。**\n\n- 水平分辨率&垂直分辨率\n\n分辨率一般单位ppi（也有dpi），即每英寸上多少个像素。水平分辨率即水平方向上像素个数/水平长度，垂直分辨率同理。**一般水平分辨率和垂直分辨率是相等的，所以日常也简称为分辨率。**dpi即每英寸上多少点。这两个单位根据不同显示设备有换算关系。\n\n- 图像宽度&图像高度\n\n其实标准些，讲宽度&高度时一般是讲图像水平/垂直上有多少个像素。如一张2448x3264的照片，则宽度是2448像素，高度是3264像素。也有讲宽度是86.36厘米，高度是115.15厘米，一般在打印照片等情况下。\n\n- 分辨率\n\n日常讲分辨率时其实可以指很多情况，一般指图像宽度x高度，如2448x3264，指水平上有2448个像素，垂直上有3264个像素。\n\n## 压缩算法概念\n\n- JPEG\n\n一个名称为Joint Photographic Experts Group的组织，也是一种压缩算法。JPEG本身只有描述如何将一个视频转换为字节的数据流（streaming），但**并没有说明这些字节如何在任何特定的存储媒体上被封存起来**。JPEG有有损压缩和无损压缩，无损压缩的没有得到什么支持，所以一般讲JPEG指它的有损压缩。\n\n- JFIF\n\nJPEG File Interchange Format，JPEG文件交换格式，**详细说明如何从一个JPEG流，产出一个适合于电脑存储和传输的文件**。一般后缀有.jpeg、.jpg、.jfif以及.jif。\n\n- Bitmap\n\n又称栅格图，是使用像素阵列来表示的图像。非压缩格式，从左往右从上往下扫描，占用较大存储空间。\n\n> https://zh.wikipedia.org/wiki/JPEG\n> https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\n\n## 微信图片处理规律\n\n经过简单测试发现，在微信，A发一张原图给B时，B直接保存缩略图：\n- iOS版的微信保存下来是等比例压缩高度为800，质量80。\n- Android版的微信保存下来是等比例压缩高度为1280，质量80。\n\n朋友圈的图片保存下来，都是等比例到高1280像素，质量和大小还没找到规律。\n为什么微信是取高固定而不是宽呢？可以思考下。\n\n## Base64编码后大小\n\n我们现在还用着Base64编码图像数据，后面需改成提交表单方式。\n\nBase64要求把每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，**转换后的字符串理论上将要比原来的长1/3**。\n\n## iOS的pt与Android的sp\n我在[iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率](https://sapphirezzz.github.io/blog/2016/01/17/ios-devices-info/)文章里讲了iOS设备的pt和px关系。\niOS的pt是开发单位，一个逻辑point对应一个点dot。@1x设备上一个pt上显示1个px（像素），@2x上一个pt显示2个px，@3x上显示3个px。平时在storyboard上设置时指的都是pt。\n\nAndroid的sp一种基于屏幕密度的抽象单位。\n\n## Android图片质量会比iPhone的差？\n\n在[为什么Android的图片质量会比iPhone的差？](http://www.cnblogs.com/MaxIE/p/3951294.html)、[[Android算法] 【04/28 bug修改】android图片压缩终极解决方案](http://www.eoeandroid.com/thread-570303-1-3.html?_dsign=bc58b99e)、[Android图片编码机制深度解析（Bitmap，Skia，libJpeg）](http://www.cnblogs.com/hrlnw/p/4403334.html)三篇文章中讲了Android系统在压缩上的一些不为人知的问题。\n\n大致是，Android编码保存图片就是通过Java层函数——Native层函数——Skia库函数——对应第三方库函数（例如libjpeg），这一层层调用做到的。 libjpeg在压缩图像时，有一个参数叫optimize_coding，如果设置optimize_coding为TRUE，将会使得压缩图像过程中基于图像数据计算哈弗曼表，由于这个计算会显著消耗空间和时间，默认值被设置为FALSE。对于当时的计算设备来说，空间和时间的消耗可能是显著的，但到今天，这似乎不应再是问题。但谷歌的Skia项目工程师们对optimize_coding在Skia中默认的等于了FALSE，这就意味着更差的图片质量和更大的图片文件。还有其他和iOS的比较可以看下。\n\n也讲到了Android可以替换libjpeg库达到设置为TRUE的目的。\n\n## iOS的UIImage保存图片问题\n\n起初发现压缩后保存图片，不同压缩质量系数，得出来的文件大小趋势和计算出的大小趋势不同，所以怀疑使用NSData初始化UIImage时多做了什么。\n\n``` \nNSData *imageData06 = UIImageJPEGRepresentation(scaledImage, 0.6);\nUIImage *image06 = [UIImage imageWithData:imageData06];\nUIImageWriteToSavedPhotosAlbum(image06, nil, nil, nil);\n```\n\n通过软件发现，不同压缩质量系数，得出来的NSData保存成UIImage图片，看到的质量都是92，按道理应该是对应的质量系数才对。于是想将NSData保存成文件到目录，读取出文件大小。\n\n``` \nNSString *documents = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [documents stringByAppendingPathComponent:@\"image.jpg\"];\nNSData *imageData = UIImageJPEGRepresentation(image, 0.7);\nNSError *error = nil;\n[imageData writeToFile:filePath options:NSDataWritingAtomic error:&error];\nif (error != nil) {\n\tNSLog(@\"error = %@\", error);\n}else {\n\tNSLog(@\"success\");\n}\nNSLog(@\"imageData = %u\", (unsigned)imageData.length);\nNSFileManager* manager = [NSFileManager defaultManager];\nif ([manager fileExistsAtPath:filePath]){\n\tunsigned long long size = [[manager attributesOfItemAtPath:filePath error:nil] fileSize];\n\tNSLog(@\"0.7后文件大小 %llu\", size);\n}\nUIImage *imageFromData = [UIImage imageWithData:imageData];\nUIImageWriteToSavedPhotosAlbum(imageFromData, nil, nil, nil);\nUIImage *imageRead = [[UIImage alloc] initWithContentsOfFile:filePath];\nUIImageWriteToSavedPhotosAlbum(imageRead, nil, nil, nil);\n```\n\n读取文件大小size和NSData大小imageData.length打印一致，而与imageRead、imageFromData的大小不一样，因此可以证明UIImage这个对象本身还做了其他事情。\n\n在[AFNetworking2.0源码解析](http://www.udpwork.com/item/13533.html)这篇文章的截图显示，UIImage的imageWithData方法堆栈显示还调用了哈夫曼解码。\n\n## 压缩再压缩做了什么\n\n1. 首先谈下看图软件怎么展示图片。打开.jpg图片时，看图软件将文件转换成位图才显示出来，即把量化表矩阵与基本转化矩阵运算得出图片当前的位图（因为经过了压缩，所以该位图与原位图不同）。\n2. 压缩后再压缩也是，先将图片变回位图，再将位图按现在的压缩质量系数压缩。\n3. 所以压缩后的图片有可能变大，我猜测原因是，压缩前的占用空间压缩率较大，而再压缩时选的质量系数较大，导致压缩占用空间率（即压缩的第二步）较小，所以导致质量其实是变差了，但是占用空间反而可能变大。\n\n变大的例子如：本来图片A大小500KB，压缩质量系数选择0.7，得到B图片90KB，再拿这张B图片去压，压缩质量系数1.0，得出C图片。前面我们说压缩不仅压缩质量，还压缩占用空间。如果第一次压缩的压缩质量比例跟第二次压缩的比例的差值，比第一次压缩的压缩占用空间比例跟第二次的压缩占用空间比例的差值小，那么C图片就会比B图片大。因为虽然C图片质量比B图片质量差点，但是B图片的空间压缩得比C图片大比较多。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-02-26-app-image-compress-upload-to-server.md","raw":"---\ntitle: App图片压缩裁剪原理和上传方案，以及那些有趣的事儿...\ndate: 2016-02-26 16:00:00\ntags: \n     - iOS\n     - 图片压缩\ncategories: Tech\nkeywords: iOS Android 图片压缩\ndescription: App图片压缩裁剪原理和上传方案，以及那些有趣的事儿...\n---\n\n# 目录\n\n- App怎么压缩质量？\n  - iOS和Android压缩接口\n  - 实验一\n- 如何计算图片的大小？\n- JPEG&JFIF压缩做了什么？\n  - 色彩空间转换\n  - 缩减取样\n  - 离散余弦变换\n  - 量化\n  - 编码\n- App怎么裁剪分辨率？\n- 图片压缩裁剪上传方案\n  - 实验一：上传速度\n  - 实验二：用户设备主要分辨率\n  - 实验三：上传的照片的主要分辨率\n  - 实验四：压缩质量的大致规律\n  - 实验五：等比例裁剪后压缩质量的大致规律\n  - 实验六：WebP压缩\n  - 制定方案\n- 总结\n- 附录\n  - 图像的一些概念澄清\n  - 压缩算法概念\n  - 微信图片处理规律\n  - Base64编码后大小\n  - iOS的pt与Android的sp\n  - Android图片质量会比iPhone的差？\n  - iOS的UIImage保存图片问题\n  - 压缩再压缩做了什么\n\n最近有反馈说App上传图片偶尔会失败，特别是在网速慢和iPhone 6s的机器上。有些提示是“413 Request Entity Too Large”，Request大小1.15MB。之前只是简单地压到0.7，没有做裁剪等其他处理。\n\n所以这几天整体研究下iOS和Android的图片压缩裁剪和JPEG压缩原理，也稍微找了微信发图片的规律，越深入发现越多有趣的东西，问题一环扣一环。\n\n# App怎么压缩质量？\n最先接触的是压缩质量，所以看下压缩质量做了什么。\n\n## iOS和Android压缩接口\niOS:\n\n``` \nUIImageJPEGRepresentation(UIImage * __nonnull image, CGFloat compressionQuality);  \n// return image as JPEG. May return nil if image has no CGImageRef or invalid bitmap format. compression is 0(most)..1(least)\n```\n\nAndroid:\n\n``` \n/** \n    * Write a compressed version of the bitmap to the specified outputstream. \n    * If this returns true, the bitmap can be reconstructed by passing a \n    * corresponding inputstream to BitmapFactory.decodeStream(). Note: not \n    * all Formats support all bitmap configs directly, so it is possible that \n    * the returned bitmap from BitmapFactory could be in a different bitdepth, \n    * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque \n    * pixels). \n    * \n    * @param format   The format of the compressed image \n    * @param quality  Hint to the compressor, 0-100. 0 meaning compress for \n    *                 small size, 100 meaning compress for max quality. Some \n    *                 formats, like PNG which is lossless, will ignore the \n    *                 quality setting \n    * @param stream   The outputstream to write the compressed data. \n    * @return true if successfully compressed to the specified stream. \n*/\ncompress(CompressFormat format, int quality, OutputStream stream)\n```\n\n从官方注释看，iOS的compressionQuality取值从0-1，且“1”注明是least，也就是说**“1”不是不压缩，而是压缩强度最弱**；Android的quality取值0-100，也是**100代表最大质量，不是不压缩**。最后面测试也验证了这个问题，而*不是网上很多文档说的不压缩*。我们先统称compressionQuality和quality为质量系数，下文也是。\n\n## 实验一\n\n于是拍了一张照片A，然后Android和iOS都压缩得到照片B。\n\n对比了A、B两张图，想看看到底影响了什么：\n\n> 宽度：2448像素\n> 高度：3264像素\n> 分辨率：72像素/英寸\n> 文档：22.9MB\n> 通道：3（RGB）\n\n注：*需弄明白附录的关于图像的一些概念澄清*。\n\n两张照片看到的参数都一样，那为什么它们的文件大小会不一样呢？（*过程中发现iOS的UIImage会做多一些工作，使得实验结果有误，原因后面会提到。*）（用Picasa看图软件可以查看质量，数值上看到等于我们的质量系数）所以就想到第二个问题，文件大小怎么计算的？由什么决定？\n\n# 如何计算图片的大小？\n总分辨率 * 像素表示的位数。\n\n像素表示的位数：这就涉及到色彩模式，比较常见有RGB、CMYK、YUV等。RGB一般用RGB24（还有RGB555、RGB565、RGB32），即红绿蓝都分别用8位表示，所以用了24位表示一个像素，可以组合出2^24种颜色。\n\n上面两张图水平有2448个像素，垂直有3264个像素，每个像素用24b表示，按这公式大小应该都是：2448x3264x24b＝23970816B=22.86MB。为什么呢？\n\n后来明白，原来这公式是算位图的占用空间大小，而JPEG&JFIF是将位图压缩，不仅压缩图像质量还压缩图像占用空间（后面会讲到）。也就是说**图像压缩不等于压缩质量和分辨率，还有压缩占用空间**。\n\n网上查到JFIF文件没有计算大小的公式，因为压缩质量和压缩后大小没有特定关系，如线性关系。**那\b么JPEG&JFIF压缩做了什么？这个质量到底代表了什么？**\n\n# JPEG&JFIF压缩做了什么？\n\n其实JPEG&JFIF做了两件事情：\n\n1. 去掉视觉上的冗余信息\n2. 去掉数据本身结构的冗余\n\n第一步实现通过色彩空间转换、缩减取样、离散余弦变换、量化，第二步实现通过编码。\n\n其实这部分可以选择跳过，只是我为了理解压缩质量是怎么体现的而去看的，后面也发现理解后很多问题都很清晰明白。\n\n## 色彩空间转换\nJPEG需要YUV色彩模式，所以需要将RGB转成YUV：\n- Y=0.299R'+0.587G'+0.114B'\n- U=-0.147R'-0.289G'+0.436B'\n- V=0.615R'-0.515G'-0.100B'\n\n## 缩减取样\nYUV分别代表亮度、色度、饱和度，因为人类的眼睛对于亮度差异的敏感度高于色彩变化，所以一般会对U、V进行缩减采样。在JPEG上这种缩减取样的比例可以是4:4:4（无缩减取样）、4:2:2、4:2:0。所以经常会看到YUV444，YUV422和YUV420等。\n\n## 离散余弦变换\n将每个8x8的子区域转换到频率空间，这部分是无损的。\n\n-415 -30 -61  27  56 -20 -2  0\n   4    -22 -61  10  13  -7  -9  5\n  -47   7   77  -25 -29 10  5  -6\n  -49  12  34  -15 -10  6   2   2\n  12   -7  -13   -4   -2   2   -3  3\n   -8    3    2     -6   -2   1   4   2\n  -1     0    0    -2    -1   -3  4  -1\n   0     0    -1   -4    -1    0   1  2\n\n## 量化\n量化是有损的过程，也是失真的主要原因。上面矩阵中每个值都是幅度，量化是利用人眼特点在高频率上降低信息的数量（简单地把频率领域上每个成分，除以一个对于该成分的常数就可完成，且接着舍位取最接近的整数），与一个基本矩阵运算然后得到一个新的矩阵，**该新矩阵数据基本集中在左上角**。\n\n其实**量化做的就是减少非0系数幅度和增加0值系数的个数**。\n**我们接口中的质量系数就是和这里的基本矩阵有关。**\n\n## 编码\n\nZ扫描0值行程长度编码、哈夫曼编码。\nZ扫描0值行程长度编码利用了量化后矩阵的特点，使得0值的都能串在最后面，对于过早结束的最后用EOB表示。\n这一步就是**压缩文件的占用空间**。\n\n# App怎么裁剪分辨率？\n弄清楚压缩质量问题后，我们知道，影响位图的大小有分辨率，那么减少分辨率也就能使压缩得更小了。注意这里裁剪分辨率不等于裁剪图片，不会丢失图片的某一部分。\n\niOS:\n\n``` \nUIGraphicsBeginImageContext(newSize);\n[imageFixed drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];\nUIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n```\n\nAndroid:\n\n``` \nBitmap image = BitmapFactory.decodeStream(file);\nint bitmapWidth = image.getWidth();\nint bitmapHeight = image.getHeight();\nMatrix matrix = new Matrix();\nmatrix.postScale(scaleRatio, scaleRatio);\nBitmap scaledBitmap = Bitmap.createBitmap(image, 0, 0, bitmapWidth, bitmapHeight, matrix, false);\n```\n\n我们是等比例裁剪，比例和裁剪后占用空间大小并不一定成线性关系，这个裁剪具体怎么实现的和每个像素的质量有关系。\n\n# 图片压缩裁剪上传方案\n明白一个图片的清晰度等受什么影响之后，可以来定下方案了，但是还得做些测试获取数据，依据数据结果来定方案。\n\n## 实验一：上传速度\n我们用Charles模拟了各种网络环境下上传相同照片的网速：\n\n|   环境   |  wifi  |  8M   |  16M   |  32M   |\n| :----: | :----: | :---: | :----: |\n| 速度KB/s | 754.78 | 115.4 | 115.78 | 116.25 |\n\n|   环境   |  32M光纤  | 100M光纤 |   3G   |   4G   |\n| :----: | :----: | :---: | :----: |\n| 速度KB/s | 174.65 | 167.33 | 114.18 | 174.73 |\n\n这些不等价于我们用户的网速平均值，而且只取一次样本，所以只是作为参考。\n\n## 实验二：用户设备主要分辨率\n因为照片都是在用户设备上看的，所以了解下用户的主流分辨率，将分辨率裁剪到趋近或稍大于该主流分辨率会比较适合。iOS和Android都取接近的值。\n\n在友盟查看了我们的应用的相关数据：\n\n- Android，较大占比的是宽度1080像素和720像素的设备。宽度1080像素的，新增用户占比49.69%，启动次数占比44.29%；宽度720像素的，新增用户占比32.47%，启动次数占比37.76%。\n- iOS，较大占比的是宽度1242像素、750像素和640像素的设备。宽度1242像素的，新增用户占比31.84%，启动次数占比26.91%；宽度750像素的，新增用户占比36.20%，启动次数占比31.59%；宽度640像素的，新增用户占比20.36%，启动次数占比20.84%。\n\n## 实验三：上传的照片的主要分辨率\n找下上传的照片的主要分辨率，可以针对这些分辨率去确定和衡量方案。\n也是在友盟上看我们的应用的数据：\n\n- iOS主流机型是iPhone6、iPhone6s、iPhone6 Plus、iPhone6s Plus，占到70%左右。它们的拍照分辨率分别是2448x3264，3024x4032。\n- Android相对较碎片化，只能是针对最大的分辨率去衡量。\n\n## 实验四：压缩质量的大致规律\n\n2448x3264照片压缩后的数据大小（单位B）：\n\n| 压缩强度 |   图片1   |   图片2   |   图片3   |   图片4   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 197777  | 174464  | 152897  | 195214  |\n| 0.2  | 212779  | 183532  | 163225  | 209426  |\n| 0.3  | 253658  | 205512  | 196188  | 248320  |\n| 0.4  | 360091  | 256013  | 283607  | 349968  |\n| 0.5  | 498199  | 336823  | 390525  | 485286  |\n| 0.6  | 724491  | 488737  | 548437  | 698421  |\n| 0.7  | 1209508 | 883664  | 936968  | 1161342 |\n| 0.8  | 1475669 | 1063724 | 1130241 | 1415084 |\n| 0.9  | 1700461 | 1247600 | 1334143 | 1636293 |\n| 1.0  | 4568157 | 3629379 | 4139209 | 4433556 |\n| 原图占用 | 1714688 | 1257647 | 1353635 | 1647936 |\n\n3024x4032照片压缩后的数据大小（单位B）：\n\n| 压缩强度 |   图片5   |   图片6   |   图片7   |   图片8   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 551527  | 325434  | 296792  | 492494  |\n| 0.2  | 619307  | 352608  | 328183  | 547533  |\n| 0.3  | 785915  | 422342  | 416459  | 683265  |\n| 0.4  | 1061504 | 537826  | 589206  | 931686  |\n| 0.5  | 1408297 | 891288  | 839938  | 1290788 |\n| 0.6  | 2071014 | 973894  | 1108102 | 1607344 |\n| 0.7  | 2547536 | 1228021 | 1756824 | 2479774 |\n| 0.8  | 2652258 | 1320258 | 1831889 | 2617015 |\n| 0.9  | 3336839 | 1603754 | 2212214 | 3079872 |\n| 1.0  | 7282230 | 4337074 | 5787540 | 7962849 |\n| 原图占用 | 2635183 | 1511290 | 1860418 | 2641699 |\n\n- 会出现压缩出来反而比原图大的问题，后面会讨论\n- 在没有裁剪的情况下，压到0.6依旧不是太理想，特别是分辨率更高的照片。\n- 在excel表格中将数据组成折线图，可以看出在0.9、0.8的时候下降幅度较大，后面相对平缓一点。\n\n## 实验五：等比例裁剪后压缩质量的大致规律\n2448x3264照片等比例压缩到宽度1224像素时的数据大小（单位B）：\n\n| 压缩强度 |   图片1   |   图片2   |   图片3   |   图片4   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  |  58975  |  52025  |  43301  |  60029  |\n| 0.2  |  64446  |  55583  |  46529  |  65347  |\n| 0.3  |  76982  |  63805  |  55494  |  77891  |\n| 0.4  |  99499  |  77605  |  76695  | 100042  |\n| 0.5  | 129826  |  95116  | 103949  | 129597  |\n| 0.6  | 173036  | 120654  | 144188  | 173569  |\n| 0.7  | 246847  | 174977  | 209876  | 249223  |\n| 0.8  | 303546  | 208392  | 261322  | 308841  |\n| 0.9  | 411181  | 294795  | 358003  | 420013  |\n| 1.0  | 1574657 | 1280563 | 1536779 | 1566585 |\n| 原图占用 | 1714688 | 1257647 | 1353635 | 1647936 |\n\n3024x4032照片等比例压缩到宽度1224像素时的数据大小（单位B）：\n\n| 压缩强度 |   图片5   |   图片6   |   图片7   |   图片8   |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| 0.1  | 111697  |  70802  |  54321  | 121994  |\n| 0.2  | 127179  |  77524  |  61810  | 136869  |\n| 0.3  | 163959  |  94048  |  79713  | 172194  |\n| 0.4  | 225870  | 122258  | 113295  | 230197  |\n| 0.5  | 302097  | 157160  | 155152  | 300772  |\n| 0.6  | 395440  | 202312  | 210836  | 385183  |\n| 0.7  | 524345  | 273895  | 295530  | 505417  |\n| 0.8  | 623839  | 323884  | 363596  | 593923  |\n| 0.9  | 777293  | 420943  | 481205  | 745946  |\n| 1.0  | 2184791 | 1530139 | 1774130 | 2291622 |\n| 原图占用 | 2635183 | 1511290 | 1860418 | 2641699 |\n\n- 可以看到裁剪这个分辨率后压缩质量0.6的大小相对可接受，而且图片质量影响也较小。\n- 在这个分辨率下，压缩质量0.8时基本压缩到1/4至1/5。\n\n## 实验六：WebP压缩\nWebP据称在同等质量下大小可以压缩至JPEG的2/3。在iOS和Android都做了WebP的压缩测试，发现压缩速度非常慢，需要20s-35s，这是很不可接受的。上网查到WebP的压缩效率的确较慢，是JPEG的8倍左右，而且相比JPEG需要耗费更多的系统性能。所以本来想用WebP做兜底的方案暂时落空。\n\n## 制定方案\n\n方案的目的是：\n\n1. 上传图片不超时\n2. 处理后质量清晰度可接受\n3. 缩短上传耗时\n\n结合实验结论：\n\n- 根据实验一，平均上传速度100KB/s，另外我们测试很差情况下有15KB/s的情况。我们的接口超时30s，所以可接受的图片大小最大为450KB。\n- 根据实验二，等比例宽度取750-1242像素比较合适。\n- 根据实验三、四、五，等比例裁剪到宽度1224像素后压缩至0.6、0.7大小相对可接受。质量相对可接受（主观感受）。\n- [JPG、PNG和GIF图片的基本原理及优化方法](http://www.mahaixiang.cn/Photoshop/400.html)讲到，通常建议JPG质量最好是在60左右的原因。当在Photoshop中把质量设置低于51的时候，它就会执行另一个叫做“降色采样”的优化算法，它会在8个像素周围平均采样，这样会在边缘产生杂色。\n\n定下方案：\n\n1. 照片宽度大于1224像素（因为iPhone6照片宽度2448所以想取个可以整除的）时等比例裁剪宽度成1224。因为分辨率太大甚至两倍于手机分辨率实际没有任何用处。\n2. 压缩质量系数至0.8(80)看下大小是否小于300KB，排除一些小分辨率的照片。小于则上传，大于则继续压缩，取0.7(70)，排除一些中等的，如果还大于则取0.6(60)后不判断直接上传。根据上面的实验可以看到在宽度1224像素下基本都会小于300KB，大于的则处于450KB内，且450KB是网速最差的情况，因此基本可以保证上传。\n\n# 总结\n方案目前看压缩的质量和时间控制都相对较好，但是还要继续观察一段时间看需不需要再调整参数。在这过程中理清了很多概念，了解了图片压缩过程中发生了什么事情，挺有趣的，根本停不下来。\n\n# 附录\n文中涉及到的一些概念以及发现的一些其他相关事情。\n\n## 图像的一些概念澄清\n\n其实图像真正的信息是它的**总分辨率**（图像宽度x图像高度）和**分辨率**（水平分辨率&垂直分辨率），**而涉及到英寸、厘米等长度单位时的大小，其实不是图像的信息，只是在涉及到外部，比如打印、设备屏幕显示等等时，换算出来的。**\n\n- 水平分辨率&垂直分辨率\n\n分辨率一般单位ppi（也有dpi），即每英寸上多少个像素。水平分辨率即水平方向上像素个数/水平长度，垂直分辨率同理。**一般水平分辨率和垂直分辨率是相等的，所以日常也简称为分辨率。**dpi即每英寸上多少点。这两个单位根据不同显示设备有换算关系。\n\n- 图像宽度&图像高度\n\n其实标准些，讲宽度&高度时一般是讲图像水平/垂直上有多少个像素。如一张2448x3264的照片，则宽度是2448像素，高度是3264像素。也有讲宽度是86.36厘米，高度是115.15厘米，一般在打印照片等情况下。\n\n- 分辨率\n\n日常讲分辨率时其实可以指很多情况，一般指图像宽度x高度，如2448x3264，指水平上有2448个像素，垂直上有3264个像素。\n\n## 压缩算法概念\n\n- JPEG\n\n一个名称为Joint Photographic Experts Group的组织，也是一种压缩算法。JPEG本身只有描述如何将一个视频转换为字节的数据流（streaming），但**并没有说明这些字节如何在任何特定的存储媒体上被封存起来**。JPEG有有损压缩和无损压缩，无损压缩的没有得到什么支持，所以一般讲JPEG指它的有损压缩。\n\n- JFIF\n\nJPEG File Interchange Format，JPEG文件交换格式，**详细说明如何从一个JPEG流，产出一个适合于电脑存储和传输的文件**。一般后缀有.jpeg、.jpg、.jfif以及.jif。\n\n- Bitmap\n\n又称栅格图，是使用像素阵列来表示的图像。非压缩格式，从左往右从上往下扫描，占用较大存储空间。\n\n> https://zh.wikipedia.org/wiki/JPEG\n> https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\n\n## 微信图片处理规律\n\n经过简单测试发现，在微信，A发一张原图给B时，B直接保存缩略图：\n- iOS版的微信保存下来是等比例压缩高度为800，质量80。\n- Android版的微信保存下来是等比例压缩高度为1280，质量80。\n\n朋友圈的图片保存下来，都是等比例到高1280像素，质量和大小还没找到规律。\n为什么微信是取高固定而不是宽呢？可以思考下。\n\n## Base64编码后大小\n\n我们现在还用着Base64编码图像数据，后面需改成提交表单方式。\n\nBase64要求把每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，**转换后的字符串理论上将要比原来的长1/3**。\n\n## iOS的pt与Android的sp\n我在[iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率](https://sapphirezzz.github.io/blog/2016/01/17/ios-devices-info/)文章里讲了iOS设备的pt和px关系。\niOS的pt是开发单位，一个逻辑point对应一个点dot。@1x设备上一个pt上显示1个px（像素），@2x上一个pt显示2个px，@3x上显示3个px。平时在storyboard上设置时指的都是pt。\n\nAndroid的sp一种基于屏幕密度的抽象单位。\n\n## Android图片质量会比iPhone的差？\n\n在[为什么Android的图片质量会比iPhone的差？](http://www.cnblogs.com/MaxIE/p/3951294.html)、[[Android算法] 【04/28 bug修改】android图片压缩终极解决方案](http://www.eoeandroid.com/thread-570303-1-3.html?_dsign=bc58b99e)、[Android图片编码机制深度解析（Bitmap，Skia，libJpeg）](http://www.cnblogs.com/hrlnw/p/4403334.html)三篇文章中讲了Android系统在压缩上的一些不为人知的问题。\n\n大致是，Android编码保存图片就是通过Java层函数——Native层函数——Skia库函数——对应第三方库函数（例如libjpeg），这一层层调用做到的。 libjpeg在压缩图像时，有一个参数叫optimize_coding，如果设置optimize_coding为TRUE，将会使得压缩图像过程中基于图像数据计算哈弗曼表，由于这个计算会显著消耗空间和时间，默认值被设置为FALSE。对于当时的计算设备来说，空间和时间的消耗可能是显著的，但到今天，这似乎不应再是问题。但谷歌的Skia项目工程师们对optimize_coding在Skia中默认的等于了FALSE，这就意味着更差的图片质量和更大的图片文件。还有其他和iOS的比较可以看下。\n\n也讲到了Android可以替换libjpeg库达到设置为TRUE的目的。\n\n## iOS的UIImage保存图片问题\n\n起初发现压缩后保存图片，不同压缩质量系数，得出来的文件大小趋势和计算出的大小趋势不同，所以怀疑使用NSData初始化UIImage时多做了什么。\n\n``` \nNSData *imageData06 = UIImageJPEGRepresentation(scaledImage, 0.6);\nUIImage *image06 = [UIImage imageWithData:imageData06];\nUIImageWriteToSavedPhotosAlbum(image06, nil, nil, nil);\n```\n\n通过软件发现，不同压缩质量系数，得出来的NSData保存成UIImage图片，看到的质量都是92，按道理应该是对应的质量系数才对。于是想将NSData保存成文件到目录，读取出文件大小。\n\n``` \nNSString *documents = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\nNSString *filePath = [documents stringByAppendingPathComponent:@\"image.jpg\"];\nNSData *imageData = UIImageJPEGRepresentation(image, 0.7);\nNSError *error = nil;\n[imageData writeToFile:filePath options:NSDataWritingAtomic error:&error];\nif (error != nil) {\n\tNSLog(@\"error = %@\", error);\n}else {\n\tNSLog(@\"success\");\n}\nNSLog(@\"imageData = %u\", (unsigned)imageData.length);\nNSFileManager* manager = [NSFileManager defaultManager];\nif ([manager fileExistsAtPath:filePath]){\n\tunsigned long long size = [[manager attributesOfItemAtPath:filePath error:nil] fileSize];\n\tNSLog(@\"0.7后文件大小 %llu\", size);\n}\nUIImage *imageFromData = [UIImage imageWithData:imageData];\nUIImageWriteToSavedPhotosAlbum(imageFromData, nil, nil, nil);\nUIImage *imageRead = [[UIImage alloc] initWithContentsOfFile:filePath];\nUIImageWriteToSavedPhotosAlbum(imageRead, nil, nil, nil);\n```\n\n读取文件大小size和NSData大小imageData.length打印一致，而与imageRead、imageFromData的大小不一样，因此可以证明UIImage这个对象本身还做了其他事情。\n\n在[AFNetworking2.0源码解析](http://www.udpwork.com/item/13533.html)这篇文章的截图显示，UIImage的imageWithData方法堆栈显示还调用了哈夫曼解码。\n\n## 压缩再压缩做了什么\n\n1. 首先谈下看图软件怎么展示图片。打开.jpg图片时，看图软件将文件转换成位图才显示出来，即把量化表矩阵与基本转化矩阵运算得出图片当前的位图（因为经过了压缩，所以该位图与原位图不同）。\n2. 压缩后再压缩也是，先将图片变回位图，再将位图按现在的压缩质量系数压缩。\n3. 所以压缩后的图片有可能变大，我猜测原因是，压缩前的占用空间压缩率较大，而再压缩时选的质量系数较大，导致压缩占用空间率（即压缩的第二步）较小，所以导致质量其实是变差了，但是占用空间反而可能变大。\n\n变大的例子如：本来图片A大小500KB，压缩质量系数选择0.7，得到B图片90KB，再拿这张B图片去压，压缩质量系数1.0，得出C图片。前面我们说压缩不仅压缩质量，还压缩占用空间。如果第一次压缩的压缩质量比例跟第二次压缩的比例的差值，比第一次压缩的压缩占用空间比例跟第二次的压缩占用空间比例的差值小，那么C图片就会比B图片大。因为虽然C图片质量比B图片质量差点，但是B图片的空间压缩得比C图片大比较多。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"app-image-compress-upload-to-server","published":1,"updated":"2020-02-25T15:23:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7py001y07eivf93nm7x","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>App怎么压缩质量？<ul>\n<li>iOS和Android压缩接口</li>\n<li>实验一</li>\n</ul>\n</li>\n<li>如何计算图片的大小？</li>\n<li>JPEG&amp;JFIF压缩做了什么？<ul>\n<li>色彩空间转换</li>\n<li>缩减取样</li>\n<li>离散余弦变换</li>\n<li>量化</li>\n<li>编码</li>\n</ul>\n</li>\n<li>App怎么裁剪分辨率？</li>\n<li>图片压缩裁剪上传方案<ul>\n<li>实验一：上传速度</li>\n<li>实验二：用户设备主要分辨率</li>\n<li>实验三：上传的照片的主要分辨率</li>\n<li>实验四：压缩质量的大致规律</li>\n<li>实验五：等比例裁剪后压缩质量的大致规律</li>\n<li>实验六：WebP压缩</li>\n<li>制定方案</li>\n</ul>\n</li>\n<li>总结</li>\n<li>附录<ul>\n<li>图像的一些概念澄清</li>\n<li>压缩算法概念</li>\n<li>微信图片处理规律</li>\n<li>Base64编码后大小</li>\n<li>iOS的pt与Android的sp</li>\n<li>Android图片质量会比iPhone的差？</li>\n<li>iOS的UIImage保存图片问题</li>\n<li>压缩再压缩做了什么</li>\n</ul>\n</li>\n</ul>\n<p>最近有反馈说App上传图片偶尔会失败，特别是在网速慢和iPhone 6s的机器上。有些提示是“413 Request Entity Too Large”，Request大小1.15MB。之前只是简单地压到0.7，没有做裁剪等其他处理。</p>\n<p>所以这几天整体研究下iOS和Android的图片压缩裁剪和JPEG压缩原理，也稍微找了微信发图片的规律，越深入发现越多有趣的东西，问题一环扣一环。</p>\n<h1 id=\"App怎么压缩质量？\"><a href=\"#App怎么压缩质量？\" class=\"headerlink\" title=\"App怎么压缩质量？\"></a>App怎么压缩质量？</h1><p>最先接触的是压缩质量，所以看下压缩质量做了什么。</p>\n<h2 id=\"iOS和Android压缩接口\"><a href=\"#iOS和Android压缩接口\" class=\"headerlink\" title=\"iOS和Android压缩接口\"></a>iOS和Android压缩接口</h2><p>iOS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImageJPEGRepresentation(UIImage * __nonnull image, CGFloat compressionQuality);  </span><br><span class=\"line\">// return image as JPEG. May return nil if image has no CGImageRef or invalid bitmap format. compression is 0(most)..1(least)</span><br></pre></td></tr></table></figure>\n\n<p>Android:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\">    * Write a compressed version of the bitmap to the specified outputstream. </span><br><span class=\"line\">    * If this returns true, the bitmap can be reconstructed by passing a </span><br><span class=\"line\">    * corresponding inputstream to BitmapFactory.decodeStream(). Note: not </span><br><span class=\"line\">    * all Formats support all bitmap configs directly, so it is possible that </span><br><span class=\"line\">    * the returned bitmap from BitmapFactory could be in a different bitdepth, </span><br><span class=\"line\">    * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque </span><br><span class=\"line\">    * pixels). </span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @param format   The format of the compressed image </span><br><span class=\"line\">    * @param quality  Hint to the compressor, 0-100. 0 meaning compress for </span><br><span class=\"line\">    *                 small size, 100 meaning compress for max quality. Some </span><br><span class=\"line\">    *                 formats, like PNG which is lossless, will ignore the </span><br><span class=\"line\">    *                 quality setting </span><br><span class=\"line\">    * @param stream   The outputstream to write the compressed data. </span><br><span class=\"line\">    * @return true if successfully compressed to the specified stream. </span><br><span class=\"line\">*/</span><br><span class=\"line\">compress(CompressFormat format, int quality, OutputStream stream)</span><br></pre></td></tr></table></figure>\n\n<p>从官方注释看，iOS的compressionQuality取值从0-1，且“1”注明是least，也就是说<strong>“1”不是不压缩，而是压缩强度最弱</strong>；Android的quality取值0-100，也是<strong>100代表最大质量，不是不压缩</strong>。最后面测试也验证了这个问题，而<em>不是网上很多文档说的不压缩</em>。我们先统称compressionQuality和quality为质量系数，下文也是。</p>\n<h2 id=\"实验一\"><a href=\"#实验一\" class=\"headerlink\" title=\"实验一\"></a>实验一</h2><p>于是拍了一张照片A，然后Android和iOS都压缩得到照片B。</p>\n<p>对比了A、B两张图，想看看到底影响了什么：</p>\n<blockquote>\n<p>宽度：2448像素<br>高度：3264像素<br>分辨率：72像素/英寸<br>文档：22.9MB<br>通道：3（RGB）</p>\n</blockquote>\n<p>注：<em>需弄明白附录的关于图像的一些概念澄清</em>。</p>\n<p>两张照片看到的参数都一样，那为什么它们的文件大小会不一样呢？（<em>过程中发现iOS的UIImage会做多一些工作，使得实验结果有误，原因后面会提到。</em>）（用Picasa看图软件可以查看质量，数值上看到等于我们的质量系数）所以就想到第二个问题，文件大小怎么计算的？由什么决定？</p>\n<h1 id=\"如何计算图片的大小？\"><a href=\"#如何计算图片的大小？\" class=\"headerlink\" title=\"如何计算图片的大小？\"></a>如何计算图片的大小？</h1><p>总分辨率 * 像素表示的位数。</p>\n<p>像素表示的位数：这就涉及到色彩模式，比较常见有RGB、CMYK、YUV等。RGB一般用RGB24（还有RGB555、RGB565、RGB32），即红绿蓝都分别用8位表示，所以用了24位表示一个像素，可以组合出2^24种颜色。</p>\n<p>上面两张图水平有2448个像素，垂直有3264个像素，每个像素用24b表示，按这公式大小应该都是：2448x3264x24b＝23970816B=22.86MB。为什么呢？</p>\n<p>后来明白，原来这公式是算位图的占用空间大小，而JPEG&amp;JFIF是将位图压缩，不仅压缩图像质量还压缩图像占用空间（后面会讲到）。也就是说<strong>图像压缩不等于压缩质量和分辨率，还有压缩占用空间</strong>。</p>\n<p>网上查到JFIF文件没有计算大小的公式，因为压缩质量和压缩后大小没有特定关系，如线性关系。<strong>那\b么JPEG&amp;JFIF压缩做了什么？这个质量到底代表了什么？</strong></p>\n<h1 id=\"JPEG-amp-JFIF压缩做了什么？\"><a href=\"#JPEG-amp-JFIF压缩做了什么？\" class=\"headerlink\" title=\"JPEG&amp;JFIF压缩做了什么？\"></a>JPEG&amp;JFIF压缩做了什么？</h1><p>其实JPEG&amp;JFIF做了两件事情：</p>\n<ol>\n<li>去掉视觉上的冗余信息</li>\n<li>去掉数据本身结构的冗余</li>\n</ol>\n<p>第一步实现通过色彩空间转换、缩减取样、离散余弦变换、量化，第二步实现通过编码。</p>\n<p>其实这部分可以选择跳过，只是我为了理解压缩质量是怎么体现的而去看的，后面也发现理解后很多问题都很清晰明白。</p>\n<h2 id=\"色彩空间转换\"><a href=\"#色彩空间转换\" class=\"headerlink\" title=\"色彩空间转换\"></a>色彩空间转换</h2><p>JPEG需要YUV色彩模式，所以需要将RGB转成YUV：</p>\n<ul>\n<li>Y=0.299R’+0.587G’+0.114B’</li>\n<li>U=-0.147R’-0.289G’+0.436B’</li>\n<li>V=0.615R’-0.515G’-0.100B’</li>\n</ul>\n<h2 id=\"缩减取样\"><a href=\"#缩减取样\" class=\"headerlink\" title=\"缩减取样\"></a>缩减取样</h2><p>YUV分别代表亮度、色度、饱和度，因为人类的眼睛对于亮度差异的敏感度高于色彩变化，所以一般会对U、V进行缩减采样。在JPEG上这种缩减取样的比例可以是4:4:4（无缩减取样）、4:2:2、4:2:0。所以经常会看到YUV444，YUV422和YUV420等。</p>\n<h2 id=\"离散余弦变换\"><a href=\"#离散余弦变换\" class=\"headerlink\" title=\"离散余弦变换\"></a>离散余弦变换</h2><p>将每个8x8的子区域转换到频率空间，这部分是无损的。</p>\n<p>-415 -30 -61  27  56 -20 -2  0<br>   4    -22 -61  10  13  -7  -9  5<br>  -47   7   77  -25 -29 10  5  -6<br>  -49  12  34  -15 -10  6   2   2<br>  12   -7  -13   -4   -2   2   -3  3<br>   -8    3    2     -6   -2   1   4   2<br>  -1     0    0    -2    -1   -3  4  -1<br>   0     0    -1   -4    -1    0   1  2</p>\n<h2 id=\"量化\"><a href=\"#量化\" class=\"headerlink\" title=\"量化\"></a>量化</h2><p>量化是有损的过程，也是失真的主要原因。上面矩阵中每个值都是幅度，量化是利用人眼特点在高频率上降低信息的数量（简单地把频率领域上每个成分，除以一个对于该成分的常数就可完成，且接着舍位取最接近的整数），与一个基本矩阵运算然后得到一个新的矩阵，<strong>该新矩阵数据基本集中在左上角</strong>。</p>\n<p>其实<strong>量化做的就是减少非0系数幅度和增加0值系数的个数</strong>。<br><strong>我们接口中的质量系数就是和这里的基本矩阵有关。</strong></p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>Z扫描0值行程长度编码、哈夫曼编码。<br>Z扫描0值行程长度编码利用了量化后矩阵的特点，使得0值的都能串在最后面，对于过早结束的最后用EOB表示。<br>这一步就是<strong>压缩文件的占用空间</strong>。</p>\n<h1 id=\"App怎么裁剪分辨率？\"><a href=\"#App怎么裁剪分辨率？\" class=\"headerlink\" title=\"App怎么裁剪分辨率？\"></a>App怎么裁剪分辨率？</h1><p>弄清楚压缩质量问题后，我们知道，影响位图的大小有分辨率，那么减少分辨率也就能使压缩得更小了。注意这里裁剪分辨率不等于裁剪图片，不会丢失图片的某一部分。</p>\n<p>iOS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIGraphicsBeginImageContext(newSize);</span><br><span class=\"line\">[imageFixed drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];</span><br><span class=\"line\">UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br></pre></td></tr></table></figure>\n\n<p>Android:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bitmap image = BitmapFactory.decodeStream(file);</span><br><span class=\"line\">int bitmapWidth = image.getWidth();</span><br><span class=\"line\">int bitmapHeight = image.getHeight();</span><br><span class=\"line\">Matrix matrix = new Matrix();</span><br><span class=\"line\">matrix.postScale(scaleRatio, scaleRatio);</span><br><span class=\"line\">Bitmap scaledBitmap = Bitmap.createBitmap(image, 0, 0, bitmapWidth, bitmapHeight, matrix, false);</span><br></pre></td></tr></table></figure>\n\n<p>我们是等比例裁剪，比例和裁剪后占用空间大小并不一定成线性关系，这个裁剪具体怎么实现的和每个像素的质量有关系。</p>\n<h1 id=\"图片压缩裁剪上传方案\"><a href=\"#图片压缩裁剪上传方案\" class=\"headerlink\" title=\"图片压缩裁剪上传方案\"></a>图片压缩裁剪上传方案</h1><p>明白一个图片的清晰度等受什么影响之后，可以来定下方案了，但是还得做些测试获取数据，依据数据结果来定方案。</p>\n<h2 id=\"实验一：上传速度\"><a href=\"#实验一：上传速度\" class=\"headerlink\" title=\"实验一：上传速度\"></a>实验一：上传速度</h2><p>我们用Charles模拟了各种网络环境下上传相同照片的网速：</p>\n<p>|   环境   |  wifi  |  8M   |  16M   |  32M   |<br>| :—-: | :—-: | :—: | :—-: |<br>| 速度KB/s | 754.78 | 115.4 | 115.78 | 116.25 |</p>\n<p>|   环境   |  32M光纤  | 100M光纤 |   3G   |   4G   |<br>| :—-: | :—-: | :—: | :—-: |<br>| 速度KB/s | 174.65 | 167.33 | 114.18 | 174.73 |</p>\n<p>这些不等价于我们用户的网速平均值，而且只取一次样本，所以只是作为参考。</p>\n<h2 id=\"实验二：用户设备主要分辨率\"><a href=\"#实验二：用户设备主要分辨率\" class=\"headerlink\" title=\"实验二：用户设备主要分辨率\"></a>实验二：用户设备主要分辨率</h2><p>因为照片都是在用户设备上看的，所以了解下用户的主流分辨率，将分辨率裁剪到趋近或稍大于该主流分辨率会比较适合。iOS和Android都取接近的值。</p>\n<p>在友盟查看了我们的应用的相关数据：</p>\n<ul>\n<li>Android，较大占比的是宽度1080像素和720像素的设备。宽度1080像素的，新增用户占比49.69%，启动次数占比44.29%；宽度720像素的，新增用户占比32.47%，启动次数占比37.76%。</li>\n<li>iOS，较大占比的是宽度1242像素、750像素和640像素的设备。宽度1242像素的，新增用户占比31.84%，启动次数占比26.91%；宽度750像素的，新增用户占比36.20%，启动次数占比31.59%；宽度640像素的，新增用户占比20.36%，启动次数占比20.84%。</li>\n</ul>\n<h2 id=\"实验三：上传的照片的主要分辨率\"><a href=\"#实验三：上传的照片的主要分辨率\" class=\"headerlink\" title=\"实验三：上传的照片的主要分辨率\"></a>实验三：上传的照片的主要分辨率</h2><p>找下上传的照片的主要分辨率，可以针对这些分辨率去确定和衡量方案。<br>也是在友盟上看我们的应用的数据：</p>\n<ul>\n<li>iOS主流机型是iPhone6、iPhone6s、iPhone6 Plus、iPhone6s Plus，占到70%左右。它们的拍照分辨率分别是2448x3264，3024x4032。</li>\n<li>Android相对较碎片化，只能是针对最大的分辨率去衡量。</li>\n</ul>\n<h2 id=\"实验四：压缩质量的大致规律\"><a href=\"#实验四：压缩质量的大致规律\" class=\"headerlink\" title=\"实验四：压缩质量的大致规律\"></a>实验四：压缩质量的大致规律</h2><p>2448x3264照片压缩后的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片1</th>\n<th align=\"center\">图片2</th>\n<th align=\"center\">图片3</th>\n<th align=\"center\">图片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">197777</td>\n<td align=\"center\">174464</td>\n<td align=\"center\">152897</td>\n<td align=\"center\">195214</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">212779</td>\n<td align=\"center\">183532</td>\n<td align=\"center\">163225</td>\n<td align=\"center\">209426</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">253658</td>\n<td align=\"center\">205512</td>\n<td align=\"center\">196188</td>\n<td align=\"center\">248320</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">360091</td>\n<td align=\"center\">256013</td>\n<td align=\"center\">283607</td>\n<td align=\"center\">349968</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">498199</td>\n<td align=\"center\">336823</td>\n<td align=\"center\">390525</td>\n<td align=\"center\">485286</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">724491</td>\n<td align=\"center\">488737</td>\n<td align=\"center\">548437</td>\n<td align=\"center\">698421</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">1209508</td>\n<td align=\"center\">883664</td>\n<td align=\"center\">936968</td>\n<td align=\"center\">1161342</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">1475669</td>\n<td align=\"center\">1063724</td>\n<td align=\"center\">1130241</td>\n<td align=\"center\">1415084</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">1700461</td>\n<td align=\"center\">1247600</td>\n<td align=\"center\">1334143</td>\n<td align=\"center\">1636293</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">4568157</td>\n<td align=\"center\">3629379</td>\n<td align=\"center\">4139209</td>\n<td align=\"center\">4433556</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">1714688</td>\n<td align=\"center\">1257647</td>\n<td align=\"center\">1353635</td>\n<td align=\"center\">1647936</td>\n</tr>\n</tbody></table>\n<p>3024x4032照片压缩后的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片5</th>\n<th align=\"center\">图片6</th>\n<th align=\"center\">图片7</th>\n<th align=\"center\">图片8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">551527</td>\n<td align=\"center\">325434</td>\n<td align=\"center\">296792</td>\n<td align=\"center\">492494</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">619307</td>\n<td align=\"center\">352608</td>\n<td align=\"center\">328183</td>\n<td align=\"center\">547533</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">785915</td>\n<td align=\"center\">422342</td>\n<td align=\"center\">416459</td>\n<td align=\"center\">683265</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">1061504</td>\n<td align=\"center\">537826</td>\n<td align=\"center\">589206</td>\n<td align=\"center\">931686</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">1408297</td>\n<td align=\"center\">891288</td>\n<td align=\"center\">839938</td>\n<td align=\"center\">1290788</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">2071014</td>\n<td align=\"center\">973894</td>\n<td align=\"center\">1108102</td>\n<td align=\"center\">1607344</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">2547536</td>\n<td align=\"center\">1228021</td>\n<td align=\"center\">1756824</td>\n<td align=\"center\">2479774</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">2652258</td>\n<td align=\"center\">1320258</td>\n<td align=\"center\">1831889</td>\n<td align=\"center\">2617015</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">3336839</td>\n<td align=\"center\">1603754</td>\n<td align=\"center\">2212214</td>\n<td align=\"center\">3079872</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">7282230</td>\n<td align=\"center\">4337074</td>\n<td align=\"center\">5787540</td>\n<td align=\"center\">7962849</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">2635183</td>\n<td align=\"center\">1511290</td>\n<td align=\"center\">1860418</td>\n<td align=\"center\">2641699</td>\n</tr>\n</tbody></table>\n<ul>\n<li>会出现压缩出来反而比原图大的问题，后面会讨论</li>\n<li>在没有裁剪的情况下，压到0.6依旧不是太理想，特别是分辨率更高的照片。</li>\n<li>在excel表格中将数据组成折线图，可以看出在0.9、0.8的时候下降幅度较大，后面相对平缓一点。</li>\n</ul>\n<h2 id=\"实验五：等比例裁剪后压缩质量的大致规律\"><a href=\"#实验五：等比例裁剪后压缩质量的大致规律\" class=\"headerlink\" title=\"实验五：等比例裁剪后压缩质量的大致规律\"></a>实验五：等比例裁剪后压缩质量的大致规律</h2><p>2448x3264照片等比例压缩到宽度1224像素时的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片1</th>\n<th align=\"center\">图片2</th>\n<th align=\"center\">图片3</th>\n<th align=\"center\">图片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">58975</td>\n<td align=\"center\">52025</td>\n<td align=\"center\">43301</td>\n<td align=\"center\">60029</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">64446</td>\n<td align=\"center\">55583</td>\n<td align=\"center\">46529</td>\n<td align=\"center\">65347</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">76982</td>\n<td align=\"center\">63805</td>\n<td align=\"center\">55494</td>\n<td align=\"center\">77891</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">99499</td>\n<td align=\"center\">77605</td>\n<td align=\"center\">76695</td>\n<td align=\"center\">100042</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">129826</td>\n<td align=\"center\">95116</td>\n<td align=\"center\">103949</td>\n<td align=\"center\">129597</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">173036</td>\n<td align=\"center\">120654</td>\n<td align=\"center\">144188</td>\n<td align=\"center\">173569</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">246847</td>\n<td align=\"center\">174977</td>\n<td align=\"center\">209876</td>\n<td align=\"center\">249223</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">303546</td>\n<td align=\"center\">208392</td>\n<td align=\"center\">261322</td>\n<td align=\"center\">308841</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">411181</td>\n<td align=\"center\">294795</td>\n<td align=\"center\">358003</td>\n<td align=\"center\">420013</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">1574657</td>\n<td align=\"center\">1280563</td>\n<td align=\"center\">1536779</td>\n<td align=\"center\">1566585</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">1714688</td>\n<td align=\"center\">1257647</td>\n<td align=\"center\">1353635</td>\n<td align=\"center\">1647936</td>\n</tr>\n</tbody></table>\n<p>3024x4032照片等比例压缩到宽度1224像素时的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片5</th>\n<th align=\"center\">图片6</th>\n<th align=\"center\">图片7</th>\n<th align=\"center\">图片8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">111697</td>\n<td align=\"center\">70802</td>\n<td align=\"center\">54321</td>\n<td align=\"center\">121994</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">127179</td>\n<td align=\"center\">77524</td>\n<td align=\"center\">61810</td>\n<td align=\"center\">136869</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">163959</td>\n<td align=\"center\">94048</td>\n<td align=\"center\">79713</td>\n<td align=\"center\">172194</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">225870</td>\n<td align=\"center\">122258</td>\n<td align=\"center\">113295</td>\n<td align=\"center\">230197</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">302097</td>\n<td align=\"center\">157160</td>\n<td align=\"center\">155152</td>\n<td align=\"center\">300772</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">395440</td>\n<td align=\"center\">202312</td>\n<td align=\"center\">210836</td>\n<td align=\"center\">385183</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">524345</td>\n<td align=\"center\">273895</td>\n<td align=\"center\">295530</td>\n<td align=\"center\">505417</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">623839</td>\n<td align=\"center\">323884</td>\n<td align=\"center\">363596</td>\n<td align=\"center\">593923</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">777293</td>\n<td align=\"center\">420943</td>\n<td align=\"center\">481205</td>\n<td align=\"center\">745946</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">2184791</td>\n<td align=\"center\">1530139</td>\n<td align=\"center\">1774130</td>\n<td align=\"center\">2291622</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">2635183</td>\n<td align=\"center\">1511290</td>\n<td align=\"center\">1860418</td>\n<td align=\"center\">2641699</td>\n</tr>\n</tbody></table>\n<ul>\n<li>可以看到裁剪这个分辨率后压缩质量0.6的大小相对可接受，而且图片质量影响也较小。</li>\n<li>在这个分辨率下，压缩质量0.8时基本压缩到1/4至1/5。</li>\n</ul>\n<h2 id=\"实验六：WebP压缩\"><a href=\"#实验六：WebP压缩\" class=\"headerlink\" title=\"实验六：WebP压缩\"></a>实验六：WebP压缩</h2><p>WebP据称在同等质量下大小可以压缩至JPEG的2/3。在iOS和Android都做了WebP的压缩测试，发现压缩速度非常慢，需要20s-35s，这是很不可接受的。上网查到WebP的压缩效率的确较慢，是JPEG的8倍左右，而且相比JPEG需要耗费更多的系统性能。所以本来想用WebP做兜底的方案暂时落空。</p>\n<h2 id=\"制定方案\"><a href=\"#制定方案\" class=\"headerlink\" title=\"制定方案\"></a>制定方案</h2><p>方案的目的是：</p>\n<ol>\n<li>上传图片不超时</li>\n<li>处理后质量清晰度可接受</li>\n<li>缩短上传耗时</li>\n</ol>\n<p>结合实验结论：</p>\n<ul>\n<li>根据实验一，平均上传速度100KB/s，另外我们测试很差情况下有15KB/s的情况。我们的接口超时30s，所以可接受的图片大小最大为450KB。</li>\n<li>根据实验二，等比例宽度取750-1242像素比较合适。</li>\n<li>根据实验三、四、五，等比例裁剪到宽度1224像素后压缩至0.6、0.7大小相对可接受。质量相对可接受（主观感受）。</li>\n<li><a href=\"http://www.mahaixiang.cn/Photoshop/400.html\" target=\"_blank\" rel=\"noopener\">JPG、PNG和GIF图片的基本原理及优化方法</a>讲到，通常建议JPG质量最好是在60左右的原因。当在Photoshop中把质量设置低于51的时候，它就会执行另一个叫做“降色采样”的优化算法，它会在8个像素周围平均采样，这样会在边缘产生杂色。</li>\n</ul>\n<p>定下方案：</p>\n<ol>\n<li>照片宽度大于1224像素（因为iPhone6照片宽度2448所以想取个可以整除的）时等比例裁剪宽度成1224。因为分辨率太大甚至两倍于手机分辨率实际没有任何用处。</li>\n<li>压缩质量系数至0.8(80)看下大小是否小于300KB，排除一些小分辨率的照片。小于则上传，大于则继续压缩，取0.7(70)，排除一些中等的，如果还大于则取0.6(60)后不判断直接上传。根据上面的实验可以看到在宽度1224像素下基本都会小于300KB，大于的则处于450KB内，且450KB是网速最差的情况，因此基本可以保证上传。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>方案目前看压缩的质量和时间控制都相对较好，但是还要继续观察一段时间看需不需要再调整参数。在这过程中理清了很多概念，了解了图片压缩过程中发生了什么事情，挺有趣的，根本停不下来。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p>文中涉及到的一些概念以及发现的一些其他相关事情。</p>\n<h2 id=\"图像的一些概念澄清\"><a href=\"#图像的一些概念澄清\" class=\"headerlink\" title=\"图像的一些概念澄清\"></a>图像的一些概念澄清</h2><p>其实图像真正的信息是它的<strong>总分辨率</strong>（图像宽度x图像高度）和<strong>分辨率</strong>（水平分辨率&amp;垂直分辨率），<strong>而涉及到英寸、厘米等长度单位时的大小，其实不是图像的信息，只是在涉及到外部，比如打印、设备屏幕显示等等时，换算出来的。</strong></p>\n<ul>\n<li>水平分辨率&amp;垂直分辨率</li>\n</ul>\n<p>分辨率一般单位ppi（也有dpi），即每英寸上多少个像素。水平分辨率即水平方向上像素个数/水平长度，垂直分辨率同理。<strong>一般水平分辨率和垂直分辨率是相等的，所以日常也简称为分辨率。</strong>dpi即每英寸上多少点。这两个单位根据不同显示设备有换算关系。</p>\n<ul>\n<li>图像宽度&amp;图像高度</li>\n</ul>\n<p>其实标准些，讲宽度&amp;高度时一般是讲图像水平/垂直上有多少个像素。如一张2448x3264的照片，则宽度是2448像素，高度是3264像素。也有讲宽度是86.36厘米，高度是115.15厘米，一般在打印照片等情况下。</p>\n<ul>\n<li>分辨率</li>\n</ul>\n<p>日常讲分辨率时其实可以指很多情况，一般指图像宽度x高度，如2448x3264，指水平上有2448个像素，垂直上有3264个像素。</p>\n<h2 id=\"压缩算法概念\"><a href=\"#压缩算法概念\" class=\"headerlink\" title=\"压缩算法概念\"></a>压缩算法概念</h2><ul>\n<li>JPEG</li>\n</ul>\n<p>一个名称为Joint Photographic Experts Group的组织，也是一种压缩算法。JPEG本身只有描述如何将一个视频转换为字节的数据流（streaming），但<strong>并没有说明这些字节如何在任何特定的存储媒体上被封存起来</strong>。JPEG有有损压缩和无损压缩，无损压缩的没有得到什么支持，所以一般讲JPEG指它的有损压缩。</p>\n<ul>\n<li>JFIF</li>\n</ul>\n<p>JPEG File Interchange Format，JPEG文件交换格式，<strong>详细说明如何从一个JPEG流，产出一个适合于电脑存储和传输的文件</strong>。一般后缀有.jpeg、.jpg、.jfif以及.jif。</p>\n<ul>\n<li>Bitmap</li>\n</ul>\n<p>又称栅格图，是使用像素阵列来表示的图像。非压缩格式，从左往右从上往下扫描，占用较大存储空间。</p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/JPEG\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/JPEG</a><br><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE</a></p>\n</blockquote>\n<h2 id=\"微信图片处理规律\"><a href=\"#微信图片处理规律\" class=\"headerlink\" title=\"微信图片处理规律\"></a>微信图片处理规律</h2><p>经过简单测试发现，在微信，A发一张原图给B时，B直接保存缩略图：</p>\n<ul>\n<li>iOS版的微信保存下来是等比例压缩高度为800，质量80。</li>\n<li>Android版的微信保存下来是等比例压缩高度为1280，质量80。</li>\n</ul>\n<p>朋友圈的图片保存下来，都是等比例到高1280像素，质量和大小还没找到规律。<br>为什么微信是取高固定而不是宽呢？可以思考下。</p>\n<h2 id=\"Base64编码后大小\"><a href=\"#Base64编码后大小\" class=\"headerlink\" title=\"Base64编码后大小\"></a>Base64编码后大小</h2><p>我们现在还用着Base64编码图像数据，后面需改成提交表单方式。</p>\n<p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，<strong>转换后的字符串理论上将要比原来的长1/3</strong>。</p>\n<h2 id=\"iOS的pt与Android的sp\"><a href=\"#iOS的pt与Android的sp\" class=\"headerlink\" title=\"iOS的pt与Android的sp\"></a>iOS的pt与Android的sp</h2><p>我在<a href=\"https://sapphirezzz.github.io/blog/2016/01/17/ios-devices-info/\" target=\"_blank\" rel=\"noopener\">iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率</a>文章里讲了iOS设备的pt和px关系。<br>iOS的pt是开发单位，一个逻辑point对应一个点dot。@1x设备上一个pt上显示1个px（像素），@2x上一个pt显示2个px，@3x上显示3个px。平时在storyboard上设置时指的都是pt。</p>\n<p>Android的sp一种基于屏幕密度的抽象单位。</p>\n<h2 id=\"Android图片质量会比iPhone的差？\"><a href=\"#Android图片质量会比iPhone的差？\" class=\"headerlink\" title=\"Android图片质量会比iPhone的差？\"></a>Android图片质量会比iPhone的差？</h2><p>在<a href=\"http://www.cnblogs.com/MaxIE/p/3951294.html\" target=\"_blank\" rel=\"noopener\">为什么Android的图片质量会比iPhone的差？</a>、<a href=\"http://www.eoeandroid.com/thread-570303-1-3.html?_dsign=bc58b99e\" target=\"_blank\" rel=\"noopener\">[Android算法] 【04/28 bug修改】android图片压缩终极解决方案</a>、<a href=\"http://www.cnblogs.com/hrlnw/p/4403334.html\" target=\"_blank\" rel=\"noopener\">Android图片编码机制深度解析（Bitmap，Skia，libJpeg）</a>三篇文章中讲了Android系统在压缩上的一些不为人知的问题。</p>\n<p>大致是，Android编码保存图片就是通过Java层函数——Native层函数——Skia库函数——对应第三方库函数（例如libjpeg），这一层层调用做到的。 libjpeg在压缩图像时，有一个参数叫optimize_coding，如果设置optimize_coding为TRUE，将会使得压缩图像过程中基于图像数据计算哈弗曼表，由于这个计算会显著消耗空间和时间，默认值被设置为FALSE。对于当时的计算设备来说，空间和时间的消耗可能是显著的，但到今天，这似乎不应再是问题。但谷歌的Skia项目工程师们对optimize_coding在Skia中默认的等于了FALSE，这就意味着更差的图片质量和更大的图片文件。还有其他和iOS的比较可以看下。</p>\n<p>也讲到了Android可以替换libjpeg库达到设置为TRUE的目的。</p>\n<h2 id=\"iOS的UIImage保存图片问题\"><a href=\"#iOS的UIImage保存图片问题\" class=\"headerlink\" title=\"iOS的UIImage保存图片问题\"></a>iOS的UIImage保存图片问题</h2><p>起初发现压缩后保存图片，不同压缩质量系数，得出来的文件大小趋势和计算出的大小趋势不同，所以怀疑使用NSData初始化UIImage时多做了什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData *imageData06 = UIImageJPEGRepresentation(scaledImage, 0.6);</span><br><span class=\"line\">UIImage *image06 = [UIImage imageWithData:imageData06];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(image06, nil, nil, nil);</span><br></pre></td></tr></table></figure>\n\n<p>通过软件发现，不同压缩质量系数，得出来的NSData保存成UIImage图片，看到的质量都是92，按道理应该是对应的质量系数才对。于是想将NSData保存成文件到目录，读取出文件大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documents = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath = [documents stringByAppendingPathComponent:@&quot;image.jpg&quot;];</span><br><span class=\"line\">NSData *imageData = UIImageJPEGRepresentation(image, 0.7);</span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">[imageData writeToFile:filePath options:NSDataWritingAtomic error:&amp;error];</span><br><span class=\"line\">if (error != nil) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;error = %@&quot;, error);</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">\tNSLog(@&quot;success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;imageData = %u&quot;, (unsigned)imageData.length);</span><br><span class=\"line\">NSFileManager* manager = [NSFileManager defaultManager];</span><br><span class=\"line\">if ([manager fileExistsAtPath:filePath])&#123;</span><br><span class=\"line\">\tunsigned long long size = [[manager attributesOfItemAtPath:filePath error:nil] fileSize];</span><br><span class=\"line\">\tNSLog(@&quot;0.7后文件大小 %llu&quot;, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">UIImage *imageFromData = [UIImage imageWithData:imageData];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(imageFromData, nil, nil, nil);</span><br><span class=\"line\">UIImage *imageRead = [[UIImage alloc] initWithContentsOfFile:filePath];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(imageRead, nil, nil, nil);</span><br></pre></td></tr></table></figure>\n\n<p>读取文件大小size和NSData大小imageData.length打印一致，而与imageRead、imageFromData的大小不一样，因此可以证明UIImage这个对象本身还做了其他事情。</p>\n<p>在<a href=\"http://www.udpwork.com/item/13533.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析</a>这篇文章的截图显示，UIImage的imageWithData方法堆栈显示还调用了哈夫曼解码。</p>\n<h2 id=\"压缩再压缩做了什么\"><a href=\"#压缩再压缩做了什么\" class=\"headerlink\" title=\"压缩再压缩做了什么\"></a>压缩再压缩做了什么</h2><ol>\n<li>首先谈下看图软件怎么展示图片。打开.jpg图片时，看图软件将文件转换成位图才显示出来，即把量化表矩阵与基本转化矩阵运算得出图片当前的位图（因为经过了压缩，所以该位图与原位图不同）。</li>\n<li>压缩后再压缩也是，先将图片变回位图，再将位图按现在的压缩质量系数压缩。</li>\n<li>所以压缩后的图片有可能变大，我猜测原因是，压缩前的占用空间压缩率较大，而再压缩时选的质量系数较大，导致压缩占用空间率（即压缩的第二步）较小，所以导致质量其实是变差了，但是占用空间反而可能变大。</li>\n</ol>\n<p>变大的例子如：本来图片A大小500KB，压缩质量系数选择0.7，得到B图片90KB，再拿这张B图片去压，压缩质量系数1.0，得出C图片。前面我们说压缩不仅压缩质量，还压缩占用空间。如果第一次压缩的压缩质量比例跟第二次压缩的比例的差值，比第一次压缩的压缩占用空间比例跟第二次的压缩占用空间比例的差值小，那么C图片就会比B图片大。因为虽然C图片质量比B图片质量差点，但是B图片的空间压缩得比C图片大比较多。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>App怎么压缩质量？<ul>\n<li>iOS和Android压缩接口</li>\n<li>实验一</li>\n</ul>\n</li>\n<li>如何计算图片的大小？</li>\n<li>JPEG&amp;JFIF压缩做了什么？<ul>\n<li>色彩空间转换</li>\n<li>缩减取样</li>\n<li>离散余弦变换</li>\n<li>量化</li>\n<li>编码</li>\n</ul>\n</li>\n<li>App怎么裁剪分辨率？</li>\n<li>图片压缩裁剪上传方案<ul>\n<li>实验一：上传速度</li>\n<li>实验二：用户设备主要分辨率</li>\n<li>实验三：上传的照片的主要分辨率</li>\n<li>实验四：压缩质量的大致规律</li>\n<li>实验五：等比例裁剪后压缩质量的大致规律</li>\n<li>实验六：WebP压缩</li>\n<li>制定方案</li>\n</ul>\n</li>\n<li>总结</li>\n<li>附录<ul>\n<li>图像的一些概念澄清</li>\n<li>压缩算法概念</li>\n<li>微信图片处理规律</li>\n<li>Base64编码后大小</li>\n<li>iOS的pt与Android的sp</li>\n<li>Android图片质量会比iPhone的差？</li>\n<li>iOS的UIImage保存图片问题</li>\n<li>压缩再压缩做了什么</li>\n</ul>\n</li>\n</ul>\n<p>最近有反馈说App上传图片偶尔会失败，特别是在网速慢和iPhone 6s的机器上。有些提示是“413 Request Entity Too Large”，Request大小1.15MB。之前只是简单地压到0.7，没有做裁剪等其他处理。</p>\n<p>所以这几天整体研究下iOS和Android的图片压缩裁剪和JPEG压缩原理，也稍微找了微信发图片的规律，越深入发现越多有趣的东西，问题一环扣一环。</p>\n<h1 id=\"App怎么压缩质量？\"><a href=\"#App怎么压缩质量？\" class=\"headerlink\" title=\"App怎么压缩质量？\"></a>App怎么压缩质量？</h1><p>最先接触的是压缩质量，所以看下压缩质量做了什么。</p>\n<h2 id=\"iOS和Android压缩接口\"><a href=\"#iOS和Android压缩接口\" class=\"headerlink\" title=\"iOS和Android压缩接口\"></a>iOS和Android压缩接口</h2><p>iOS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImageJPEGRepresentation(UIImage * __nonnull image, CGFloat compressionQuality);  </span><br><span class=\"line\">// return image as JPEG. May return nil if image has no CGImageRef or invalid bitmap format. compression is 0(most)..1(least)</span><br></pre></td></tr></table></figure>\n\n<p>Android:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\">    * Write a compressed version of the bitmap to the specified outputstream. </span><br><span class=\"line\">    * If this returns true, the bitmap can be reconstructed by passing a </span><br><span class=\"line\">    * corresponding inputstream to BitmapFactory.decodeStream(). Note: not </span><br><span class=\"line\">    * all Formats support all bitmap configs directly, so it is possible that </span><br><span class=\"line\">    * the returned bitmap from BitmapFactory could be in a different bitdepth, </span><br><span class=\"line\">    * and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque </span><br><span class=\"line\">    * pixels). </span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @param format   The format of the compressed image </span><br><span class=\"line\">    * @param quality  Hint to the compressor, 0-100. 0 meaning compress for </span><br><span class=\"line\">    *                 small size, 100 meaning compress for max quality. Some </span><br><span class=\"line\">    *                 formats, like PNG which is lossless, will ignore the </span><br><span class=\"line\">    *                 quality setting </span><br><span class=\"line\">    * @param stream   The outputstream to write the compressed data. </span><br><span class=\"line\">    * @return true if successfully compressed to the specified stream. </span><br><span class=\"line\">*/</span><br><span class=\"line\">compress(CompressFormat format, int quality, OutputStream stream)</span><br></pre></td></tr></table></figure>\n\n<p>从官方注释看，iOS的compressionQuality取值从0-1，且“1”注明是least，也就是说<strong>“1”不是不压缩，而是压缩强度最弱</strong>；Android的quality取值0-100，也是<strong>100代表最大质量，不是不压缩</strong>。最后面测试也验证了这个问题，而<em>不是网上很多文档说的不压缩</em>。我们先统称compressionQuality和quality为质量系数，下文也是。</p>\n<h2 id=\"实验一\"><a href=\"#实验一\" class=\"headerlink\" title=\"实验一\"></a>实验一</h2><p>于是拍了一张照片A，然后Android和iOS都压缩得到照片B。</p>\n<p>对比了A、B两张图，想看看到底影响了什么：</p>\n<blockquote>\n<p>宽度：2448像素<br>高度：3264像素<br>分辨率：72像素/英寸<br>文档：22.9MB<br>通道：3（RGB）</p>\n</blockquote>\n<p>注：<em>需弄明白附录的关于图像的一些概念澄清</em>。</p>\n<p>两张照片看到的参数都一样，那为什么它们的文件大小会不一样呢？（<em>过程中发现iOS的UIImage会做多一些工作，使得实验结果有误，原因后面会提到。</em>）（用Picasa看图软件可以查看质量，数值上看到等于我们的质量系数）所以就想到第二个问题，文件大小怎么计算的？由什么决定？</p>\n<h1 id=\"如何计算图片的大小？\"><a href=\"#如何计算图片的大小？\" class=\"headerlink\" title=\"如何计算图片的大小？\"></a>如何计算图片的大小？</h1><p>总分辨率 * 像素表示的位数。</p>\n<p>像素表示的位数：这就涉及到色彩模式，比较常见有RGB、CMYK、YUV等。RGB一般用RGB24（还有RGB555、RGB565、RGB32），即红绿蓝都分别用8位表示，所以用了24位表示一个像素，可以组合出2^24种颜色。</p>\n<p>上面两张图水平有2448个像素，垂直有3264个像素，每个像素用24b表示，按这公式大小应该都是：2448x3264x24b＝23970816B=22.86MB。为什么呢？</p>\n<p>后来明白，原来这公式是算位图的占用空间大小，而JPEG&amp;JFIF是将位图压缩，不仅压缩图像质量还压缩图像占用空间（后面会讲到）。也就是说<strong>图像压缩不等于压缩质量和分辨率，还有压缩占用空间</strong>。</p>\n<p>网上查到JFIF文件没有计算大小的公式，因为压缩质量和压缩后大小没有特定关系，如线性关系。<strong>那\b么JPEG&amp;JFIF压缩做了什么？这个质量到底代表了什么？</strong></p>\n<h1 id=\"JPEG-amp-JFIF压缩做了什么？\"><a href=\"#JPEG-amp-JFIF压缩做了什么？\" class=\"headerlink\" title=\"JPEG&amp;JFIF压缩做了什么？\"></a>JPEG&amp;JFIF压缩做了什么？</h1><p>其实JPEG&amp;JFIF做了两件事情：</p>\n<ol>\n<li>去掉视觉上的冗余信息</li>\n<li>去掉数据本身结构的冗余</li>\n</ol>\n<p>第一步实现通过色彩空间转换、缩减取样、离散余弦变换、量化，第二步实现通过编码。</p>\n<p>其实这部分可以选择跳过，只是我为了理解压缩质量是怎么体现的而去看的，后面也发现理解后很多问题都很清晰明白。</p>\n<h2 id=\"色彩空间转换\"><a href=\"#色彩空间转换\" class=\"headerlink\" title=\"色彩空间转换\"></a>色彩空间转换</h2><p>JPEG需要YUV色彩模式，所以需要将RGB转成YUV：</p>\n<ul>\n<li>Y=0.299R’+0.587G’+0.114B’</li>\n<li>U=-0.147R’-0.289G’+0.436B’</li>\n<li>V=0.615R’-0.515G’-0.100B’</li>\n</ul>\n<h2 id=\"缩减取样\"><a href=\"#缩减取样\" class=\"headerlink\" title=\"缩减取样\"></a>缩减取样</h2><p>YUV分别代表亮度、色度、饱和度，因为人类的眼睛对于亮度差异的敏感度高于色彩变化，所以一般会对U、V进行缩减采样。在JPEG上这种缩减取样的比例可以是4:4:4（无缩减取样）、4:2:2、4:2:0。所以经常会看到YUV444，YUV422和YUV420等。</p>\n<h2 id=\"离散余弦变换\"><a href=\"#离散余弦变换\" class=\"headerlink\" title=\"离散余弦变换\"></a>离散余弦变换</h2><p>将每个8x8的子区域转换到频率空间，这部分是无损的。</p>\n<p>-415 -30 -61  27  56 -20 -2  0<br>   4    -22 -61  10  13  -7  -9  5<br>  -47   7   77  -25 -29 10  5  -6<br>  -49  12  34  -15 -10  6   2   2<br>  12   -7  -13   -4   -2   2   -3  3<br>   -8    3    2     -6   -2   1   4   2<br>  -1     0    0    -2    -1   -3  4  -1<br>   0     0    -1   -4    -1    0   1  2</p>\n<h2 id=\"量化\"><a href=\"#量化\" class=\"headerlink\" title=\"量化\"></a>量化</h2><p>量化是有损的过程，也是失真的主要原因。上面矩阵中每个值都是幅度，量化是利用人眼特点在高频率上降低信息的数量（简单地把频率领域上每个成分，除以一个对于该成分的常数就可完成，且接着舍位取最接近的整数），与一个基本矩阵运算然后得到一个新的矩阵，<strong>该新矩阵数据基本集中在左上角</strong>。</p>\n<p>其实<strong>量化做的就是减少非0系数幅度和增加0值系数的个数</strong>。<br><strong>我们接口中的质量系数就是和这里的基本矩阵有关。</strong></p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>Z扫描0值行程长度编码、哈夫曼编码。<br>Z扫描0值行程长度编码利用了量化后矩阵的特点，使得0值的都能串在最后面，对于过早结束的最后用EOB表示。<br>这一步就是<strong>压缩文件的占用空间</strong>。</p>\n<h1 id=\"App怎么裁剪分辨率？\"><a href=\"#App怎么裁剪分辨率？\" class=\"headerlink\" title=\"App怎么裁剪分辨率？\"></a>App怎么裁剪分辨率？</h1><p>弄清楚压缩质量问题后，我们知道，影响位图的大小有分辨率，那么减少分辨率也就能使压缩得更小了。注意这里裁剪分辨率不等于裁剪图片，不会丢失图片的某一部分。</p>\n<p>iOS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIGraphicsBeginImageContext(newSize);</span><br><span class=\"line\">[imageFixed drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];</span><br><span class=\"line\">UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br></pre></td></tr></table></figure>\n\n<p>Android:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bitmap image = BitmapFactory.decodeStream(file);</span><br><span class=\"line\">int bitmapWidth = image.getWidth();</span><br><span class=\"line\">int bitmapHeight = image.getHeight();</span><br><span class=\"line\">Matrix matrix = new Matrix();</span><br><span class=\"line\">matrix.postScale(scaleRatio, scaleRatio);</span><br><span class=\"line\">Bitmap scaledBitmap = Bitmap.createBitmap(image, 0, 0, bitmapWidth, bitmapHeight, matrix, false);</span><br></pre></td></tr></table></figure>\n\n<p>我们是等比例裁剪，比例和裁剪后占用空间大小并不一定成线性关系，这个裁剪具体怎么实现的和每个像素的质量有关系。</p>\n<h1 id=\"图片压缩裁剪上传方案\"><a href=\"#图片压缩裁剪上传方案\" class=\"headerlink\" title=\"图片压缩裁剪上传方案\"></a>图片压缩裁剪上传方案</h1><p>明白一个图片的清晰度等受什么影响之后，可以来定下方案了，但是还得做些测试获取数据，依据数据结果来定方案。</p>\n<h2 id=\"实验一：上传速度\"><a href=\"#实验一：上传速度\" class=\"headerlink\" title=\"实验一：上传速度\"></a>实验一：上传速度</h2><p>我们用Charles模拟了各种网络环境下上传相同照片的网速：</p>\n<p>|   环境   |  wifi  |  8M   |  16M   |  32M   |<br>| :—-: | :—-: | :—: | :—-: |<br>| 速度KB/s | 754.78 | 115.4 | 115.78 | 116.25 |</p>\n<p>|   环境   |  32M光纤  | 100M光纤 |   3G   |   4G   |<br>| :—-: | :—-: | :—: | :—-: |<br>| 速度KB/s | 174.65 | 167.33 | 114.18 | 174.73 |</p>\n<p>这些不等价于我们用户的网速平均值，而且只取一次样本，所以只是作为参考。</p>\n<h2 id=\"实验二：用户设备主要分辨率\"><a href=\"#实验二：用户设备主要分辨率\" class=\"headerlink\" title=\"实验二：用户设备主要分辨率\"></a>实验二：用户设备主要分辨率</h2><p>因为照片都是在用户设备上看的，所以了解下用户的主流分辨率，将分辨率裁剪到趋近或稍大于该主流分辨率会比较适合。iOS和Android都取接近的值。</p>\n<p>在友盟查看了我们的应用的相关数据：</p>\n<ul>\n<li>Android，较大占比的是宽度1080像素和720像素的设备。宽度1080像素的，新增用户占比49.69%，启动次数占比44.29%；宽度720像素的，新增用户占比32.47%，启动次数占比37.76%。</li>\n<li>iOS，较大占比的是宽度1242像素、750像素和640像素的设备。宽度1242像素的，新增用户占比31.84%，启动次数占比26.91%；宽度750像素的，新增用户占比36.20%，启动次数占比31.59%；宽度640像素的，新增用户占比20.36%，启动次数占比20.84%。</li>\n</ul>\n<h2 id=\"实验三：上传的照片的主要分辨率\"><a href=\"#实验三：上传的照片的主要分辨率\" class=\"headerlink\" title=\"实验三：上传的照片的主要分辨率\"></a>实验三：上传的照片的主要分辨率</h2><p>找下上传的照片的主要分辨率，可以针对这些分辨率去确定和衡量方案。<br>也是在友盟上看我们的应用的数据：</p>\n<ul>\n<li>iOS主流机型是iPhone6、iPhone6s、iPhone6 Plus、iPhone6s Plus，占到70%左右。它们的拍照分辨率分别是2448x3264，3024x4032。</li>\n<li>Android相对较碎片化，只能是针对最大的分辨率去衡量。</li>\n</ul>\n<h2 id=\"实验四：压缩质量的大致规律\"><a href=\"#实验四：压缩质量的大致规律\" class=\"headerlink\" title=\"实验四：压缩质量的大致规律\"></a>实验四：压缩质量的大致规律</h2><p>2448x3264照片压缩后的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片1</th>\n<th align=\"center\">图片2</th>\n<th align=\"center\">图片3</th>\n<th align=\"center\">图片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">197777</td>\n<td align=\"center\">174464</td>\n<td align=\"center\">152897</td>\n<td align=\"center\">195214</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">212779</td>\n<td align=\"center\">183532</td>\n<td align=\"center\">163225</td>\n<td align=\"center\">209426</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">253658</td>\n<td align=\"center\">205512</td>\n<td align=\"center\">196188</td>\n<td align=\"center\">248320</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">360091</td>\n<td align=\"center\">256013</td>\n<td align=\"center\">283607</td>\n<td align=\"center\">349968</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">498199</td>\n<td align=\"center\">336823</td>\n<td align=\"center\">390525</td>\n<td align=\"center\">485286</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">724491</td>\n<td align=\"center\">488737</td>\n<td align=\"center\">548437</td>\n<td align=\"center\">698421</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">1209508</td>\n<td align=\"center\">883664</td>\n<td align=\"center\">936968</td>\n<td align=\"center\">1161342</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">1475669</td>\n<td align=\"center\">1063724</td>\n<td align=\"center\">1130241</td>\n<td align=\"center\">1415084</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">1700461</td>\n<td align=\"center\">1247600</td>\n<td align=\"center\">1334143</td>\n<td align=\"center\">1636293</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">4568157</td>\n<td align=\"center\">3629379</td>\n<td align=\"center\">4139209</td>\n<td align=\"center\">4433556</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">1714688</td>\n<td align=\"center\">1257647</td>\n<td align=\"center\">1353635</td>\n<td align=\"center\">1647936</td>\n</tr>\n</tbody></table>\n<p>3024x4032照片压缩后的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片5</th>\n<th align=\"center\">图片6</th>\n<th align=\"center\">图片7</th>\n<th align=\"center\">图片8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">551527</td>\n<td align=\"center\">325434</td>\n<td align=\"center\">296792</td>\n<td align=\"center\">492494</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">619307</td>\n<td align=\"center\">352608</td>\n<td align=\"center\">328183</td>\n<td align=\"center\">547533</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">785915</td>\n<td align=\"center\">422342</td>\n<td align=\"center\">416459</td>\n<td align=\"center\">683265</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">1061504</td>\n<td align=\"center\">537826</td>\n<td align=\"center\">589206</td>\n<td align=\"center\">931686</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">1408297</td>\n<td align=\"center\">891288</td>\n<td align=\"center\">839938</td>\n<td align=\"center\">1290788</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">2071014</td>\n<td align=\"center\">973894</td>\n<td align=\"center\">1108102</td>\n<td align=\"center\">1607344</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">2547536</td>\n<td align=\"center\">1228021</td>\n<td align=\"center\">1756824</td>\n<td align=\"center\">2479774</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">2652258</td>\n<td align=\"center\">1320258</td>\n<td align=\"center\">1831889</td>\n<td align=\"center\">2617015</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">3336839</td>\n<td align=\"center\">1603754</td>\n<td align=\"center\">2212214</td>\n<td align=\"center\">3079872</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">7282230</td>\n<td align=\"center\">4337074</td>\n<td align=\"center\">5787540</td>\n<td align=\"center\">7962849</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">2635183</td>\n<td align=\"center\">1511290</td>\n<td align=\"center\">1860418</td>\n<td align=\"center\">2641699</td>\n</tr>\n</tbody></table>\n<ul>\n<li>会出现压缩出来反而比原图大的问题，后面会讨论</li>\n<li>在没有裁剪的情况下，压到0.6依旧不是太理想，特别是分辨率更高的照片。</li>\n<li>在excel表格中将数据组成折线图，可以看出在0.9、0.8的时候下降幅度较大，后面相对平缓一点。</li>\n</ul>\n<h2 id=\"实验五：等比例裁剪后压缩质量的大致规律\"><a href=\"#实验五：等比例裁剪后压缩质量的大致规律\" class=\"headerlink\" title=\"实验五：等比例裁剪后压缩质量的大致规律\"></a>实验五：等比例裁剪后压缩质量的大致规律</h2><p>2448x3264照片等比例压缩到宽度1224像素时的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片1</th>\n<th align=\"center\">图片2</th>\n<th align=\"center\">图片3</th>\n<th align=\"center\">图片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">58975</td>\n<td align=\"center\">52025</td>\n<td align=\"center\">43301</td>\n<td align=\"center\">60029</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">64446</td>\n<td align=\"center\">55583</td>\n<td align=\"center\">46529</td>\n<td align=\"center\">65347</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">76982</td>\n<td align=\"center\">63805</td>\n<td align=\"center\">55494</td>\n<td align=\"center\">77891</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">99499</td>\n<td align=\"center\">77605</td>\n<td align=\"center\">76695</td>\n<td align=\"center\">100042</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">129826</td>\n<td align=\"center\">95116</td>\n<td align=\"center\">103949</td>\n<td align=\"center\">129597</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">173036</td>\n<td align=\"center\">120654</td>\n<td align=\"center\">144188</td>\n<td align=\"center\">173569</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">246847</td>\n<td align=\"center\">174977</td>\n<td align=\"center\">209876</td>\n<td align=\"center\">249223</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">303546</td>\n<td align=\"center\">208392</td>\n<td align=\"center\">261322</td>\n<td align=\"center\">308841</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">411181</td>\n<td align=\"center\">294795</td>\n<td align=\"center\">358003</td>\n<td align=\"center\">420013</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">1574657</td>\n<td align=\"center\">1280563</td>\n<td align=\"center\">1536779</td>\n<td align=\"center\">1566585</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">1714688</td>\n<td align=\"center\">1257647</td>\n<td align=\"center\">1353635</td>\n<td align=\"center\">1647936</td>\n</tr>\n</tbody></table>\n<p>3024x4032照片等比例压缩到宽度1224像素时的数据大小（单位B）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">压缩强度</th>\n<th align=\"center\">图片5</th>\n<th align=\"center\">图片6</th>\n<th align=\"center\">图片7</th>\n<th align=\"center\">图片8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0.1</td>\n<td align=\"center\">111697</td>\n<td align=\"center\">70802</td>\n<td align=\"center\">54321</td>\n<td align=\"center\">121994</td>\n</tr>\n<tr>\n<td align=\"center\">0.2</td>\n<td align=\"center\">127179</td>\n<td align=\"center\">77524</td>\n<td align=\"center\">61810</td>\n<td align=\"center\">136869</td>\n</tr>\n<tr>\n<td align=\"center\">0.3</td>\n<td align=\"center\">163959</td>\n<td align=\"center\">94048</td>\n<td align=\"center\">79713</td>\n<td align=\"center\">172194</td>\n</tr>\n<tr>\n<td align=\"center\">0.4</td>\n<td align=\"center\">225870</td>\n<td align=\"center\">122258</td>\n<td align=\"center\">113295</td>\n<td align=\"center\">230197</td>\n</tr>\n<tr>\n<td align=\"center\">0.5</td>\n<td align=\"center\">302097</td>\n<td align=\"center\">157160</td>\n<td align=\"center\">155152</td>\n<td align=\"center\">300772</td>\n</tr>\n<tr>\n<td align=\"center\">0.6</td>\n<td align=\"center\">395440</td>\n<td align=\"center\">202312</td>\n<td align=\"center\">210836</td>\n<td align=\"center\">385183</td>\n</tr>\n<tr>\n<td align=\"center\">0.7</td>\n<td align=\"center\">524345</td>\n<td align=\"center\">273895</td>\n<td align=\"center\">295530</td>\n<td align=\"center\">505417</td>\n</tr>\n<tr>\n<td align=\"center\">0.8</td>\n<td align=\"center\">623839</td>\n<td align=\"center\">323884</td>\n<td align=\"center\">363596</td>\n<td align=\"center\">593923</td>\n</tr>\n<tr>\n<td align=\"center\">0.9</td>\n<td align=\"center\">777293</td>\n<td align=\"center\">420943</td>\n<td align=\"center\">481205</td>\n<td align=\"center\">745946</td>\n</tr>\n<tr>\n<td align=\"center\">1.0</td>\n<td align=\"center\">2184791</td>\n<td align=\"center\">1530139</td>\n<td align=\"center\">1774130</td>\n<td align=\"center\">2291622</td>\n</tr>\n<tr>\n<td align=\"center\">原图占用</td>\n<td align=\"center\">2635183</td>\n<td align=\"center\">1511290</td>\n<td align=\"center\">1860418</td>\n<td align=\"center\">2641699</td>\n</tr>\n</tbody></table>\n<ul>\n<li>可以看到裁剪这个分辨率后压缩质量0.6的大小相对可接受，而且图片质量影响也较小。</li>\n<li>在这个分辨率下，压缩质量0.8时基本压缩到1/4至1/5。</li>\n</ul>\n<h2 id=\"实验六：WebP压缩\"><a href=\"#实验六：WebP压缩\" class=\"headerlink\" title=\"实验六：WebP压缩\"></a>实验六：WebP压缩</h2><p>WebP据称在同等质量下大小可以压缩至JPEG的2/3。在iOS和Android都做了WebP的压缩测试，发现压缩速度非常慢，需要20s-35s，这是很不可接受的。上网查到WebP的压缩效率的确较慢，是JPEG的8倍左右，而且相比JPEG需要耗费更多的系统性能。所以本来想用WebP做兜底的方案暂时落空。</p>\n<h2 id=\"制定方案\"><a href=\"#制定方案\" class=\"headerlink\" title=\"制定方案\"></a>制定方案</h2><p>方案的目的是：</p>\n<ol>\n<li>上传图片不超时</li>\n<li>处理后质量清晰度可接受</li>\n<li>缩短上传耗时</li>\n</ol>\n<p>结合实验结论：</p>\n<ul>\n<li>根据实验一，平均上传速度100KB/s，另外我们测试很差情况下有15KB/s的情况。我们的接口超时30s，所以可接受的图片大小最大为450KB。</li>\n<li>根据实验二，等比例宽度取750-1242像素比较合适。</li>\n<li>根据实验三、四、五，等比例裁剪到宽度1224像素后压缩至0.6、0.7大小相对可接受。质量相对可接受（主观感受）。</li>\n<li><a href=\"http://www.mahaixiang.cn/Photoshop/400.html\" target=\"_blank\" rel=\"noopener\">JPG、PNG和GIF图片的基本原理及优化方法</a>讲到，通常建议JPG质量最好是在60左右的原因。当在Photoshop中把质量设置低于51的时候，它就会执行另一个叫做“降色采样”的优化算法，它会在8个像素周围平均采样，这样会在边缘产生杂色。</li>\n</ul>\n<p>定下方案：</p>\n<ol>\n<li>照片宽度大于1224像素（因为iPhone6照片宽度2448所以想取个可以整除的）时等比例裁剪宽度成1224。因为分辨率太大甚至两倍于手机分辨率实际没有任何用处。</li>\n<li>压缩质量系数至0.8(80)看下大小是否小于300KB，排除一些小分辨率的照片。小于则上传，大于则继续压缩，取0.7(70)，排除一些中等的，如果还大于则取0.6(60)后不判断直接上传。根据上面的实验可以看到在宽度1224像素下基本都会小于300KB，大于的则处于450KB内，且450KB是网速最差的情况，因此基本可以保证上传。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>方案目前看压缩的质量和时间控制都相对较好，但是还要继续观察一段时间看需不需要再调整参数。在这过程中理清了很多概念，了解了图片压缩过程中发生了什么事情，挺有趣的，根本停不下来。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p>文中涉及到的一些概念以及发现的一些其他相关事情。</p>\n<h2 id=\"图像的一些概念澄清\"><a href=\"#图像的一些概念澄清\" class=\"headerlink\" title=\"图像的一些概念澄清\"></a>图像的一些概念澄清</h2><p>其实图像真正的信息是它的<strong>总分辨率</strong>（图像宽度x图像高度）和<strong>分辨率</strong>（水平分辨率&amp;垂直分辨率），<strong>而涉及到英寸、厘米等长度单位时的大小，其实不是图像的信息，只是在涉及到外部，比如打印、设备屏幕显示等等时，换算出来的。</strong></p>\n<ul>\n<li>水平分辨率&amp;垂直分辨率</li>\n</ul>\n<p>分辨率一般单位ppi（也有dpi），即每英寸上多少个像素。水平分辨率即水平方向上像素个数/水平长度，垂直分辨率同理。<strong>一般水平分辨率和垂直分辨率是相等的，所以日常也简称为分辨率。</strong>dpi即每英寸上多少点。这两个单位根据不同显示设备有换算关系。</p>\n<ul>\n<li>图像宽度&amp;图像高度</li>\n</ul>\n<p>其实标准些，讲宽度&amp;高度时一般是讲图像水平/垂直上有多少个像素。如一张2448x3264的照片，则宽度是2448像素，高度是3264像素。也有讲宽度是86.36厘米，高度是115.15厘米，一般在打印照片等情况下。</p>\n<ul>\n<li>分辨率</li>\n</ul>\n<p>日常讲分辨率时其实可以指很多情况，一般指图像宽度x高度，如2448x3264，指水平上有2448个像素，垂直上有3264个像素。</p>\n<h2 id=\"压缩算法概念\"><a href=\"#压缩算法概念\" class=\"headerlink\" title=\"压缩算法概念\"></a>压缩算法概念</h2><ul>\n<li>JPEG</li>\n</ul>\n<p>一个名称为Joint Photographic Experts Group的组织，也是一种压缩算法。JPEG本身只有描述如何将一个视频转换为字节的数据流（streaming），但<strong>并没有说明这些字节如何在任何特定的存储媒体上被封存起来</strong>。JPEG有有损压缩和无损压缩，无损压缩的没有得到什么支持，所以一般讲JPEG指它的有损压缩。</p>\n<ul>\n<li>JFIF</li>\n</ul>\n<p>JPEG File Interchange Format，JPEG文件交换格式，<strong>详细说明如何从一个JPEG流，产出一个适合于电脑存储和传输的文件</strong>。一般后缀有.jpeg、.jpg、.jfif以及.jif。</p>\n<ul>\n<li>Bitmap</li>\n</ul>\n<p>又称栅格图，是使用像素阵列来表示的图像。非压缩格式，从左往右从上往下扫描，占用较大存储空间。</p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/JPEG\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/JPEG</a><br><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE</a></p>\n</blockquote>\n<h2 id=\"微信图片处理规律\"><a href=\"#微信图片处理规律\" class=\"headerlink\" title=\"微信图片处理规律\"></a>微信图片处理规律</h2><p>经过简单测试发现，在微信，A发一张原图给B时，B直接保存缩略图：</p>\n<ul>\n<li>iOS版的微信保存下来是等比例压缩高度为800，质量80。</li>\n<li>Android版的微信保存下来是等比例压缩高度为1280，质量80。</li>\n</ul>\n<p>朋友圈的图片保存下来，都是等比例到高1280像素，质量和大小还没找到规律。<br>为什么微信是取高固定而不是宽呢？可以思考下。</p>\n<h2 id=\"Base64编码后大小\"><a href=\"#Base64编码后大小\" class=\"headerlink\" title=\"Base64编码后大小\"></a>Base64编码后大小</h2><p>我们现在还用着Base64编码图像数据，后面需改成提交表单方式。</p>\n<p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，<strong>转换后的字符串理论上将要比原来的长1/3</strong>。</p>\n<h2 id=\"iOS的pt与Android的sp\"><a href=\"#iOS的pt与Android的sp\" class=\"headerlink\" title=\"iOS的pt与Android的sp\"></a>iOS的pt与Android的sp</h2><p>我在<a href=\"https://sapphirezzz.github.io/blog/2016/01/17/ios-devices-info/\" target=\"_blank\" rel=\"noopener\">iOS所有设备的分辨率、尺寸和缩放因子，放大模式区别和6P实际分辨率</a>文章里讲了iOS设备的pt和px关系。<br>iOS的pt是开发单位，一个逻辑point对应一个点dot。@1x设备上一个pt上显示1个px（像素），@2x上一个pt显示2个px，@3x上显示3个px。平时在storyboard上设置时指的都是pt。</p>\n<p>Android的sp一种基于屏幕密度的抽象单位。</p>\n<h2 id=\"Android图片质量会比iPhone的差？\"><a href=\"#Android图片质量会比iPhone的差？\" class=\"headerlink\" title=\"Android图片质量会比iPhone的差？\"></a>Android图片质量会比iPhone的差？</h2><p>在<a href=\"http://www.cnblogs.com/MaxIE/p/3951294.html\" target=\"_blank\" rel=\"noopener\">为什么Android的图片质量会比iPhone的差？</a>、<a href=\"http://www.eoeandroid.com/thread-570303-1-3.html?_dsign=bc58b99e\" target=\"_blank\" rel=\"noopener\">[Android算法] 【04/28 bug修改】android图片压缩终极解决方案</a>、<a href=\"http://www.cnblogs.com/hrlnw/p/4403334.html\" target=\"_blank\" rel=\"noopener\">Android图片编码机制深度解析（Bitmap，Skia，libJpeg）</a>三篇文章中讲了Android系统在压缩上的一些不为人知的问题。</p>\n<p>大致是，Android编码保存图片就是通过Java层函数——Native层函数——Skia库函数——对应第三方库函数（例如libjpeg），这一层层调用做到的。 libjpeg在压缩图像时，有一个参数叫optimize_coding，如果设置optimize_coding为TRUE，将会使得压缩图像过程中基于图像数据计算哈弗曼表，由于这个计算会显著消耗空间和时间，默认值被设置为FALSE。对于当时的计算设备来说，空间和时间的消耗可能是显著的，但到今天，这似乎不应再是问题。但谷歌的Skia项目工程师们对optimize_coding在Skia中默认的等于了FALSE，这就意味着更差的图片质量和更大的图片文件。还有其他和iOS的比较可以看下。</p>\n<p>也讲到了Android可以替换libjpeg库达到设置为TRUE的目的。</p>\n<h2 id=\"iOS的UIImage保存图片问题\"><a href=\"#iOS的UIImage保存图片问题\" class=\"headerlink\" title=\"iOS的UIImage保存图片问题\"></a>iOS的UIImage保存图片问题</h2><p>起初发现压缩后保存图片，不同压缩质量系数，得出来的文件大小趋势和计算出的大小趋势不同，所以怀疑使用NSData初始化UIImage时多做了什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData *imageData06 = UIImageJPEGRepresentation(scaledImage, 0.6);</span><br><span class=\"line\">UIImage *image06 = [UIImage imageWithData:imageData06];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(image06, nil, nil, nil);</span><br></pre></td></tr></table></figure>\n\n<p>通过软件发现，不同压缩质量系数，得出来的NSData保存成UIImage图片，看到的质量都是92，按道理应该是对应的质量系数才对。于是想将NSData保存成文件到目录，读取出文件大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documents = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];</span><br><span class=\"line\">NSString *filePath = [documents stringByAppendingPathComponent:@&quot;image.jpg&quot;];</span><br><span class=\"line\">NSData *imageData = UIImageJPEGRepresentation(image, 0.7);</span><br><span class=\"line\">NSError *error = nil;</span><br><span class=\"line\">[imageData writeToFile:filePath options:NSDataWritingAtomic error:&amp;error];</span><br><span class=\"line\">if (error != nil) &#123;</span><br><span class=\"line\">\tNSLog(@&quot;error = %@&quot;, error);</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">\tNSLog(@&quot;success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;imageData = %u&quot;, (unsigned)imageData.length);</span><br><span class=\"line\">NSFileManager* manager = [NSFileManager defaultManager];</span><br><span class=\"line\">if ([manager fileExistsAtPath:filePath])&#123;</span><br><span class=\"line\">\tunsigned long long size = [[manager attributesOfItemAtPath:filePath error:nil] fileSize];</span><br><span class=\"line\">\tNSLog(@&quot;0.7后文件大小 %llu&quot;, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">UIImage *imageFromData = [UIImage imageWithData:imageData];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(imageFromData, nil, nil, nil);</span><br><span class=\"line\">UIImage *imageRead = [[UIImage alloc] initWithContentsOfFile:filePath];</span><br><span class=\"line\">UIImageWriteToSavedPhotosAlbum(imageRead, nil, nil, nil);</span><br></pre></td></tr></table></figure>\n\n<p>读取文件大小size和NSData大小imageData.length打印一致，而与imageRead、imageFromData的大小不一样，因此可以证明UIImage这个对象本身还做了其他事情。</p>\n<p>在<a href=\"http://www.udpwork.com/item/13533.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析</a>这篇文章的截图显示，UIImage的imageWithData方法堆栈显示还调用了哈夫曼解码。</p>\n<h2 id=\"压缩再压缩做了什么\"><a href=\"#压缩再压缩做了什么\" class=\"headerlink\" title=\"压缩再压缩做了什么\"></a>压缩再压缩做了什么</h2><ol>\n<li>首先谈下看图软件怎么展示图片。打开.jpg图片时，看图软件将文件转换成位图才显示出来，即把量化表矩阵与基本转化矩阵运算得出图片当前的位图（因为经过了压缩，所以该位图与原位图不同）。</li>\n<li>压缩后再压缩也是，先将图片变回位图，再将位图按现在的压缩质量系数压缩。</li>\n<li>所以压缩后的图片有可能变大，我猜测原因是，压缩前的占用空间压缩率较大，而再压缩时选的质量系数较大，导致压缩占用空间率（即压缩的第二步）较小，所以导致质量其实是变差了，但是占用空间反而可能变大。</li>\n</ol>\n<p>变大的例子如：本来图片A大小500KB，压缩质量系数选择0.7，得到B图片90KB，再拿这张B图片去压，压缩质量系数1.0，得出C图片。前面我们说压缩不仅压缩质量，还压缩占用空间。如果第一次压缩的压缩质量比例跟第二次压缩的比例的差值，比第一次压缩的压缩占用空间比例跟第二次的压缩占用空间比例的差值小，那么C图片就会比B图片大。因为虽然C图片质量比B图片质量差点，但是B图片的空间压缩得比C图片大比较多。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"推荐的桌游（不时更新）","date":"2016-03-06T08:00:00.000Z","keywords":"桌游","description":"推荐一些玩过的桌游","_content":"\n| 英文名                        | 中文名                     | 推荐人数     |\n| ----------------------------- | -------------------------- | ------------ |\n| Axis & Allies                 | 同盟国与轴心国             | 2-5          |\n| Twilight Struggle             | 冷战热斗                   | 2            |\n| A Game of Thrones             | 冰与火之歌                 | 3-6(6人最佳) |\n| Straw                         | 最后一根稻草               | 2-6          |\n| Munchkin                      | 小白世纪                   | 3-6          |\n| Pick Picknic                  | 鸡同鸭抢                   | 2-6          |\n| Take 6                        | 谁是牛头王                 | 2-10         |\n| Saboteur                      | 矮人矿工                   | 2-12         |\n| Aquarius                      | 水瓶座                     | 2-5          |\n| Betrayal at house on the hill | 山屋惊魂 又名：小黑屋      | 2-6          |\n| Quo Vadis                     | 元老院                     | 3-5          |\n| SET                           | 神奇形色牌                 | 2-8          |\n| Carcassonne                   | 卡卡颂，又名卡卡送、卡卡城 | 2-5          |\n| HANABI                        | 花火                       | 2-5          |\n| Criminal Dance                | 犯人在跳舞                 | 3-8          |\n| Agricola                      | 农场主                     | 1-5          |\n| Sushi Go!                     | 寿司狗                     | 2-5          |\n| Digital Game                  | 拉密牌/以色列麻将          | 2-4          |\n| Sonne und Mond                | 日与夜                     | 2-4          |\n| monopoly deal                 | 地产大亨                   | 2-5          |\n| Reiner Knizia TigrisEuphrates | 两河流域                   | 2-4          |\n| Arkham horror                 | 魔镇惊魂                   | 1-8          |\n| MANILA                        | 马尼拉                     | 3-5          |\n| Through The Age               | 历史巨轮                   | 2-4          |\n| squint                        | 眯眯眼                     | 2-8          |\n| battel line                   | 战线                       |              |\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-03-06-board-games-I-recommended.md","raw":"---\ntitle: 推荐的桌游（不时更新）\ndate: 2016-03-06 16:00:00\ntags: \n     - life\ncategories: life\nkeywords: 桌游\ndescription: 推荐一些玩过的桌游\n---\n\n| 英文名                        | 中文名                     | 推荐人数     |\n| ----------------------------- | -------------------------- | ------------ |\n| Axis & Allies                 | 同盟国与轴心国             | 2-5          |\n| Twilight Struggle             | 冷战热斗                   | 2            |\n| A Game of Thrones             | 冰与火之歌                 | 3-6(6人最佳) |\n| Straw                         | 最后一根稻草               | 2-6          |\n| Munchkin                      | 小白世纪                   | 3-6          |\n| Pick Picknic                  | 鸡同鸭抢                   | 2-6          |\n| Take 6                        | 谁是牛头王                 | 2-10         |\n| Saboteur                      | 矮人矿工                   | 2-12         |\n| Aquarius                      | 水瓶座                     | 2-5          |\n| Betrayal at house on the hill | 山屋惊魂 又名：小黑屋      | 2-6          |\n| Quo Vadis                     | 元老院                     | 3-5          |\n| SET                           | 神奇形色牌                 | 2-8          |\n| Carcassonne                   | 卡卡颂，又名卡卡送、卡卡城 | 2-5          |\n| HANABI                        | 花火                       | 2-5          |\n| Criminal Dance                | 犯人在跳舞                 | 3-8          |\n| Agricola                      | 农场主                     | 1-5          |\n| Sushi Go!                     | 寿司狗                     | 2-5          |\n| Digital Game                  | 拉密牌/以色列麻将          | 2-4          |\n| Sonne und Mond                | 日与夜                     | 2-4          |\n| monopoly deal                 | 地产大亨                   | 2-5          |\n| Reiner Knizia TigrisEuphrates | 两河流域                   | 2-4          |\n| Arkham horror                 | 魔镇惊魂                   | 1-8          |\n| MANILA                        | 马尼拉                     | 3-5          |\n| Through The Age               | 历史巨轮                   | 2-4          |\n| squint                        | 眯眯眼                     | 2-8          |\n| battel line                   | 战线                       |              |\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"board-games-I-recommended","published":1,"updated":"2020-02-25T15:23:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q0002207eim9ak5dtp","content":"<table>\n<thead>\n<tr>\n<th>英文名</th>\n<th>中文名</th>\n<th>推荐人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Axis &amp; Allies</td>\n<td>同盟国与轴心国</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Twilight Struggle</td>\n<td>冷战热斗</td>\n<td>2</td>\n</tr>\n<tr>\n<td>A Game of Thrones</td>\n<td>冰与火之歌</td>\n<td>3-6(6人最佳)</td>\n</tr>\n<tr>\n<td>Straw</td>\n<td>最后一根稻草</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Munchkin</td>\n<td>小白世纪</td>\n<td>3-6</td>\n</tr>\n<tr>\n<td>Pick Picknic</td>\n<td>鸡同鸭抢</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Take 6</td>\n<td>谁是牛头王</td>\n<td>2-10</td>\n</tr>\n<tr>\n<td>Saboteur</td>\n<td>矮人矿工</td>\n<td>2-12</td>\n</tr>\n<tr>\n<td>Aquarius</td>\n<td>水瓶座</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Betrayal at house on the hill</td>\n<td>山屋惊魂 又名：小黑屋</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Quo Vadis</td>\n<td>元老院</td>\n<td>3-5</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>神奇形色牌</td>\n<td>2-8</td>\n</tr>\n<tr>\n<td>Carcassonne</td>\n<td>卡卡颂，又名卡卡送、卡卡城</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>HANABI</td>\n<td>花火</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Criminal Dance</td>\n<td>犯人在跳舞</td>\n<td>3-8</td>\n</tr>\n<tr>\n<td>Agricola</td>\n<td>农场主</td>\n<td>1-5</td>\n</tr>\n<tr>\n<td>Sushi Go!</td>\n<td>寿司狗</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Digital Game</td>\n<td>拉密牌/以色列麻将</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>Sonne und Mond</td>\n<td>日与夜</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>monopoly deal</td>\n<td>地产大亨</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Reiner Knizia TigrisEuphrates</td>\n<td>两河流域</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>Arkham horror</td>\n<td>魔镇惊魂</td>\n<td>1-8</td>\n</tr>\n<tr>\n<td>MANILA</td>\n<td>马尼拉</td>\n<td>3-5</td>\n</tr>\n<tr>\n<td>Through The Age</td>\n<td>历史巨轮</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>squint</td>\n<td>眯眯眼</td>\n<td>2-8</td>\n</tr>\n<tr>\n<td>battel line</td>\n<td>战线</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>英文名</th>\n<th>中文名</th>\n<th>推荐人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Axis &amp; Allies</td>\n<td>同盟国与轴心国</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Twilight Struggle</td>\n<td>冷战热斗</td>\n<td>2</td>\n</tr>\n<tr>\n<td>A Game of Thrones</td>\n<td>冰与火之歌</td>\n<td>3-6(6人最佳)</td>\n</tr>\n<tr>\n<td>Straw</td>\n<td>最后一根稻草</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Munchkin</td>\n<td>小白世纪</td>\n<td>3-6</td>\n</tr>\n<tr>\n<td>Pick Picknic</td>\n<td>鸡同鸭抢</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Take 6</td>\n<td>谁是牛头王</td>\n<td>2-10</td>\n</tr>\n<tr>\n<td>Saboteur</td>\n<td>矮人矿工</td>\n<td>2-12</td>\n</tr>\n<tr>\n<td>Aquarius</td>\n<td>水瓶座</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Betrayal at house on the hill</td>\n<td>山屋惊魂 又名：小黑屋</td>\n<td>2-6</td>\n</tr>\n<tr>\n<td>Quo Vadis</td>\n<td>元老院</td>\n<td>3-5</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>神奇形色牌</td>\n<td>2-8</td>\n</tr>\n<tr>\n<td>Carcassonne</td>\n<td>卡卡颂，又名卡卡送、卡卡城</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>HANABI</td>\n<td>花火</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Criminal Dance</td>\n<td>犯人在跳舞</td>\n<td>3-8</td>\n</tr>\n<tr>\n<td>Agricola</td>\n<td>农场主</td>\n<td>1-5</td>\n</tr>\n<tr>\n<td>Sushi Go!</td>\n<td>寿司狗</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Digital Game</td>\n<td>拉密牌/以色列麻将</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>Sonne und Mond</td>\n<td>日与夜</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>monopoly deal</td>\n<td>地产大亨</td>\n<td>2-5</td>\n</tr>\n<tr>\n<td>Reiner Knizia TigrisEuphrates</td>\n<td>两河流域</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>Arkham horror</td>\n<td>魔镇惊魂</td>\n<td>1-8</td>\n</tr>\n<tr>\n<td>MANILA</td>\n<td>马尼拉</td>\n<td>3-5</td>\n</tr>\n<tr>\n<td>Through The Age</td>\n<td>历史巨轮</td>\n<td>2-4</td>\n</tr>\n<tr>\n<td>squint</td>\n<td>眯眯眼</td>\n<td>2-8</td>\n</tr>\n<tr>\n<td>battel line</td>\n<td>战线</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"将博客从Octopress迁移往Hexo","date":"2016-03-06T08:00:00.000Z","keywords":"Octopress Hexo","description":"将博客从Octopress迁移往Hexo","_content":"\n# 目录\n- 前言\n- 迁移到Hexo\n- 配置Hexo\n- 常用命令\n- 总结\n\n# 前言\n之前一直使用Octopress，折腾过好多次，出问题不少，而且生成文章速度越来越慢，需要自己添加各种插件，还弄过支持TOC一直没成功。最近再看了下迁移到hexo的，好像蛮方便的，而且是基于Node的，这让我特别想试下，没想到结果出乎意料的好用！\n\n# 迁移到Hexo\n\n**安装nodejs**：[下载链接](https://nodejs.org/en/download/)\n\n**安装Hexo**：\n\n```\n$ npm install -g hexo-cli\n```\n\n**初始化目录**：\n\n```\n$ hexo init <blog>\n$ cd <blog>\n$ npm install\n```\n\n完成后便生成了以下目录结构：\n\n> .\n> ├── _config.yml\n> ├── package.json\n> ├── scaffolds\n> ├── source\n> | ├── _drafts\n> | └── _posts\n> └── themes\n\n- _config.yml：配置文件\n- source：文章目录\n- themes：主题目录\n\n**修改信息**：\n\n修改_config.yml内容：\n\n```\ntitle: Just My Blog\nsubtitle: A Programmer Who Wants To Be A Poet .----尘世间一件迷途小码农\ndescription: Zack Zheng's Blog\nauthor: Zack Zheng\n```\n\n**迁移文章**：\n\n将以前Octopress的source/_post目录下的文章拷贝到Hexo的同名目录下即可。\n\n**安装hexo-deployer-git**：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n**修改_config.yml最后面几行**：\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/<name>/<name>.github.io.git\n  branch: master\n```\n\n**配置域名**：\n\n将之前的CNAME文件放到source目录下即可。\n\n**上传到Github**：\n\n将原来在Github上的Repository删掉重建，格式依旧是<*name*>.github.io。\n\n执行下面命令编译成静态文件并提交：\n\n```\n$ hexo generate\n$ hexo deploy\n```\n\n# 配置Hexo\n\n之前Octopress还弄过侧边栏、多说评论、摘要、访客记录、回到顶部、谷歌统计等，现在没有怪可惜的，但发现Hexo的主题Jacman居然已经帮忙支持了这些功能，还有TOC，这实在是令人欣喜！\n\n**安装主题**：\n\n```\n$ cd <blog>\n$ git clone https://github.com/A-limon/pacman.git themes/pacman\n```\n\n**使用主题**：\n\n修改_config.yml文件如下：\n\n```\ntheme: jacman\nstylus:\n  compress: true\n```\n\ncompress值为true，会自动压缩 CSS 文件。\n\n**更新主题**：\n\n```\n$ cd themes/jacman\n$ git pull origin master\n```\n\n**修改主题**：\n\n- 修改主题配置\n\n根据自己的需要修改themes/jacman/_config.yml文件。\n\n去掉Widgets下不需要的组件，如以下修改：\n\n```\n#### Widgets\nwidgets: \n- github-card\n- category\n- tag\n## - links\n## - douban\n- rss\n## - weibo\n- duoshuo_visitor\n- flag_counter\n```\n\nduoshuo_visitor和flag_counter不是自带的，是后面需要另外加的。\n\n修改底部footer，如以下修改：\n\n```\n#### Author information\nauthor:\n  intro_line1:  \"Hello ,I'm Zack Zheng.\"    ## your introduction on the bottom of the page\n  intro_line2:  \"This is my blog.\"  ## the 2nd line\n  email: zhengzuanzhe@gmail.com     ## e.g. imjark@gmail.com\n```\n\n在duoshuo_shortname: 后面空格输入你的多说用户名即可支持评论。\n\n后边还支持对谷歌统计、百度统计的配置。\n\n- 替换默认图片资源\n\n替换themes\\jacman\\source\\img下的几个图片\n\n- 增加多说访问统计和flag_counter\n\n1. 在_config.yml的widgets下面加入插件名\n2. 在themes/jacman/layout/_widget目录下新建文件duoshuo_visitor.ejs、flag_counter.ejs。\n\nduoshuo_visitor.ejs(short_name后面是多说用户名)：\n\n```\n<section>\n<br/>\n<h1>最近访客</h1>\n<br/>\n<ul class=\"ds-recent-visitors\" data-num-items=\"20\"></ul>\n<script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"zackzheng\"};\n  (function() {\n      var ds = document.createElement('script');\n      ds.type = 'text/javascript';ds.async = true;\n      ds.src = 'http://static.duoshuo.com/embed.js';\n      ds.charset = 'UTF-8';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n<br/>\n</section>\n```\n\nflag_counter.ejs(a href后面替换成自己在[Flag Counter](http://www.flagcounter.com/)获取的链接)：\n\n```\n<section>\n<h1>访客统计</h1>\n<br/>\n<a href=\"http://s07.flagcounter.com/more/2SH\"><img src=\"http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_3/labels_0/pageviews_1/flags_0/\" alt=\"Flag Counter\" border=\"0\"></a>\n</section>\n```\n\n# 常用命令\n\n> hexo new ““ #新建文章\n> hexo new page ““ #新建页面\n> hexo generate #生成静态页面至public目录\n> hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\n> hexo deploy #将.deploy目录部署到GitHub\n> hexo help # 查看帮助\n> hexo version #查看Hexo的版本\n>\n> hexo deploy -g #生成加部署\n> hexo server -g #生成加预览\n\n命令简写：\n\n> hexo n = hexo new\n> hexo g = hexo generate\n> hexo s = hexo server\n> hexo d = hexo deploy\n\n# 总结\n\n总体来说，切换到Hexo和Jacman主题后，可以很方便设置多说评论、谷歌统计、百度统计，并自带分享、侧边栏，支持TOC，不用接触ruby等代码，不易出问题，生成速度快。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-03-06-migrate-to-hexo-from-octopress.md","raw":"---\ntitle: 将博客从Octopress迁移往Hexo\ndate: 2016-03-06 16:00:00\ntags: \n     - blog\n     - Hexo\n     - Octopress\ncategories: blog\nkeywords: Octopress Hexo\ndescription: 将博客从Octopress迁移往Hexo\n---\n\n# 目录\n- 前言\n- 迁移到Hexo\n- 配置Hexo\n- 常用命令\n- 总结\n\n# 前言\n之前一直使用Octopress，折腾过好多次，出问题不少，而且生成文章速度越来越慢，需要自己添加各种插件，还弄过支持TOC一直没成功。最近再看了下迁移到hexo的，好像蛮方便的，而且是基于Node的，这让我特别想试下，没想到结果出乎意料的好用！\n\n# 迁移到Hexo\n\n**安装nodejs**：[下载链接](https://nodejs.org/en/download/)\n\n**安装Hexo**：\n\n```\n$ npm install -g hexo-cli\n```\n\n**初始化目录**：\n\n```\n$ hexo init <blog>\n$ cd <blog>\n$ npm install\n```\n\n完成后便生成了以下目录结构：\n\n> .\n> ├── _config.yml\n> ├── package.json\n> ├── scaffolds\n> ├── source\n> | ├── _drafts\n> | └── _posts\n> └── themes\n\n- _config.yml：配置文件\n- source：文章目录\n- themes：主题目录\n\n**修改信息**：\n\n修改_config.yml内容：\n\n```\ntitle: Just My Blog\nsubtitle: A Programmer Who Wants To Be A Poet .----尘世间一件迷途小码农\ndescription: Zack Zheng's Blog\nauthor: Zack Zheng\n```\n\n**迁移文章**：\n\n将以前Octopress的source/_post目录下的文章拷贝到Hexo的同名目录下即可。\n\n**安装hexo-deployer-git**：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n**修改_config.yml最后面几行**：\n\n```\ndeploy:\n  type: git\n  repository: https://github.com/<name>/<name>.github.io.git\n  branch: master\n```\n\n**配置域名**：\n\n将之前的CNAME文件放到source目录下即可。\n\n**上传到Github**：\n\n将原来在Github上的Repository删掉重建，格式依旧是<*name*>.github.io。\n\n执行下面命令编译成静态文件并提交：\n\n```\n$ hexo generate\n$ hexo deploy\n```\n\n# 配置Hexo\n\n之前Octopress还弄过侧边栏、多说评论、摘要、访客记录、回到顶部、谷歌统计等，现在没有怪可惜的，但发现Hexo的主题Jacman居然已经帮忙支持了这些功能，还有TOC，这实在是令人欣喜！\n\n**安装主题**：\n\n```\n$ cd <blog>\n$ git clone https://github.com/A-limon/pacman.git themes/pacman\n```\n\n**使用主题**：\n\n修改_config.yml文件如下：\n\n```\ntheme: jacman\nstylus:\n  compress: true\n```\n\ncompress值为true，会自动压缩 CSS 文件。\n\n**更新主题**：\n\n```\n$ cd themes/jacman\n$ git pull origin master\n```\n\n**修改主题**：\n\n- 修改主题配置\n\n根据自己的需要修改themes/jacman/_config.yml文件。\n\n去掉Widgets下不需要的组件，如以下修改：\n\n```\n#### Widgets\nwidgets: \n- github-card\n- category\n- tag\n## - links\n## - douban\n- rss\n## - weibo\n- duoshuo_visitor\n- flag_counter\n```\n\nduoshuo_visitor和flag_counter不是自带的，是后面需要另外加的。\n\n修改底部footer，如以下修改：\n\n```\n#### Author information\nauthor:\n  intro_line1:  \"Hello ,I'm Zack Zheng.\"    ## your introduction on the bottom of the page\n  intro_line2:  \"This is my blog.\"  ## the 2nd line\n  email: zhengzuanzhe@gmail.com     ## e.g. imjark@gmail.com\n```\n\n在duoshuo_shortname: 后面空格输入你的多说用户名即可支持评论。\n\n后边还支持对谷歌统计、百度统计的配置。\n\n- 替换默认图片资源\n\n替换themes\\jacman\\source\\img下的几个图片\n\n- 增加多说访问统计和flag_counter\n\n1. 在_config.yml的widgets下面加入插件名\n2. 在themes/jacman/layout/_widget目录下新建文件duoshuo_visitor.ejs、flag_counter.ejs。\n\nduoshuo_visitor.ejs(short_name后面是多说用户名)：\n\n```\n<section>\n<br/>\n<h1>最近访客</h1>\n<br/>\n<ul class=\"ds-recent-visitors\" data-num-items=\"20\"></ul>\n<script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"zackzheng\"};\n  (function() {\n      var ds = document.createElement('script');\n      ds.type = 'text/javascript';ds.async = true;\n      ds.src = 'http://static.duoshuo.com/embed.js';\n      ds.charset = 'UTF-8';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n<br/>\n</section>\n```\n\nflag_counter.ejs(a href后面替换成自己在[Flag Counter](http://www.flagcounter.com/)获取的链接)：\n\n```\n<section>\n<h1>访客统计</h1>\n<br/>\n<a href=\"http://s07.flagcounter.com/more/2SH\"><img src=\"http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_3/labels_0/pageviews_1/flags_0/\" alt=\"Flag Counter\" border=\"0\"></a>\n</section>\n```\n\n# 常用命令\n\n> hexo new ““ #新建文章\n> hexo new page ““ #新建页面\n> hexo generate #生成静态页面至public目录\n> hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\n> hexo deploy #将.deploy目录部署到GitHub\n> hexo help # 查看帮助\n> hexo version #查看Hexo的版本\n>\n> hexo deploy -g #生成加部署\n> hexo server -g #生成加预览\n\n命令简写：\n\n> hexo n = hexo new\n> hexo g = hexo generate\n> hexo s = hexo server\n> hexo d = hexo deploy\n\n# 总结\n\n总体来说，切换到Hexo和Jacman主题后，可以很方便设置多说评论、谷歌统计、百度统计，并自带分享、侧边栏，支持TOC，不用接触ruby等代码，不易出问题，生成速度快。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"migrate-to-hexo-from-octopress","published":1,"updated":"2020-02-25T15:23:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q1002507ei3fcaokkn","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>迁移到Hexo</li>\n<li>配置Hexo</li>\n<li>常用命令</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前一直使用Octopress，折腾过好多次，出问题不少，而且生成文章速度越来越慢，需要自己添加各种插件，还弄过支持TOC一直没成功。最近再看了下迁移到hexo的，好像蛮方便的，而且是基于Node的，这让我特别想试下，没想到结果出乎意料的好用！</p>\n<h1 id=\"迁移到Hexo\"><a href=\"#迁移到Hexo\" class=\"headerlink\" title=\"迁移到Hexo\"></a>迁移到Hexo</h1><p><strong>安装nodejs</strong>：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n<p><strong>安装Hexo</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化目录</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;blog&gt;</span><br><span class=\"line\">$ cd &lt;blog&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成后便生成了以下目录结构：</p>\n<blockquote>\n<p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>| ├── _drafts<br>| └── _posts<br>└── themes</p>\n</blockquote>\n<ul>\n<li>_config.yml：配置文件</li>\n<li>source：文章目录</li>\n<li>themes：主题目录</li>\n</ul>\n<p><strong>修改信息</strong>：</p>\n<p>修改_config.yml内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Just My Blog</span><br><span class=\"line\">subtitle: A Programmer Who Wants To Be A Poet .----尘世间一件迷途小码农</span><br><span class=\"line\">description: Zack Zheng&apos;s Blog</span><br><span class=\"line\">author: Zack Zheng</span><br></pre></td></tr></table></figure>\n\n<p><strong>迁移文章</strong>：</p>\n<p>将以前Octopress的source/_post目录下的文章拷贝到Hexo的同名目录下即可。</p>\n<p><strong>安装hexo-deployer-git</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改_config.yml最后面几行</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/&lt;name&gt;/&lt;name&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置域名</strong>：</p>\n<p>将之前的CNAME文件放到source目录下即可。</p>\n<p><strong>上传到Github</strong>：</p>\n<p>将原来在Github上的Repository删掉重建，格式依旧是&lt;<em>name</em>&gt;.github.io。</p>\n<p>执行下面命令编译成静态文件并提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h1><p>之前Octopress还弄过侧边栏、多说评论、摘要、访客记录、回到顶部、谷歌统计等，现在没有怪可惜的，但发现Hexo的主题Jacman居然已经帮忙支持了这些功能，还有TOC，这实在是令人欣喜！</p>\n<p><strong>安装主题</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &lt;blog&gt;</span><br><span class=\"line\">$ git clone https://github.com/A-limon/pacman.git themes/pacman</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用主题</strong>：</p>\n<p>修改_config.yml文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: jacman</span><br><span class=\"line\">stylus:</span><br><span class=\"line\">  compress: true</span><br></pre></td></tr></table></figure>\n\n<p>compress值为true，会自动压缩 CSS 文件。</p>\n<p><strong>更新主题</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/jacman</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改主题</strong>：</p>\n<ul>\n<li>修改主题配置</li>\n</ul>\n<p>根据自己的需要修改themes/jacman/_config.yml文件。</p>\n<p>去掉Widgets下不需要的组件，如以下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Widgets</span><br><span class=\"line\">widgets: </span><br><span class=\"line\">- github-card</span><br><span class=\"line\">- category</span><br><span class=\"line\">- tag</span><br><span class=\"line\">## - links</span><br><span class=\"line\">## - douban</span><br><span class=\"line\">- rss</span><br><span class=\"line\">## - weibo</span><br><span class=\"line\">- duoshuo_visitor</span><br><span class=\"line\">- flag_counter</span><br></pre></td></tr></table></figure>\n\n<p>duoshuo_visitor和flag_counter不是自带的，是后面需要另外加的。</p>\n<p>修改底部footer，如以下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Author information</span><br><span class=\"line\">author:</span><br><span class=\"line\">  intro_line1:  &quot;Hello ,I&apos;m Zack Zheng.&quot;    ## your introduction on the bottom of the page</span><br><span class=\"line\">  intro_line2:  &quot;This is my blog.&quot;  ## the 2nd line</span><br><span class=\"line\">  email: zhengzuanzhe@gmail.com     ## e.g. imjark@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>在duoshuo_shortname: 后面空格输入你的多说用户名即可支持评论。</p>\n<p>后边还支持对谷歌统计、百度统计的配置。</p>\n<ul>\n<li>替换默认图片资源</li>\n</ul>\n<p>替换themes\\jacman\\source\\img下的几个图片</p>\n<ul>\n<li>增加多说访问统计和flag_counter</li>\n</ul>\n<ol>\n<li>在_config.yml的widgets下面加入插件名</li>\n<li>在themes/jacman/layout/_widget目录下新建文件duoshuo_visitor.ejs、flag_counter.ejs。</li>\n</ol>\n<p>duoshuo_visitor.ejs(short_name后面是多说用户名)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h1&gt;最近访客&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;ul class=&quot;ds-recent-visitors&quot; data-num-items=&quot;20&quot;&gt;&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var duoshuoQuery = &#123;short_name:&quot;zackzheng&quot;&#125;;</span><br><span class=\"line\">  (function() &#123;</span><br><span class=\"line\">      var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">      ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">      ds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">      ds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">      (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>flag_counter.ejs(a href后面替换成自己在<a href=\"http://www.flagcounter.com/\" target=\"_blank\" rel=\"noopener\">Flag Counter</a>获取的链接)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;h1&gt;访客统计&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://s07.flagcounter.com/more/2SH&quot;&gt;&lt;img src=&quot;http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_3/labels_0/pageviews_1/flags_0/&quot; alt=&quot;Flag Counter&quot; border=&quot;0&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><blockquote>\n<p>hexo new ““ #新建文章<br>hexo new page ““ #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p>\n<p>hexo deploy -g #生成加部署<br>hexo server -g #生成加预览</p>\n</blockquote>\n<p>命令简写：</p>\n<blockquote>\n<p>hexo n = hexo new<br>hexo g = hexo generate<br>hexo s = hexo server<br>hexo d = hexo deploy</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总体来说，切换到Hexo和Jacman主题后，可以很方便设置多说评论、谷歌统计、百度统计，并自带分享、侧边栏，支持TOC，不用接触ruby等代码，不易出问题，生成速度快。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>迁移到Hexo</li>\n<li>配置Hexo</li>\n<li>常用命令</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前一直使用Octopress，折腾过好多次，出问题不少，而且生成文章速度越来越慢，需要自己添加各种插件，还弄过支持TOC一直没成功。最近再看了下迁移到hexo的，好像蛮方便的，而且是基于Node的，这让我特别想试下，没想到结果出乎意料的好用！</p>\n<h1 id=\"迁移到Hexo\"><a href=\"#迁移到Hexo\" class=\"headerlink\" title=\"迁移到Hexo\"></a>迁移到Hexo</h1><p><strong>安装nodejs</strong>：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n<p><strong>安装Hexo</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化目录</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;blog&gt;</span><br><span class=\"line\">$ cd &lt;blog&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成后便生成了以下目录结构：</p>\n<blockquote>\n<p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>| ├── _drafts<br>| └── _posts<br>└── themes</p>\n</blockquote>\n<ul>\n<li>_config.yml：配置文件</li>\n<li>source：文章目录</li>\n<li>themes：主题目录</li>\n</ul>\n<p><strong>修改信息</strong>：</p>\n<p>修改_config.yml内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Just My Blog</span><br><span class=\"line\">subtitle: A Programmer Who Wants To Be A Poet .----尘世间一件迷途小码农</span><br><span class=\"line\">description: Zack Zheng&apos;s Blog</span><br><span class=\"line\">author: Zack Zheng</span><br></pre></td></tr></table></figure>\n\n<p><strong>迁移文章</strong>：</p>\n<p>将以前Octopress的source/_post目录下的文章拷贝到Hexo的同名目录下即可。</p>\n<p><strong>安装hexo-deployer-git</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改_config.yml最后面几行</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/&lt;name&gt;/&lt;name&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置域名</strong>：</p>\n<p>将之前的CNAME文件放到source目录下即可。</p>\n<p><strong>上传到Github</strong>：</p>\n<p>将原来在Github上的Repository删掉重建，格式依旧是&lt;<em>name</em>&gt;.github.io。</p>\n<p>执行下面命令编译成静态文件并提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h1><p>之前Octopress还弄过侧边栏、多说评论、摘要、访客记录、回到顶部、谷歌统计等，现在没有怪可惜的，但发现Hexo的主题Jacman居然已经帮忙支持了这些功能，还有TOC，这实在是令人欣喜！</p>\n<p><strong>安装主题</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &lt;blog&gt;</span><br><span class=\"line\">$ git clone https://github.com/A-limon/pacman.git themes/pacman</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用主题</strong>：</p>\n<p>修改_config.yml文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: jacman</span><br><span class=\"line\">stylus:</span><br><span class=\"line\">  compress: true</span><br></pre></td></tr></table></figure>\n\n<p>compress值为true，会自动压缩 CSS 文件。</p>\n<p><strong>更新主题</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/jacman</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p><strong>修改主题</strong>：</p>\n<ul>\n<li>修改主题配置</li>\n</ul>\n<p>根据自己的需要修改themes/jacman/_config.yml文件。</p>\n<p>去掉Widgets下不需要的组件，如以下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Widgets</span><br><span class=\"line\">widgets: </span><br><span class=\"line\">- github-card</span><br><span class=\"line\">- category</span><br><span class=\"line\">- tag</span><br><span class=\"line\">## - links</span><br><span class=\"line\">## - douban</span><br><span class=\"line\">- rss</span><br><span class=\"line\">## - weibo</span><br><span class=\"line\">- duoshuo_visitor</span><br><span class=\"line\">- flag_counter</span><br></pre></td></tr></table></figure>\n\n<p>duoshuo_visitor和flag_counter不是自带的，是后面需要另外加的。</p>\n<p>修改底部footer，如以下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Author information</span><br><span class=\"line\">author:</span><br><span class=\"line\">  intro_line1:  &quot;Hello ,I&apos;m Zack Zheng.&quot;    ## your introduction on the bottom of the page</span><br><span class=\"line\">  intro_line2:  &quot;This is my blog.&quot;  ## the 2nd line</span><br><span class=\"line\">  email: zhengzuanzhe@gmail.com     ## e.g. imjark@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>在duoshuo_shortname: 后面空格输入你的多说用户名即可支持评论。</p>\n<p>后边还支持对谷歌统计、百度统计的配置。</p>\n<ul>\n<li>替换默认图片资源</li>\n</ul>\n<p>替换themes\\jacman\\source\\img下的几个图片</p>\n<ul>\n<li>增加多说访问统计和flag_counter</li>\n</ul>\n<ol>\n<li>在_config.yml的widgets下面加入插件名</li>\n<li>在themes/jacman/layout/_widget目录下新建文件duoshuo_visitor.ejs、flag_counter.ejs。</li>\n</ol>\n<p>duoshuo_visitor.ejs(short_name后面是多说用户名)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;h1&gt;最近访客&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;ul class=&quot;ds-recent-visitors&quot; data-num-items=&quot;20&quot;&gt;&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var duoshuoQuery = &#123;short_name:&quot;zackzheng&quot;&#125;;</span><br><span class=\"line\">  (function() &#123;</span><br><span class=\"line\">      var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">      ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">      ds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">      ds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">      (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<p>flag_counter.ejs(a href后面替换成自己在<a href=\"http://www.flagcounter.com/\" target=\"_blank\" rel=\"noopener\">Flag Counter</a>获取的链接)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">&lt;h1&gt;访客统计&lt;/h1&gt;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://s07.flagcounter.com/more/2SH&quot;&gt;&lt;img src=&quot;http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_1/maxflags_20/viewers_3/labels_0/pageviews_1/flags_0/&quot; alt=&quot;Flag Counter&quot; border=&quot;0&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><blockquote>\n<p>hexo new ““ #新建文章<br>hexo new page ““ #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本</p>\n<p>hexo deploy -g #生成加部署<br>hexo server -g #生成加预览</p>\n</blockquote>\n<p>命令简写：</p>\n<blockquote>\n<p>hexo n = hexo new<br>hexo g = hexo generate<br>hexo s = hexo server<br>hexo d = hexo deploy</p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总体来说，切换到Hexo和Jacman主题后，可以很方便设置多说评论、谷歌统计、百度统计，并自带分享、侧边栏，支持TOC，不用接触ruby等代码，不易出问题，生成速度快。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"戏说CollectionView、TableView如何优雅应对变化的界面展示","date":"2016-04-24T08:00:00.000Z","keywords":"iOS","description":"介绍了一种基于枚举来处理CollectionView、TableView的 DataSource 和 Delegate 的方案，以及这种方案带来的便利，降低维护成本，能灵活应对变化需求的特点。","_content":"\n# 前言\n\nApp里很多页面都是用UICollectionView和UITableView做的，比如一些列表类的、详情类的，甚至是商城首页等等，只要是分块的，特别是根据数据源不同而展示不同的页面，都很适合用，但怎么用，使它容易修改、扩展，是个问题。\n\n\n\n**产品经理老李说**：\n\n1. 这一块功能有数据的时候就展示，没有就隐藏\n2. 这一块挪到那块下面\n3. 这一块XXX功能删了，现在不需要了\n4. 之前删的XXX功能补回来吧，然后改成放在XXX功能块下面\n5. 这块地方的高度根据内容动态设置\n6. ......（数不尽的小数点）\n\n**程序猿懵了**：\n\n1. 咦，我之前这个Section放的是什么，看界面的话不准确，有些隐藏之类的情况，界面上这块东西对应的是哪个Cell，也不确定了。\n2. Delegate和DataSource，少的时候只实现三四个方法，多的时候实现七八个，这些都和Section、Cell的各项信息有关，这时候做什么变动都需要改动多处地方，if...else...也就写得到处都是。\n3. ......（数不尽的小数点）\n\n这些麻烦不难解决，就是有时候会很花时间，效率低，于是我想了一个方法解决它。\n\n最初是在做某一类详情的时候想出来的，后面经过应用到其他页面和几次变更的实践之后发现，还真挺方便的！下面将举几个例子来说明这个方法及其特点。\n\n\n\n本想将本文语言组织得有趣些，但可惜功力不够，时间也紧哈，下次再尝试。\n\n\n\n# 例子一\n\n*产品经理老李*说：“给我实现xxx功能，有5部分信息，其中A、C、D功能没有东西的时候是隐藏的......”\n\n*程序猿*答道：“哦......”\n\n**转化成技术需求**：\n\n> 有五种Cell，分别是ACell（根据data.a判断隐藏与否）、BCell（默认有）、CCell（根据data.c数组个数判断隐藏与否，并且根据个数设置cell大小）、DCell（根据data.d数组个数判断隐藏与否）、ECell（默认有），隐藏与否顺序都是A\\B\\C\\D\\E。\n\n**笨拙的实现**：\n\n```\nclass XXXController: UICollectionViewController {\n\n    let data = ......\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        collectionView.reloadData()\n    }\n}\n\nextension XXXController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {\n\n        // switch 或 if...else...\n        switch indexPath.row {\n        case 0:\n            // 判断是A还是B\n        case 1:\n            // 判断是B还是C还是D还是E......(心里骂着产品经理)\n            // 这里很容易犯错，细想下你就知道了......(又被扣工资了囧)\n        case 2:\n            // 判断是C还是D还是E......(心里骂着产品经理)\n        case 3:\n            // 判断是D还是E......(心里骂着产品经理)\n        case 4:\n            // ECell\n        default:\n            // 还要写default......\n        }\n    }\n}\n\nextension XXXController {// UICollectionViewDelegate、UICollectionViewDataSource\n\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // 根据数据源计算分别有没有A/C/D\n        // 一堆if...else......(心里骂着产品经理)\n        return 2 + ......\n    }\n\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        // 同sizeForItemAtIndexPath(心里骂着产品经理)\n    }\n\n    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        // 同sizeForItemAtIndexPath(心里骂着产品经理)\n    }\n}\n```\n\n**优雅的实现**：\n\n```\nenum XXXItemTypes {\n    case A\n    case B\n    case C(count:Int)\n    case D\n    case E\n    ......\n}\n\nclass XXXController: UICollectionViewController {\n\n    let data = ......\n    var itemTypes:[XXXItemTypes] = []\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        configItemTypes(data)\n        collectionView.reloadData()\n    }\n}\n\nprivate extension XXXController {\n    func configItemTypes(data) {\n\n        itemTypes = []\n        if let _ = data.a {// 根据对象是否存在判断隐藏与否的情况\n            itemTypes.append(XXXItemTypes.A)\n        }\n        itemTypes.append(XXXItemTypes.B)// 默认有的情况\n        if let cCount = data.c.count where cCount > 0 {// 根据个数判断隐藏与否的情况\n            itemTypes.append(XXXItemTypes.C(cCount))\n        }\n        if let dCount = data.d.count where dCount > 0 {\n            itemTypes.append(XXXItemTypes.D)\n        }\n        itemTypes.append(XXXItemTypes.E)// 默认有的情况\n        ......\n    }\n}\n\nextension XXXController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {\n\n        switch itemTypes[indexPath.row] {\n        case .A:\n            return ACell.cellSize(......)\n        case .B(let count):\n            return BCell.cellSize(count: count)\n        case .C:\n            return CCell.cellSize(......)\n        case .D:\n            return DCell.cellSize(......)\n        case .E:\n            return ECell.cellSize(......)\n        }\n    }\n}\n\nextension XXXController {// UICollectionViewDelegate、UICollectionViewDataSource\n\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return itemTypes.count\n    }\n\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n\n        switch itemTypes[indexPath.row] {\n        case .A:\n            ......\n        case .B:\n            ......\n        case .C:\n            ......\n        case .D:\n            ......\n        case .E:\n            ......\n        }\n    }\n\n    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        switch itemTypes[indexPath.row] {\n            ......\n        }\n    }\n}\n```\n\n**小分析**：\n\n可以看到，所有的判断（4处地方）都归结一处，也就是configItemTypes里面，省去了一堆因为隐藏与否而做的判断逻辑，而且不会出现复杂的判断的逻辑出错。\n\n\n\n# 例子二\n\n又是*产品经理老李*说：“D功能很重要，放在第一处吧，这很容易实现吧！”\n\n*程序猿*答道：“嗯......”\n\n**笨拙的实现**：\n\n每个UICollectionViewDelegate、UICollectionViewDataSource、UICollectionViewDelegateFlowLayout的方法里面的判断逻辑都修改......\n\n（*磨刀霍霍向老李*）\n\n**优雅的实现**：\n\n只需修改configItemTypes，将DCell的判断逻辑放到最前面先判断。（这是真的吗？？就这么简单？？）\n\n**小分析**：\n\n任何顺序变化都可以通过简单修改configItemTypes而实现，不改动其他地方。\n\n\n\n# 例子三\n\n*老李*又来了：“把C功能去掉......”\n\n*程序猿*答道：“嗯......”\n\n**笨拙的实现**：\n\n同例子二，又要重新看那段判断逻辑。\n\n**优雅的实现**：\n\n同样只需修改configItemTypes，将添加CCell的部分删除。（好崇拜自己啊！！！！！！！！）\n\n**小分析**：\n\n任何增加和删除都可以通过简单修改configItemTypes而实现，不改动其他地方。\n\n\n\n# 进阶例子\n\n上面的几个例子都是没有Section的，如果再加多一层Section，那么复杂的程度就上升很多了，这里就不再赘述了。主要说下这种情况下枚举的数据结构设计，可以有很多种，下面是我的一个实现，还可以更优化。\n\n```\nenum XXXSectionType {\n    case SectionA(rowTypes:[XXXRowType])\n    case SectionB(rowTypes:[XXXRowType], index: Int)\n    case SectionC(rowTypes:[XXXRowType])\n}\n\nenum XXXRowType {\n    case RowA\n    case RowB\n    case RowC\n}\n```\n\n这种枚举的方法在有section的情况下更彰显了它的价值！依着上面的几个例子的需求尝试下就能体会得出来了。\n\n# 总结\n\n从上面的几个需求和处理可以慢慢抽象出这麻烦的问题所在：\n=>Section/Cell的分布情况没有统一\n=>导致Delegate和DataSource的多处方法需要进行判断\n=>导致展示变化时Delegate和DataSource的多处方法都要修改\n=>导致修改辨识麻烦\n=>导致效率低\n\n枚举的方法将所有分布情况都放在了分布数组的初始化上，Delegate/DataSource不需要通过indexPath去判断自己当前是哪个row/item，实际上就是将未知的麻烦的indexPath抽象出一维数组或者二维数组来表示它们的分布，并且每个分布情况所需的设置（如Cell高度、Cell样式、Header高度等等）都是固定的，所以任何变动只需修改那个分布数组。\n\n看似简单的抽取，却处理掉了很多麻烦的问题和冗余的处理！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-04-24-handle-collectionview-tableview-with-grace.md","raw":"---\ntitle: 戏说CollectionView、TableView如何优雅应对变化的界面展示\ndate: 2016-04-24 16:00:00\ntags: \n     - iOS\ncategories: iOS\nkeywords: iOS\ndescription: 介绍了一种基于枚举来处理CollectionView、TableView的 DataSource 和 Delegate 的方案，以及这种方案带来的便利，降低维护成本，能灵活应对变化需求的特点。\n---\n\n# 前言\n\nApp里很多页面都是用UICollectionView和UITableView做的，比如一些列表类的、详情类的，甚至是商城首页等等，只要是分块的，特别是根据数据源不同而展示不同的页面，都很适合用，但怎么用，使它容易修改、扩展，是个问题。\n\n\n\n**产品经理老李说**：\n\n1. 这一块功能有数据的时候就展示，没有就隐藏\n2. 这一块挪到那块下面\n3. 这一块XXX功能删了，现在不需要了\n4. 之前删的XXX功能补回来吧，然后改成放在XXX功能块下面\n5. 这块地方的高度根据内容动态设置\n6. ......（数不尽的小数点）\n\n**程序猿懵了**：\n\n1. 咦，我之前这个Section放的是什么，看界面的话不准确，有些隐藏之类的情况，界面上这块东西对应的是哪个Cell，也不确定了。\n2. Delegate和DataSource，少的时候只实现三四个方法，多的时候实现七八个，这些都和Section、Cell的各项信息有关，这时候做什么变动都需要改动多处地方，if...else...也就写得到处都是。\n3. ......（数不尽的小数点）\n\n这些麻烦不难解决，就是有时候会很花时间，效率低，于是我想了一个方法解决它。\n\n最初是在做某一类详情的时候想出来的，后面经过应用到其他页面和几次变更的实践之后发现，还真挺方便的！下面将举几个例子来说明这个方法及其特点。\n\n\n\n本想将本文语言组织得有趣些，但可惜功力不够，时间也紧哈，下次再尝试。\n\n\n\n# 例子一\n\n*产品经理老李*说：“给我实现xxx功能，有5部分信息，其中A、C、D功能没有东西的时候是隐藏的......”\n\n*程序猿*答道：“哦......”\n\n**转化成技术需求**：\n\n> 有五种Cell，分别是ACell（根据data.a判断隐藏与否）、BCell（默认有）、CCell（根据data.c数组个数判断隐藏与否，并且根据个数设置cell大小）、DCell（根据data.d数组个数判断隐藏与否）、ECell（默认有），隐藏与否顺序都是A\\B\\C\\D\\E。\n\n**笨拙的实现**：\n\n```\nclass XXXController: UICollectionViewController {\n\n    let data = ......\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        collectionView.reloadData()\n    }\n}\n\nextension XXXController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {\n\n        // switch 或 if...else...\n        switch indexPath.row {\n        case 0:\n            // 判断是A还是B\n        case 1:\n            // 判断是B还是C还是D还是E......(心里骂着产品经理)\n            // 这里很容易犯错，细想下你就知道了......(又被扣工资了囧)\n        case 2:\n            // 判断是C还是D还是E......(心里骂着产品经理)\n        case 3:\n            // 判断是D还是E......(心里骂着产品经理)\n        case 4:\n            // ECell\n        default:\n            // 还要写default......\n        }\n    }\n}\n\nextension XXXController {// UICollectionViewDelegate、UICollectionViewDataSource\n\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // 根据数据源计算分别有没有A/C/D\n        // 一堆if...else......(心里骂着产品经理)\n        return 2 + ......\n    }\n\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n        // 同sizeForItemAtIndexPath(心里骂着产品经理)\n    }\n\n    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        // 同sizeForItemAtIndexPath(心里骂着产品经理)\n    }\n}\n```\n\n**优雅的实现**：\n\n```\nenum XXXItemTypes {\n    case A\n    case B\n    case C(count:Int)\n    case D\n    case E\n    ......\n}\n\nclass XXXController: UICollectionViewController {\n\n    let data = ......\n    var itemTypes:[XXXItemTypes] = []\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        configItemTypes(data)\n        collectionView.reloadData()\n    }\n}\n\nprivate extension XXXController {\n    func configItemTypes(data) {\n\n        itemTypes = []\n        if let _ = data.a {// 根据对象是否存在判断隐藏与否的情况\n            itemTypes.append(XXXItemTypes.A)\n        }\n        itemTypes.append(XXXItemTypes.B)// 默认有的情况\n        if let cCount = data.c.count where cCount > 0 {// 根据个数判断隐藏与否的情况\n            itemTypes.append(XXXItemTypes.C(cCount))\n        }\n        if let dCount = data.d.count where dCount > 0 {\n            itemTypes.append(XXXItemTypes.D)\n        }\n        itemTypes.append(XXXItemTypes.E)// 默认有的情况\n        ......\n    }\n}\n\nextension XXXController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {\n\n        switch itemTypes[indexPath.row] {\n        case .A:\n            return ACell.cellSize(......)\n        case .B(let count):\n            return BCell.cellSize(count: count)\n        case .C:\n            return CCell.cellSize(......)\n        case .D:\n            return DCell.cellSize(......)\n        case .E:\n            return ECell.cellSize(......)\n        }\n    }\n}\n\nextension XXXController {// UICollectionViewDelegate、UICollectionViewDataSource\n\n    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return itemTypes.count\n    }\n\n    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n\n        switch itemTypes[indexPath.row] {\n        case .A:\n            ......\n        case .B:\n            ......\n        case .C:\n            ......\n        case .D:\n            ......\n        case .E:\n            ......\n        }\n    }\n\n    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) {\n        switch itemTypes[indexPath.row] {\n            ......\n        }\n    }\n}\n```\n\n**小分析**：\n\n可以看到，所有的判断（4处地方）都归结一处，也就是configItemTypes里面，省去了一堆因为隐藏与否而做的判断逻辑，而且不会出现复杂的判断的逻辑出错。\n\n\n\n# 例子二\n\n又是*产品经理老李*说：“D功能很重要，放在第一处吧，这很容易实现吧！”\n\n*程序猿*答道：“嗯......”\n\n**笨拙的实现**：\n\n每个UICollectionViewDelegate、UICollectionViewDataSource、UICollectionViewDelegateFlowLayout的方法里面的判断逻辑都修改......\n\n（*磨刀霍霍向老李*）\n\n**优雅的实现**：\n\n只需修改configItemTypes，将DCell的判断逻辑放到最前面先判断。（这是真的吗？？就这么简单？？）\n\n**小分析**：\n\n任何顺序变化都可以通过简单修改configItemTypes而实现，不改动其他地方。\n\n\n\n# 例子三\n\n*老李*又来了：“把C功能去掉......”\n\n*程序猿*答道：“嗯......”\n\n**笨拙的实现**：\n\n同例子二，又要重新看那段判断逻辑。\n\n**优雅的实现**：\n\n同样只需修改configItemTypes，将添加CCell的部分删除。（好崇拜自己啊！！！！！！！！）\n\n**小分析**：\n\n任何增加和删除都可以通过简单修改configItemTypes而实现，不改动其他地方。\n\n\n\n# 进阶例子\n\n上面的几个例子都是没有Section的，如果再加多一层Section，那么复杂的程度就上升很多了，这里就不再赘述了。主要说下这种情况下枚举的数据结构设计，可以有很多种，下面是我的一个实现，还可以更优化。\n\n```\nenum XXXSectionType {\n    case SectionA(rowTypes:[XXXRowType])\n    case SectionB(rowTypes:[XXXRowType], index: Int)\n    case SectionC(rowTypes:[XXXRowType])\n}\n\nenum XXXRowType {\n    case RowA\n    case RowB\n    case RowC\n}\n```\n\n这种枚举的方法在有section的情况下更彰显了它的价值！依着上面的几个例子的需求尝试下就能体会得出来了。\n\n# 总结\n\n从上面的几个需求和处理可以慢慢抽象出这麻烦的问题所在：\n=>Section/Cell的分布情况没有统一\n=>导致Delegate和DataSource的多处方法需要进行判断\n=>导致展示变化时Delegate和DataSource的多处方法都要修改\n=>导致修改辨识麻烦\n=>导致效率低\n\n枚举的方法将所有分布情况都放在了分布数组的初始化上，Delegate/DataSource不需要通过indexPath去判断自己当前是哪个row/item，实际上就是将未知的麻烦的indexPath抽象出一维数组或者二维数组来表示它们的分布，并且每个分布情况所需的设置（如Cell高度、Cell样式、Header高度等等）都是固定的，所以任何变动只需修改那个分布数组。\n\n看似简单的抽取，却处理掉了很多麻烦的问题和冗余的处理！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"handle-collectionview-tableview-with-grace","published":1,"updated":"2020-02-25T15:23:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q2002907eixg1s7tg5","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>App里很多页面都是用UICollectionView和UITableView做的，比如一些列表类的、详情类的，甚至是商城首页等等，只要是分块的，特别是根据数据源不同而展示不同的页面，都很适合用，但怎么用，使它容易修改、扩展，是个问题。</p>\n<p><strong>产品经理老李说</strong>：</p>\n<ol>\n<li>这一块功能有数据的时候就展示，没有就隐藏</li>\n<li>这一块挪到那块下面</li>\n<li>这一块XXX功能删了，现在不需要了</li>\n<li>之前删的XXX功能补回来吧，然后改成放在XXX功能块下面</li>\n<li>这块地方的高度根据内容动态设置</li>\n<li>……（数不尽的小数点）</li>\n</ol>\n<p><strong>程序猿懵了</strong>：</p>\n<ol>\n<li>咦，我之前这个Section放的是什么，看界面的话不准确，有些隐藏之类的情况，界面上这块东西对应的是哪个Cell，也不确定了。</li>\n<li>Delegate和DataSource，少的时候只实现三四个方法，多的时候实现七八个，这些都和Section、Cell的各项信息有关，这时候做什么变动都需要改动多处地方，if…else…也就写得到处都是。</li>\n<li>……（数不尽的小数点）</li>\n</ol>\n<p>这些麻烦不难解决，就是有时候会很花时间，效率低，于是我想了一个方法解决它。</p>\n<p>最初是在做某一类详情的时候想出来的，后面经过应用到其他页面和几次变更的实践之后发现，还真挺方便的！下面将举几个例子来说明这个方法及其特点。</p>\n<p>本想将本文语言组织得有趣些，但可惜功力不够，时间也紧哈，下次再尝试。</p>\n<h1 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h1><p><em>产品经理老李</em>说：“给我实现xxx功能，有5部分信息，其中A、C、D功能没有东西的时候是隐藏的……”</p>\n<p><em>程序猿</em>答道：“哦……”</p>\n<p><strong>转化成技术需求</strong>：</p>\n<blockquote>\n<p>有五种Cell，分别是ACell（根据data.a判断隐藏与否）、BCell（默认有）、CCell（根据data.c数组个数判断隐藏与否，并且根据个数设置cell大小）、DCell（根据data.d数组个数判断隐藏与否）、ECell（默认有），隐藏与否顺序都是A\\B\\C\\D\\E。</p>\n</blockquote>\n<p><strong>笨拙的实现</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class XXXController: UICollectionViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = ......</span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        collectionView.reloadData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController: UICollectionViewDelegateFlowLayout &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // switch 或 if...else...</span><br><span class=\"line\">        switch indexPath.row &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            // 判断是A还是B</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            // 判断是B还是C还是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">            // 这里很容易犯错，细想下你就知道了......(又被扣工资了囧)</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            // 判断是C还是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            // 判断是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            // ECell</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            // 还要写default......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController &#123;// UICollectionViewDelegate、UICollectionViewDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        // 根据数据源计算分别有没有A/C/D</span><br><span class=\"line\">        // 一堆if...else......(心里骂着产品经理)</span><br><span class=\"line\">        return 2 + ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell &#123;</span><br><span class=\"line\">        // 同sizeForItemAtIndexPath(心里骂着产品经理)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) &#123;</span><br><span class=\"line\">        // 同sizeForItemAtIndexPath(心里骂着产品经理)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优雅的实现</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum XXXItemTypes &#123;</span><br><span class=\"line\">    case A</span><br><span class=\"line\">    case B</span><br><span class=\"line\">    case C(count:Int)</span><br><span class=\"line\">    case D</span><br><span class=\"line\">    case E</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XXXController: UICollectionViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = ......</span><br><span class=\"line\">    var itemTypes:[XXXItemTypes] = []</span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        configItemTypes(data)</span><br><span class=\"line\">        collectionView.reloadData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private extension XXXController &#123;</span><br><span class=\"line\">    func configItemTypes(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        itemTypes = []</span><br><span class=\"line\">        if let _ = data.a &#123;// 根据对象是否存在判断隐藏与否的情况</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.A)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        itemTypes.append(XXXItemTypes.B)// 默认有的情况</span><br><span class=\"line\">        if let cCount = data.c.count where cCount &gt; 0 &#123;// 根据个数判断隐藏与否的情况</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.C(cCount))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if let dCount = data.d.count where dCount &gt; 0 &#123;</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.D)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        itemTypes.append(XXXItemTypes.E)// 默认有的情况</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController: UICollectionViewDelegateFlowLayout &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">        case .A:</span><br><span class=\"line\">            return ACell.cellSize(......)</span><br><span class=\"line\">        case .B(let count):</span><br><span class=\"line\">            return BCell.cellSize(count: count)</span><br><span class=\"line\">        case .C:</span><br><span class=\"line\">            return CCell.cellSize(......)</span><br><span class=\"line\">        case .D:</span><br><span class=\"line\">            return DCell.cellSize(......)</span><br><span class=\"line\">        case .E:</span><br><span class=\"line\">            return ECell.cellSize(......)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController &#123;// UICollectionViewDelegate、UICollectionViewDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        return itemTypes.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">        case .A:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .B:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .C:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .D:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .E:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) &#123;</span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>小分析</strong>：</p>\n<p>可以看到，所有的判断（4处地方）都归结一处，也就是configItemTypes里面，省去了一堆因为隐藏与否而做的判断逻辑，而且不会出现复杂的判断的逻辑出错。</p>\n<h1 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h1><p>又是<em>产品经理老李</em>说：“D功能很重要，放在第一处吧，这很容易实现吧！”</p>\n<p><em>程序猿</em>答道：“嗯……”</p>\n<p><strong>笨拙的实现</strong>：</p>\n<p>每个UICollectionViewDelegate、UICollectionViewDataSource、UICollectionViewDelegateFlowLayout的方法里面的判断逻辑都修改……</p>\n<p>（<em>磨刀霍霍向老李</em>）</p>\n<p><strong>优雅的实现</strong>：</p>\n<p>只需修改configItemTypes，将DCell的判断逻辑放到最前面先判断。（这是真的吗？？就这么简单？？）</p>\n<p><strong>小分析</strong>：</p>\n<p>任何顺序变化都可以通过简单修改configItemTypes而实现，不改动其他地方。</p>\n<h1 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h1><p><em>老李</em>又来了：“把C功能去掉……”</p>\n<p><em>程序猿</em>答道：“嗯……”</p>\n<p><strong>笨拙的实现</strong>：</p>\n<p>同例子二，又要重新看那段判断逻辑。</p>\n<p><strong>优雅的实现</strong>：</p>\n<p>同样只需修改configItemTypes，将添加CCell的部分删除。（好崇拜自己啊！！！！！！！！）</p>\n<p><strong>小分析</strong>：</p>\n<p>任何增加和删除都可以通过简单修改configItemTypes而实现，不改动其他地方。</p>\n<h1 id=\"进阶例子\"><a href=\"#进阶例子\" class=\"headerlink\" title=\"进阶例子\"></a>进阶例子</h1><p>上面的几个例子都是没有Section的，如果再加多一层Section，那么复杂的程度就上升很多了，这里就不再赘述了。主要说下这种情况下枚举的数据结构设计，可以有很多种，下面是我的一个实现，还可以更优化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum XXXSectionType &#123;</span><br><span class=\"line\">    case SectionA(rowTypes:[XXXRowType])</span><br><span class=\"line\">    case SectionB(rowTypes:[XXXRowType], index: Int)</span><br><span class=\"line\">    case SectionC(rowTypes:[XXXRowType])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">enum XXXRowType &#123;</span><br><span class=\"line\">    case RowA</span><br><span class=\"line\">    case RowB</span><br><span class=\"line\">    case RowC</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种枚举的方法在有section的情况下更彰显了它的价值！依着上面的几个例子的需求尝试下就能体会得出来了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从上面的几个需求和处理可以慢慢抽象出这麻烦的问题所在：<br>=&gt;Section/Cell的分布情况没有统一<br>=&gt;导致Delegate和DataSource的多处方法需要进行判断<br>=&gt;导致展示变化时Delegate和DataSource的多处方法都要修改<br>=&gt;导致修改辨识麻烦<br>=&gt;导致效率低</p>\n<p>枚举的方法将所有分布情况都放在了分布数组的初始化上，Delegate/DataSource不需要通过indexPath去判断自己当前是哪个row/item，实际上就是将未知的麻烦的indexPath抽象出一维数组或者二维数组来表示它们的分布，并且每个分布情况所需的设置（如Cell高度、Cell样式、Header高度等等）都是固定的，所以任何变动只需修改那个分布数组。</p>\n<p>看似简单的抽取，却处理掉了很多麻烦的问题和冗余的处理！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>App里很多页面都是用UICollectionView和UITableView做的，比如一些列表类的、详情类的，甚至是商城首页等等，只要是分块的，特别是根据数据源不同而展示不同的页面，都很适合用，但怎么用，使它容易修改、扩展，是个问题。</p>\n<p><strong>产品经理老李说</strong>：</p>\n<ol>\n<li>这一块功能有数据的时候就展示，没有就隐藏</li>\n<li>这一块挪到那块下面</li>\n<li>这一块XXX功能删了，现在不需要了</li>\n<li>之前删的XXX功能补回来吧，然后改成放在XXX功能块下面</li>\n<li>这块地方的高度根据内容动态设置</li>\n<li>……（数不尽的小数点）</li>\n</ol>\n<p><strong>程序猿懵了</strong>：</p>\n<ol>\n<li>咦，我之前这个Section放的是什么，看界面的话不准确，有些隐藏之类的情况，界面上这块东西对应的是哪个Cell，也不确定了。</li>\n<li>Delegate和DataSource，少的时候只实现三四个方法，多的时候实现七八个，这些都和Section、Cell的各项信息有关，这时候做什么变动都需要改动多处地方，if…else…也就写得到处都是。</li>\n<li>……（数不尽的小数点）</li>\n</ol>\n<p>这些麻烦不难解决，就是有时候会很花时间，效率低，于是我想了一个方法解决它。</p>\n<p>最初是在做某一类详情的时候想出来的，后面经过应用到其他页面和几次变更的实践之后发现，还真挺方便的！下面将举几个例子来说明这个方法及其特点。</p>\n<p>本想将本文语言组织得有趣些，但可惜功力不够，时间也紧哈，下次再尝试。</p>\n<h1 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h1><p><em>产品经理老李</em>说：“给我实现xxx功能，有5部分信息，其中A、C、D功能没有东西的时候是隐藏的……”</p>\n<p><em>程序猿</em>答道：“哦……”</p>\n<p><strong>转化成技术需求</strong>：</p>\n<blockquote>\n<p>有五种Cell，分别是ACell（根据data.a判断隐藏与否）、BCell（默认有）、CCell（根据data.c数组个数判断隐藏与否，并且根据个数设置cell大小）、DCell（根据data.d数组个数判断隐藏与否）、ECell（默认有），隐藏与否顺序都是A\\B\\C\\D\\E。</p>\n</blockquote>\n<p><strong>笨拙的实现</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class XXXController: UICollectionViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = ......</span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        collectionView.reloadData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController: UICollectionViewDelegateFlowLayout &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // switch 或 if...else...</span><br><span class=\"line\">        switch indexPath.row &#123;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            // 判断是A还是B</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            // 判断是B还是C还是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">            // 这里很容易犯错，细想下你就知道了......(又被扣工资了囧)</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            // 判断是C还是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">        case 3:</span><br><span class=\"line\">            // 判断是D还是E......(心里骂着产品经理)</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">            // ECell</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            // 还要写default......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController &#123;// UICollectionViewDelegate、UICollectionViewDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        // 根据数据源计算分别有没有A/C/D</span><br><span class=\"line\">        // 一堆if...else......(心里骂着产品经理)</span><br><span class=\"line\">        return 2 + ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell &#123;</span><br><span class=\"line\">        // 同sizeForItemAtIndexPath(心里骂着产品经理)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) &#123;</span><br><span class=\"line\">        // 同sizeForItemAtIndexPath(心里骂着产品经理)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优雅的实现</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum XXXItemTypes &#123;</span><br><span class=\"line\">    case A</span><br><span class=\"line\">    case B</span><br><span class=\"line\">    case C(count:Int)</span><br><span class=\"line\">    case D</span><br><span class=\"line\">    case E</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XXXController: UICollectionViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let data = ......</span><br><span class=\"line\">    var itemTypes:[XXXItemTypes] = []</span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        configItemTypes(data)</span><br><span class=\"line\">        collectionView.reloadData()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private extension XXXController &#123;</span><br><span class=\"line\">    func configItemTypes(data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        itemTypes = []</span><br><span class=\"line\">        if let _ = data.a &#123;// 根据对象是否存在判断隐藏与否的情况</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.A)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        itemTypes.append(XXXItemTypes.B)// 默认有的情况</span><br><span class=\"line\">        if let cCount = data.c.count where cCount &gt; 0 &#123;// 根据个数判断隐藏与否的情况</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.C(cCount))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if let dCount = data.d.count where dCount &gt; 0 &#123;</span><br><span class=\"line\">            itemTypes.append(XXXItemTypes.D)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        itemTypes.append(XXXItemTypes.E)// 默认有的情况</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController: UICollectionViewDelegateFlowLayout &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">        case .A:</span><br><span class=\"line\">            return ACell.cellSize(......)</span><br><span class=\"line\">        case .B(let count):</span><br><span class=\"line\">            return BCell.cellSize(count: count)</span><br><span class=\"line\">        case .C:</span><br><span class=\"line\">            return CCell.cellSize(......)</span><br><span class=\"line\">        case .D:</span><br><span class=\"line\">            return DCell.cellSize(......)</span><br><span class=\"line\">        case .E:</span><br><span class=\"line\">            return ECell.cellSize(......)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extension XXXController &#123;// UICollectionViewDelegate、UICollectionViewDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        return itemTypes.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -&gt; UICollectionViewCell &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">        case .A:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .B:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .C:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .D:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        case .E:</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func collectionView(collectionView: UICollectionView, didSelectItemAtIndexPath indexPath: NSIndexPath) &#123;</span><br><span class=\"line\">        switch itemTypes[indexPath.row] &#123;</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>小分析</strong>：</p>\n<p>可以看到，所有的判断（4处地方）都归结一处，也就是configItemTypes里面，省去了一堆因为隐藏与否而做的判断逻辑，而且不会出现复杂的判断的逻辑出错。</p>\n<h1 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h1><p>又是<em>产品经理老李</em>说：“D功能很重要，放在第一处吧，这很容易实现吧！”</p>\n<p><em>程序猿</em>答道：“嗯……”</p>\n<p><strong>笨拙的实现</strong>：</p>\n<p>每个UICollectionViewDelegate、UICollectionViewDataSource、UICollectionViewDelegateFlowLayout的方法里面的判断逻辑都修改……</p>\n<p>（<em>磨刀霍霍向老李</em>）</p>\n<p><strong>优雅的实现</strong>：</p>\n<p>只需修改configItemTypes，将DCell的判断逻辑放到最前面先判断。（这是真的吗？？就这么简单？？）</p>\n<p><strong>小分析</strong>：</p>\n<p>任何顺序变化都可以通过简单修改configItemTypes而实现，不改动其他地方。</p>\n<h1 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h1><p><em>老李</em>又来了：“把C功能去掉……”</p>\n<p><em>程序猿</em>答道：“嗯……”</p>\n<p><strong>笨拙的实现</strong>：</p>\n<p>同例子二，又要重新看那段判断逻辑。</p>\n<p><strong>优雅的实现</strong>：</p>\n<p>同样只需修改configItemTypes，将添加CCell的部分删除。（好崇拜自己啊！！！！！！！！）</p>\n<p><strong>小分析</strong>：</p>\n<p>任何增加和删除都可以通过简单修改configItemTypes而实现，不改动其他地方。</p>\n<h1 id=\"进阶例子\"><a href=\"#进阶例子\" class=\"headerlink\" title=\"进阶例子\"></a>进阶例子</h1><p>上面的几个例子都是没有Section的，如果再加多一层Section，那么复杂的程度就上升很多了，这里就不再赘述了。主要说下这种情况下枚举的数据结构设计，可以有很多种，下面是我的一个实现，还可以更优化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum XXXSectionType &#123;</span><br><span class=\"line\">    case SectionA(rowTypes:[XXXRowType])</span><br><span class=\"line\">    case SectionB(rowTypes:[XXXRowType], index: Int)</span><br><span class=\"line\">    case SectionC(rowTypes:[XXXRowType])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">enum XXXRowType &#123;</span><br><span class=\"line\">    case RowA</span><br><span class=\"line\">    case RowB</span><br><span class=\"line\">    case RowC</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种枚举的方法在有section的情况下更彰显了它的价值！依着上面的几个例子的需求尝试下就能体会得出来了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从上面的几个需求和处理可以慢慢抽象出这麻烦的问题所在：<br>=&gt;Section/Cell的分布情况没有统一<br>=&gt;导致Delegate和DataSource的多处方法需要进行判断<br>=&gt;导致展示变化时Delegate和DataSource的多处方法都要修改<br>=&gt;导致修改辨识麻烦<br>=&gt;导致效率低</p>\n<p>枚举的方法将所有分布情况都放在了分布数组的初始化上，Delegate/DataSource不需要通过indexPath去判断自己当前是哪个row/item，实际上就是将未知的麻烦的indexPath抽象出一维数组或者二维数组来表示它们的分布，并且每个分布情况所需的设置（如Cell高度、Cell样式、Header高度等等）都是固定的，所以任何变动只需修改那个分布数组。</p>\n<p>看似简单的抽取，却处理掉了很多麻烦的问题和冗余的处理！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"iOS In-App Purchase(IAP) 流程与实现","date":"2016-05-31T08:00:00.000Z","keywords":"iOS 内购 IAP","description":"主要介绍了 iOS In-App Purchase(IAP) 的流程和实现","_content":"\n## 目录\n\n- 前言\n- 程序内购买流程\n  - iTunes Connect商品配置\n  - 添加沙箱技术测试员\n  - App内获取购买商品\n  - 验证receipt\n- 测试截图\n- 提交审核\n- 审核问题\n\n## 前言\n\n最近做了iOS程序内购买，封装了一下给上层调用，现在介绍下流程和简单的实现。具体可以看我上传到Github的代码[ZInAppPurchase](https://github.com/sapphirezzz/ZInAppPurchase)，或者直接在*CocoaPods*拉取*ZInAppPurchase*。（第一次试试上传到CocoaPods，还没加demo）\n\n\n\n程序内购买要做的话要考虑很多，像漏单处理、重新购买处理等等，对于游戏App来说更需要考虑。下面只介绍最简单的流程和处理。\n\n\n\n## 程序内购买流程\n\niOS程序内购买流程主要分几步：\n\n1. iTunes Connect商品配置\n2. 添加沙箱技术测试员\n3. App内获取购买商品\n4. 验证receipt\n\n### iTunes Connect商品配置\n\n主要是填写完整信息和添加商品。\n\n#### 填写完整信息\n\n登录*iTunes Connect*，进入”*协议、税务和银行业务*“。\n\n如果*Contracts In Process*下有*All(See Contract)*和*Contact Info*、*Bank Info*、*Tax Info*三列，则表示已填写；否则点击*Request*按照提示进行操作。之后就会出现*Contact Info*、*Bank Info*、*Tax Info*三列，分别*Set Up*(需要同公司财务人员一起填写)。\n\n(如果没有填写完整只能添加*免费订阅*商品)\n\n#### 添加商品\n\n登录*iTunes Connect*，进入*我的App*——*功能*——*App内购买项目*，点击+号。可以添加的类型有：消耗型项目、非消耗型项目、自动续订订阅、免费订阅、非续订订阅。商品添加完屏幕快照就会变成*准备提交*状态。\n\n注意：产品 ID不可重复，如果删除某个商品，以后这个产品的ID也不可用，即使它已经被删除了；另外类型也不能改，选错了只能重新增加一个商品。\n\n\n### 添加沙箱技术测试员\n\n登录*iTunes Connect*，进入*用户和职能*——*沙箱技术测试员*，点击+号。（必须是未注册的Apple账号，用于测试购买）\n\n\n\n### App内获取购买商品\n\n- 导入系统库StoreKit\n\n```\nimport StoreKit\n```\n\n- 获取商品信息\n\n根据productId获取商品信息(可以获取多个)： \n\n```\nlet productRequest = SKProductsRequest(productIdentifiers: Set<String>(arrayLiteral: productId))\nproductRequest.delegate = self\nproductRequest.start()\n```\n\n实现SKProductsRequestDelegate：\n\n```\nfunc productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) {\n    if let product = response.products.first {// 获取返回的商品\n    }\n}\n```\n\n- 购买商品\n\n购买获取的商品product：\n\n```\nif SKPaymentQueue.canMakePayments() {// 是否能且允许支付\n    let payment = SKPayment(product: product)\n    SKPaymentQueue.defaultQueue().addTransactionObserver(self)\n    SKPaymentQueue.defaultQueue().addPayment(payment)\n}\n```\n\n实现SKPaymentTransactionObserver：\n\n```\nfunc paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {\n\n    for transaction in transactions {\n        switch transaction.transactionState {\n        case .Purchased: // Transaction is in queue, user has been charged.  Client should complete the transaction.\n\n            if let receiptUrl = NSBundle.mainBundle().appStoreReceiptURL, let receiptData = NSData(contentsOfURL: receiptUrl) {\n                let receiptString = receiptData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))\n                // 将receiptString发给服务器\n            }\n            SKPaymentQueue.defaultQueue().finishTransaction(transaction)\n\n        case .Failed: // Transaction was cancelled or failed before being added to the server queue.\n\n            if let errorCode = transaction.error?.code {\n            }\n            SKPaymentQueue.defaultQueue().finishTransaction(transaction)\n        default:\n            break\n        }\n    }\n}\n```\n\n\n\n### 验证receipt\n\nreceipt验证可以本地验证，也可以提交给App Store验证。\n\n参考链接：[Validating Receipts With the App Store](https://developer.apple.com/library/mac/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1)\n\n我们是将receipt进行base64编码后，传给服务器，服务器判断凭证是否已经存在或验证过，再去POST给Apple服务器验证。\n\n- 沙箱环境POST的URL\n\nhttps://sandbox.itunes.apple.com/verifyReceipt\n\n- 正式环境POST的URL\n\nhttps://buy.itunes.apple.com/verifyReceipt\n\n验证后Apple会返回数据，从中可以获取product_id、quantity等，下面是正确时的返回数据：\n\n```\n{\n    \"status\": 0,\n    \"environment\": \"Sandbox\",\n    \"receipt\": {\n        \"receipt_type\": \"ProductionSandbox\",\n        \"adam_id\": 0,\n        \"app_item_id\": 0,\n        \"bundle_id\": \"com.xxx.xxxxxx\",\n        \"application_version\": \"999\",\n        \"download_id\": 0,\n        \"version_external_identifier\": 0,\n        \"receipt_creation_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n        \"receipt_creation_date_ms\": \"1464237308000\",\n        \"receipt_creation_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n        \"request_date\": \"2016-05-26 06:40:32 Etc/GMT\",\n        \"request_date_ms\": \"1464244832729\",\n        \"request_date_pst\": \"2016-05-25 23:40:32 America/Los_Angeles\",\n        \"original_purchase_date\": \"2013-08-01 07:00:00 Etc/GMT\",\n        \"original_purchase_date_ms\": \"1375340400000\",\n        \"original_purchase_date_pst\": \"2013-08-01 00:00:00 America/Los_Angeles\",\n        \"original_application_version\": \"1.0\",\n        \"in_app\": [\n            {\n                \"quantity\": \"1\",\n                \"product_id\": \"000000\",\n                \"transaction_id\": \"1000000213676495\",\n                \"original_transaction_id\": \"1000000213676495\",\n                \"purchase_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n                \"purchase_date_ms\": \"1464237308000\",\n                \"purchase_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n                \"original_purchase_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n                \"original_purchase_date_ms\": \"1464237308000\",\n                \"original_purchase_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n                \"is_trial_period\": \"false\"\n            }\n        ]\n    }\n}\n```\n\n\n\n## 测试截图\n\n下面是在沙箱环境下的真机测试截图（“测试”是所填写的产品名称，未登录Apple ID时会提示登录，已登录时会提示输入密码/Touch ID）：\n![IMG_6816.PNG](304530-e6031ed92ab8fac0.png)\n\n![IMG_6814.PNG](304530-8e271b6afd1bc2eb.png)\n\n\n\n## 提交审核\n\n在*iTunes Connect*添加完App版本后，在*App 内购买项目*处添加该版本新增的App内购买项目。\n\n\n\n\n## 审核问题\n\n####找不到入口\n\nInformation Needed\n\nWe have begun the review of your app but aren't able to continue because we can't locate the In-App Purchase(s) within your app. \n\nAt your earliest opportunity, please reply to this message providing the steps for locating the In-App Purchase(s) in your app.\n\n\n####使用In-App Purchase之前要求登录/注册\n\nHello, \n\nThank you for providing the information. Upon further review of your application, we have found the following issue(s):\n\nLegal - 5.1.1\n\n\nWe noticed that your app requires users to register with personal information to access non account-based features(including In-App Purchase feature), which is not allowed on the App Store. \n\nWe've attached screenshot(s) for your reference.\n\nApps cannot require user registration prior to allowing access to app content and features that are not associated specifically to the user.\n\nNext Steps\n\nUser registration that requires the sharing of personal information must be optional or tied to account-specific functionality.\n\nPlease make it clear to the user that registering will enable them to access the content from any of their iOS devices, and to provide them a way to register at any time, if they wish to later extend access to additional iOS devices.\n\nPlease note that although guideline 3.1.2 of the App Store Review Guidelines requires an application to make subscription content available to all the iOS devices owned by a single user, it is not appropriate to force user registration to meet this requirement; such user registration must be made optional.\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-05-31-ios-in-app-purchase-iap.md","raw":"---\ntitle: iOS In-App Purchase(IAP) 流程与实现\ndate: 2016-05-31 16:00:00\ntags: \n     - iOS\n     - IAP\ncategories: iOS\nkeywords: iOS 内购 IAP\ndescription: 主要介绍了 iOS In-App Purchase(IAP) 的流程和实现\n---\n\n## 目录\n\n- 前言\n- 程序内购买流程\n  - iTunes Connect商品配置\n  - 添加沙箱技术测试员\n  - App内获取购买商品\n  - 验证receipt\n- 测试截图\n- 提交审核\n- 审核问题\n\n## 前言\n\n最近做了iOS程序内购买，封装了一下给上层调用，现在介绍下流程和简单的实现。具体可以看我上传到Github的代码[ZInAppPurchase](https://github.com/sapphirezzz/ZInAppPurchase)，或者直接在*CocoaPods*拉取*ZInAppPurchase*。（第一次试试上传到CocoaPods，还没加demo）\n\n\n\n程序内购买要做的话要考虑很多，像漏单处理、重新购买处理等等，对于游戏App来说更需要考虑。下面只介绍最简单的流程和处理。\n\n\n\n## 程序内购买流程\n\niOS程序内购买流程主要分几步：\n\n1. iTunes Connect商品配置\n2. 添加沙箱技术测试员\n3. App内获取购买商品\n4. 验证receipt\n\n### iTunes Connect商品配置\n\n主要是填写完整信息和添加商品。\n\n#### 填写完整信息\n\n登录*iTunes Connect*，进入”*协议、税务和银行业务*“。\n\n如果*Contracts In Process*下有*All(See Contract)*和*Contact Info*、*Bank Info*、*Tax Info*三列，则表示已填写；否则点击*Request*按照提示进行操作。之后就会出现*Contact Info*、*Bank Info*、*Tax Info*三列，分别*Set Up*(需要同公司财务人员一起填写)。\n\n(如果没有填写完整只能添加*免费订阅*商品)\n\n#### 添加商品\n\n登录*iTunes Connect*，进入*我的App*——*功能*——*App内购买项目*，点击+号。可以添加的类型有：消耗型项目、非消耗型项目、自动续订订阅、免费订阅、非续订订阅。商品添加完屏幕快照就会变成*准备提交*状态。\n\n注意：产品 ID不可重复，如果删除某个商品，以后这个产品的ID也不可用，即使它已经被删除了；另外类型也不能改，选错了只能重新增加一个商品。\n\n\n### 添加沙箱技术测试员\n\n登录*iTunes Connect*，进入*用户和职能*——*沙箱技术测试员*，点击+号。（必须是未注册的Apple账号，用于测试购买）\n\n\n\n### App内获取购买商品\n\n- 导入系统库StoreKit\n\n```\nimport StoreKit\n```\n\n- 获取商品信息\n\n根据productId获取商品信息(可以获取多个)： \n\n```\nlet productRequest = SKProductsRequest(productIdentifiers: Set<String>(arrayLiteral: productId))\nproductRequest.delegate = self\nproductRequest.start()\n```\n\n实现SKProductsRequestDelegate：\n\n```\nfunc productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) {\n    if let product = response.products.first {// 获取返回的商品\n    }\n}\n```\n\n- 购买商品\n\n购买获取的商品product：\n\n```\nif SKPaymentQueue.canMakePayments() {// 是否能且允许支付\n    let payment = SKPayment(product: product)\n    SKPaymentQueue.defaultQueue().addTransactionObserver(self)\n    SKPaymentQueue.defaultQueue().addPayment(payment)\n}\n```\n\n实现SKPaymentTransactionObserver：\n\n```\nfunc paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {\n\n    for transaction in transactions {\n        switch transaction.transactionState {\n        case .Purchased: // Transaction is in queue, user has been charged.  Client should complete the transaction.\n\n            if let receiptUrl = NSBundle.mainBundle().appStoreReceiptURL, let receiptData = NSData(contentsOfURL: receiptUrl) {\n                let receiptString = receiptData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))\n                // 将receiptString发给服务器\n            }\n            SKPaymentQueue.defaultQueue().finishTransaction(transaction)\n\n        case .Failed: // Transaction was cancelled or failed before being added to the server queue.\n\n            if let errorCode = transaction.error?.code {\n            }\n            SKPaymentQueue.defaultQueue().finishTransaction(transaction)\n        default:\n            break\n        }\n    }\n}\n```\n\n\n\n### 验证receipt\n\nreceipt验证可以本地验证，也可以提交给App Store验证。\n\n参考链接：[Validating Receipts With the App Store](https://developer.apple.com/library/mac/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1)\n\n我们是将receipt进行base64编码后，传给服务器，服务器判断凭证是否已经存在或验证过，再去POST给Apple服务器验证。\n\n- 沙箱环境POST的URL\n\nhttps://sandbox.itunes.apple.com/verifyReceipt\n\n- 正式环境POST的URL\n\nhttps://buy.itunes.apple.com/verifyReceipt\n\n验证后Apple会返回数据，从中可以获取product_id、quantity等，下面是正确时的返回数据：\n\n```\n{\n    \"status\": 0,\n    \"environment\": \"Sandbox\",\n    \"receipt\": {\n        \"receipt_type\": \"ProductionSandbox\",\n        \"adam_id\": 0,\n        \"app_item_id\": 0,\n        \"bundle_id\": \"com.xxx.xxxxxx\",\n        \"application_version\": \"999\",\n        \"download_id\": 0,\n        \"version_external_identifier\": 0,\n        \"receipt_creation_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n        \"receipt_creation_date_ms\": \"1464237308000\",\n        \"receipt_creation_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n        \"request_date\": \"2016-05-26 06:40:32 Etc/GMT\",\n        \"request_date_ms\": \"1464244832729\",\n        \"request_date_pst\": \"2016-05-25 23:40:32 America/Los_Angeles\",\n        \"original_purchase_date\": \"2013-08-01 07:00:00 Etc/GMT\",\n        \"original_purchase_date_ms\": \"1375340400000\",\n        \"original_purchase_date_pst\": \"2013-08-01 00:00:00 America/Los_Angeles\",\n        \"original_application_version\": \"1.0\",\n        \"in_app\": [\n            {\n                \"quantity\": \"1\",\n                \"product_id\": \"000000\",\n                \"transaction_id\": \"1000000213676495\",\n                \"original_transaction_id\": \"1000000213676495\",\n                \"purchase_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n                \"purchase_date_ms\": \"1464237308000\",\n                \"purchase_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n                \"original_purchase_date\": \"2016-05-26 04:35:08 Etc/GMT\",\n                \"original_purchase_date_ms\": \"1464237308000\",\n                \"original_purchase_date_pst\": \"2016-05-25 21:35:08 America/Los_Angeles\",\n                \"is_trial_period\": \"false\"\n            }\n        ]\n    }\n}\n```\n\n\n\n## 测试截图\n\n下面是在沙箱环境下的真机测试截图（“测试”是所填写的产品名称，未登录Apple ID时会提示登录，已登录时会提示输入密码/Touch ID）：\n![IMG_6816.PNG](304530-e6031ed92ab8fac0.png)\n\n![IMG_6814.PNG](304530-8e271b6afd1bc2eb.png)\n\n\n\n## 提交审核\n\n在*iTunes Connect*添加完App版本后，在*App 内购买项目*处添加该版本新增的App内购买项目。\n\n\n\n\n## 审核问题\n\n####找不到入口\n\nInformation Needed\n\nWe have begun the review of your app but aren't able to continue because we can't locate the In-App Purchase(s) within your app. \n\nAt your earliest opportunity, please reply to this message providing the steps for locating the In-App Purchase(s) in your app.\n\n\n####使用In-App Purchase之前要求登录/注册\n\nHello, \n\nThank you for providing the information. Upon further review of your application, we have found the following issue(s):\n\nLegal - 5.1.1\n\n\nWe noticed that your app requires users to register with personal information to access non account-based features(including In-App Purchase feature), which is not allowed on the App Store. \n\nWe've attached screenshot(s) for your reference.\n\nApps cannot require user registration prior to allowing access to app content and features that are not associated specifically to the user.\n\nNext Steps\n\nUser registration that requires the sharing of personal information must be optional or tied to account-specific functionality.\n\nPlease make it clear to the user that registering will enable them to access the content from any of their iOS devices, and to provide them a way to register at any time, if they wish to later extend access to additional iOS devices.\n\nPlease note that although guideline 3.1.2 of the App Store Review Guidelines requires an application to make subscription content available to all the iOS devices owned by a single user, it is not appropriate to force user registration to meet this requirement; such user registration must be made optional.\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"ios-in-app-purchase-iap","published":1,"updated":"2020-02-25T15:23:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q3002c07eiae44dddi","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>前言</li>\n<li>程序内购买流程<ul>\n<li>iTunes Connect商品配置</li>\n<li>添加沙箱技术测试员</li>\n<li>App内获取购买商品</li>\n<li>验证receipt</li>\n</ul>\n</li>\n<li>测试截图</li>\n<li>提交审核</li>\n<li>审核问题</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近做了iOS程序内购买，封装了一下给上层调用，现在介绍下流程和简单的实现。具体可以看我上传到Github的代码<a href=\"https://github.com/sapphirezzz/ZInAppPurchase\" target=\"_blank\" rel=\"noopener\">ZInAppPurchase</a>，或者直接在<em>CocoaPods</em>拉取<em>ZInAppPurchase</em>。（第一次试试上传到CocoaPods，还没加demo）</p>\n<p>程序内购买要做的话要考虑很多，像漏单处理、重新购买处理等等，对于游戏App来说更需要考虑。下面只介绍最简单的流程和处理。</p>\n<h2 id=\"程序内购买流程\"><a href=\"#程序内购买流程\" class=\"headerlink\" title=\"程序内购买流程\"></a>程序内购买流程</h2><p>iOS程序内购买流程主要分几步：</p>\n<ol>\n<li>iTunes Connect商品配置</li>\n<li>添加沙箱技术测试员</li>\n<li>App内获取购买商品</li>\n<li>验证receipt</li>\n</ol>\n<h3 id=\"iTunes-Connect商品配置\"><a href=\"#iTunes-Connect商品配置\" class=\"headerlink\" title=\"iTunes Connect商品配置\"></a>iTunes Connect商品配置</h3><p>主要是填写完整信息和添加商品。</p>\n<h4 id=\"填写完整信息\"><a href=\"#填写完整信息\" class=\"headerlink\" title=\"填写完整信息\"></a>填写完整信息</h4><p>登录<em>iTunes Connect</em>，进入”<em>协议、税务和银行业务</em>“。</p>\n<p>如果<em>Contracts In Process<em>下有</em>All(See Contract)<em>和</em>Contact Info<em>、</em>Bank Info<em>、</em>Tax Info<em>三列，则表示已填写；否则点击</em>Request<em>按照提示进行操作。之后就会出现</em>Contact Info<em>、</em>Bank Info<em>、</em>Tax Info<em>三列，分别</em>Set Up</em>(需要同公司财务人员一起填写)。</p>\n<p>(如果没有填写完整只能添加<em>免费订阅</em>商品)</p>\n<h4 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h4><p>登录<em>iTunes Connect</em>，进入<em>我的App</em>——<em>功能</em>——<em>App内购买项目</em>，点击+号。可以添加的类型有：消耗型项目、非消耗型项目、自动续订订阅、免费订阅、非续订订阅。商品添加完屏幕快照就会变成<em>准备提交</em>状态。</p>\n<p>注意：产品 ID不可重复，如果删除某个商品，以后这个产品的ID也不可用，即使它已经被删除了；另外类型也不能改，选错了只能重新增加一个商品。</p>\n<h3 id=\"添加沙箱技术测试员\"><a href=\"#添加沙箱技术测试员\" class=\"headerlink\" title=\"添加沙箱技术测试员\"></a>添加沙箱技术测试员</h3><p>登录<em>iTunes Connect</em>，进入<em>用户和职能</em>——<em>沙箱技术测试员</em>，点击+号。（必须是未注册的Apple账号，用于测试购买）</p>\n<h3 id=\"App内获取购买商品\"><a href=\"#App内获取购买商品\" class=\"headerlink\" title=\"App内获取购买商品\"></a>App内获取购买商品</h3><ul>\n<li>导入系统库StoreKit</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import StoreKit</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取商品信息</li>\n</ul>\n<p>根据productId获取商品信息(可以获取多个)： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let productRequest = SKProductsRequest(productIdentifiers: Set&lt;String&gt;(arrayLiteral: productId))</span><br><span class=\"line\">productRequest.delegate = self</span><br><span class=\"line\">productRequest.start()</span><br></pre></td></tr></table></figure>\n\n<p>实现SKProductsRequestDelegate：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) &#123;</span><br><span class=\"line\">    if let product = response.products.first &#123;// 获取返回的商品</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>购买商品</li>\n</ul>\n<p>购买获取的商品product：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if SKPaymentQueue.canMakePayments() &#123;// 是否能且允许支付</span><br><span class=\"line\">    let payment = SKPayment(product: product)</span><br><span class=\"line\">    SKPaymentQueue.defaultQueue().addTransactionObserver(self)</span><br><span class=\"line\">    SKPaymentQueue.defaultQueue().addPayment(payment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现SKPaymentTransactionObserver：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    for transaction in transactions &#123;</span><br><span class=\"line\">        switch transaction.transactionState &#123;</span><br><span class=\"line\">        case .Purchased: // Transaction is in queue, user has been charged.  Client should complete the transaction.</span><br><span class=\"line\"></span><br><span class=\"line\">            if let receiptUrl = NSBundle.mainBundle().appStoreReceiptURL, let receiptData = NSData(contentsOfURL: receiptUrl) &#123;</span><br><span class=\"line\">                let receiptString = receiptData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))</span><br><span class=\"line\">                // 将receiptString发给服务器</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SKPaymentQueue.defaultQueue().finishTransaction(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">        case .Failed: // Transaction was cancelled or failed before being added to the server queue.</span><br><span class=\"line\"></span><br><span class=\"line\">            if let errorCode = transaction.error?.code &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SKPaymentQueue.defaultQueue().finishTransaction(transaction)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证receipt\"><a href=\"#验证receipt\" class=\"headerlink\" title=\"验证receipt\"></a>验证receipt</h3><p>receipt验证可以本地验证，也可以提交给App Store验证。</p>\n<p>参考链接：<a href=\"https://developer.apple.com/library/mac/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1\" target=\"_blank\" rel=\"noopener\">Validating Receipts With the App Store</a></p>\n<p>我们是将receipt进行base64编码后，传给服务器，服务器判断凭证是否已经存在或验证过，再去POST给Apple服务器验证。</p>\n<ul>\n<li>沙箱环境POST的URL</li>\n</ul>\n<p><a href=\"https://sandbox.itunes.apple.com/verifyReceipt\" target=\"_blank\" rel=\"noopener\">https://sandbox.itunes.apple.com/verifyReceipt</a></p>\n<ul>\n<li>正式环境POST的URL</li>\n</ul>\n<p><a href=\"https://buy.itunes.apple.com/verifyReceipt\" target=\"_blank\" rel=\"noopener\">https://buy.itunes.apple.com/verifyReceipt</a></p>\n<p>验证后Apple会返回数据，从中可以获取product_id、quantity等，下面是正确时的返回数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot;: 0,</span><br><span class=\"line\">    &quot;environment&quot;: &quot;Sandbox&quot;,</span><br><span class=\"line\">    &quot;receipt&quot;: &#123;</span><br><span class=\"line\">        &quot;receipt_type&quot;: &quot;ProductionSandbox&quot;,</span><br><span class=\"line\">        &quot;adam_id&quot;: 0,</span><br><span class=\"line\">        &quot;app_item_id&quot;: 0,</span><br><span class=\"line\">        &quot;bundle_id&quot;: &quot;com.xxx.xxxxxx&quot;,</span><br><span class=\"line\">        &quot;application_version&quot;: &quot;999&quot;,</span><br><span class=\"line\">        &quot;download_id&quot;: 0,</span><br><span class=\"line\">        &quot;version_external_identifier&quot;: 0,</span><br><span class=\"line\">        &quot;receipt_creation_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;receipt_creation_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">        &quot;receipt_creation_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;request_date&quot;: &quot;2016-05-26 06:40:32 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;request_date_ms&quot;: &quot;1464244832729&quot;,</span><br><span class=\"line\">        &quot;request_date_pst&quot;: &quot;2016-05-25 23:40:32 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date&quot;: &quot;2013-08-01 07:00:00 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date_ms&quot;: &quot;1375340400000&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date_pst&quot;: &quot;2013-08-01 00:00:00 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;original_application_version&quot;: &quot;1.0&quot;,</span><br><span class=\"line\">        &quot;in_app&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;quantity&quot;: &quot;1&quot;,</span><br><span class=\"line\">                &quot;product_id&quot;: &quot;000000&quot;,</span><br><span class=\"line\">                &quot;transaction_id&quot;: &quot;1000000213676495&quot;,</span><br><span class=\"line\">                &quot;original_transaction_id&quot;: &quot;1000000213676495&quot;,</span><br><span class=\"line\">                &quot;purchase_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">                &quot;purchase_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">                &quot;purchase_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">                &quot;is_trial_period&quot;: &quot;false&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试截图\"><a href=\"#测试截图\" class=\"headerlink\" title=\"测试截图\"></a>测试截图</h2><p>下面是在沙箱环境下的真机测试截图（“测试”是所填写的产品名称，未登录Apple ID时会提示登录，已登录时会提示输入密码/Touch ID）：<br><img src=\"/2016/05/31/ios-in-app-purchase-iap/304530-e6031ed92ab8fac0.png\" alt=\"IMG_6816.PNG\"></p>\n<p><img src=\"/2016/05/31/ios-in-app-purchase-iap/304530-8e271b6afd1bc2eb.png\" alt=\"IMG_6814.PNG\"></p>\n<h2 id=\"提交审核\"><a href=\"#提交审核\" class=\"headerlink\" title=\"提交审核\"></a>提交审核</h2><p>在<em>iTunes Connect</em>添加完App版本后，在<em>App 内购买项目</em>处添加该版本新增的App内购买项目。</p>\n<h2 id=\"审核问题\"><a href=\"#审核问题\" class=\"headerlink\" title=\"审核问题\"></a>审核问题</h2><p>####找不到入口</p>\n<p>Information Needed</p>\n<p>We have begun the review of your app but aren’t able to continue because we can’t locate the In-App Purchase(s) within your app. </p>\n<p>At your earliest opportunity, please reply to this message providing the steps for locating the In-App Purchase(s) in your app.</p>\n<p>####使用In-App Purchase之前要求登录/注册</p>\n<p>Hello, </p>\n<p>Thank you for providing the information. Upon further review of your application, we have found the following issue(s):</p>\n<p>Legal - 5.1.1</p>\n<p>We noticed that your app requires users to register with personal information to access non account-based features(including In-App Purchase feature), which is not allowed on the App Store. </p>\n<p>We’ve attached screenshot(s) for your reference.</p>\n<p>Apps cannot require user registration prior to allowing access to app content and features that are not associated specifically to the user.</p>\n<p>Next Steps</p>\n<p>User registration that requires the sharing of personal information must be optional or tied to account-specific functionality.</p>\n<p>Please make it clear to the user that registering will enable them to access the content from any of their iOS devices, and to provide them a way to register at any time, if they wish to later extend access to additional iOS devices.</p>\n<p>Please note that although guideline 3.1.2 of the App Store Review Guidelines requires an application to make subscription content available to all the iOS devices owned by a single user, it is not appropriate to force user registration to meet this requirement; such user registration must be made optional.</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>前言</li>\n<li>程序内购买流程<ul>\n<li>iTunes Connect商品配置</li>\n<li>添加沙箱技术测试员</li>\n<li>App内获取购买商品</li>\n<li>验证receipt</li>\n</ul>\n</li>\n<li>测试截图</li>\n<li>提交审核</li>\n<li>审核问题</li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近做了iOS程序内购买，封装了一下给上层调用，现在介绍下流程和简单的实现。具体可以看我上传到Github的代码<a href=\"https://github.com/sapphirezzz/ZInAppPurchase\" target=\"_blank\" rel=\"noopener\">ZInAppPurchase</a>，或者直接在<em>CocoaPods</em>拉取<em>ZInAppPurchase</em>。（第一次试试上传到CocoaPods，还没加demo）</p>\n<p>程序内购买要做的话要考虑很多，像漏单处理、重新购买处理等等，对于游戏App来说更需要考虑。下面只介绍最简单的流程和处理。</p>\n<h2 id=\"程序内购买流程\"><a href=\"#程序内购买流程\" class=\"headerlink\" title=\"程序内购买流程\"></a>程序内购买流程</h2><p>iOS程序内购买流程主要分几步：</p>\n<ol>\n<li>iTunes Connect商品配置</li>\n<li>添加沙箱技术测试员</li>\n<li>App内获取购买商品</li>\n<li>验证receipt</li>\n</ol>\n<h3 id=\"iTunes-Connect商品配置\"><a href=\"#iTunes-Connect商品配置\" class=\"headerlink\" title=\"iTunes Connect商品配置\"></a>iTunes Connect商品配置</h3><p>主要是填写完整信息和添加商品。</p>\n<h4 id=\"填写完整信息\"><a href=\"#填写完整信息\" class=\"headerlink\" title=\"填写完整信息\"></a>填写完整信息</h4><p>登录<em>iTunes Connect</em>，进入”<em>协议、税务和银行业务</em>“。</p>\n<p>如果<em>Contracts In Process<em>下有</em>All(See Contract)<em>和</em>Contact Info<em>、</em>Bank Info<em>、</em>Tax Info<em>三列，则表示已填写；否则点击</em>Request<em>按照提示进行操作。之后就会出现</em>Contact Info<em>、</em>Bank Info<em>、</em>Tax Info<em>三列，分别</em>Set Up</em>(需要同公司财务人员一起填写)。</p>\n<p>(如果没有填写完整只能添加<em>免费订阅</em>商品)</p>\n<h4 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h4><p>登录<em>iTunes Connect</em>，进入<em>我的App</em>——<em>功能</em>——<em>App内购买项目</em>，点击+号。可以添加的类型有：消耗型项目、非消耗型项目、自动续订订阅、免费订阅、非续订订阅。商品添加完屏幕快照就会变成<em>准备提交</em>状态。</p>\n<p>注意：产品 ID不可重复，如果删除某个商品，以后这个产品的ID也不可用，即使它已经被删除了；另外类型也不能改，选错了只能重新增加一个商品。</p>\n<h3 id=\"添加沙箱技术测试员\"><a href=\"#添加沙箱技术测试员\" class=\"headerlink\" title=\"添加沙箱技术测试员\"></a>添加沙箱技术测试员</h3><p>登录<em>iTunes Connect</em>，进入<em>用户和职能</em>——<em>沙箱技术测试员</em>，点击+号。（必须是未注册的Apple账号，用于测试购买）</p>\n<h3 id=\"App内获取购买商品\"><a href=\"#App内获取购买商品\" class=\"headerlink\" title=\"App内获取购买商品\"></a>App内获取购买商品</h3><ul>\n<li>导入系统库StoreKit</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import StoreKit</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取商品信息</li>\n</ul>\n<p>根据productId获取商品信息(可以获取多个)： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let productRequest = SKProductsRequest(productIdentifiers: Set&lt;String&gt;(arrayLiteral: productId))</span><br><span class=\"line\">productRequest.delegate = self</span><br><span class=\"line\">productRequest.start()</span><br></pre></td></tr></table></figure>\n\n<p>实现SKProductsRequestDelegate：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) &#123;</span><br><span class=\"line\">    if let product = response.products.first &#123;// 获取返回的商品</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>购买商品</li>\n</ul>\n<p>购买获取的商品product：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if SKPaymentQueue.canMakePayments() &#123;// 是否能且允许支付</span><br><span class=\"line\">    let payment = SKPayment(product: product)</span><br><span class=\"line\">    SKPaymentQueue.defaultQueue().addTransactionObserver(self)</span><br><span class=\"line\">    SKPaymentQueue.defaultQueue().addPayment(payment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现SKPaymentTransactionObserver：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    for transaction in transactions &#123;</span><br><span class=\"line\">        switch transaction.transactionState &#123;</span><br><span class=\"line\">        case .Purchased: // Transaction is in queue, user has been charged.  Client should complete the transaction.</span><br><span class=\"line\"></span><br><span class=\"line\">            if let receiptUrl = NSBundle.mainBundle().appStoreReceiptURL, let receiptData = NSData(contentsOfURL: receiptUrl) &#123;</span><br><span class=\"line\">                let receiptString = receiptData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))</span><br><span class=\"line\">                // 将receiptString发给服务器</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SKPaymentQueue.defaultQueue().finishTransaction(transaction)</span><br><span class=\"line\"></span><br><span class=\"line\">        case .Failed: // Transaction was cancelled or failed before being added to the server queue.</span><br><span class=\"line\"></span><br><span class=\"line\">            if let errorCode = transaction.error?.code &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            SKPaymentQueue.defaultQueue().finishTransaction(transaction)</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证receipt\"><a href=\"#验证receipt\" class=\"headerlink\" title=\"验证receipt\"></a>验证receipt</h3><p>receipt验证可以本地验证，也可以提交给App Store验证。</p>\n<p>参考链接：<a href=\"https://developer.apple.com/library/mac/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html#//apple_ref/doc/uid/TP40010573-CH104-SW1\" target=\"_blank\" rel=\"noopener\">Validating Receipts With the App Store</a></p>\n<p>我们是将receipt进行base64编码后，传给服务器，服务器判断凭证是否已经存在或验证过，再去POST给Apple服务器验证。</p>\n<ul>\n<li>沙箱环境POST的URL</li>\n</ul>\n<p><a href=\"https://sandbox.itunes.apple.com/verifyReceipt\" target=\"_blank\" rel=\"noopener\">https://sandbox.itunes.apple.com/verifyReceipt</a></p>\n<ul>\n<li>正式环境POST的URL</li>\n</ul>\n<p><a href=\"https://buy.itunes.apple.com/verifyReceipt\" target=\"_blank\" rel=\"noopener\">https://buy.itunes.apple.com/verifyReceipt</a></p>\n<p>验证后Apple会返回数据，从中可以获取product_id、quantity等，下面是正确时的返回数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot;: 0,</span><br><span class=\"line\">    &quot;environment&quot;: &quot;Sandbox&quot;,</span><br><span class=\"line\">    &quot;receipt&quot;: &#123;</span><br><span class=\"line\">        &quot;receipt_type&quot;: &quot;ProductionSandbox&quot;,</span><br><span class=\"line\">        &quot;adam_id&quot;: 0,</span><br><span class=\"line\">        &quot;app_item_id&quot;: 0,</span><br><span class=\"line\">        &quot;bundle_id&quot;: &quot;com.xxx.xxxxxx&quot;,</span><br><span class=\"line\">        &quot;application_version&quot;: &quot;999&quot;,</span><br><span class=\"line\">        &quot;download_id&quot;: 0,</span><br><span class=\"line\">        &quot;version_external_identifier&quot;: 0,</span><br><span class=\"line\">        &quot;receipt_creation_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;receipt_creation_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">        &quot;receipt_creation_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;request_date&quot;: &quot;2016-05-26 06:40:32 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;request_date_ms&quot;: &quot;1464244832729&quot;,</span><br><span class=\"line\">        &quot;request_date_pst&quot;: &quot;2016-05-25 23:40:32 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date&quot;: &quot;2013-08-01 07:00:00 Etc/GMT&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date_ms&quot;: &quot;1375340400000&quot;,</span><br><span class=\"line\">        &quot;original_purchase_date_pst&quot;: &quot;2013-08-01 00:00:00 America/Los_Angeles&quot;,</span><br><span class=\"line\">        &quot;original_application_version&quot;: &quot;1.0&quot;,</span><br><span class=\"line\">        &quot;in_app&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;quantity&quot;: &quot;1&quot;,</span><br><span class=\"line\">                &quot;product_id&quot;: &quot;000000&quot;,</span><br><span class=\"line\">                &quot;transaction_id&quot;: &quot;1000000213676495&quot;,</span><br><span class=\"line\">                &quot;original_transaction_id&quot;: &quot;1000000213676495&quot;,</span><br><span class=\"line\">                &quot;purchase_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">                &quot;purchase_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">                &quot;purchase_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date&quot;: &quot;2016-05-26 04:35:08 Etc/GMT&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date_ms&quot;: &quot;1464237308000&quot;,</span><br><span class=\"line\">                &quot;original_purchase_date_pst&quot;: &quot;2016-05-25 21:35:08 America/Los_Angeles&quot;,</span><br><span class=\"line\">                &quot;is_trial_period&quot;: &quot;false&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试截图\"><a href=\"#测试截图\" class=\"headerlink\" title=\"测试截图\"></a>测试截图</h2><p>下面是在沙箱环境下的真机测试截图（“测试”是所填写的产品名称，未登录Apple ID时会提示登录，已登录时会提示输入密码/Touch ID）：<br><img src=\"/2016/05/31/ios-in-app-purchase-iap/304530-e6031ed92ab8fac0.png\" alt=\"IMG_6816.PNG\"></p>\n<p><img src=\"/2016/05/31/ios-in-app-purchase-iap/304530-8e271b6afd1bc2eb.png\" alt=\"IMG_6814.PNG\"></p>\n<h2 id=\"提交审核\"><a href=\"#提交审核\" class=\"headerlink\" title=\"提交审核\"></a>提交审核</h2><p>在<em>iTunes Connect</em>添加完App版本后，在<em>App 内购买项目</em>处添加该版本新增的App内购买项目。</p>\n<h2 id=\"审核问题\"><a href=\"#审核问题\" class=\"headerlink\" title=\"审核问题\"></a>审核问题</h2><p>####找不到入口</p>\n<p>Information Needed</p>\n<p>We have begun the review of your app but aren’t able to continue because we can’t locate the In-App Purchase(s) within your app. </p>\n<p>At your earliest opportunity, please reply to this message providing the steps for locating the In-App Purchase(s) in your app.</p>\n<p>####使用In-App Purchase之前要求登录/注册</p>\n<p>Hello, </p>\n<p>Thank you for providing the information. Upon further review of your application, we have found the following issue(s):</p>\n<p>Legal - 5.1.1</p>\n<p>We noticed that your app requires users to register with personal information to access non account-based features(including In-App Purchase feature), which is not allowed on the App Store. </p>\n<p>We’ve attached screenshot(s) for your reference.</p>\n<p>Apps cannot require user registration prior to allowing access to app content and features that are not associated specifically to the user.</p>\n<p>Next Steps</p>\n<p>User registration that requires the sharing of personal information must be optional or tied to account-specific functionality.</p>\n<p>Please make it clear to the user that registering will enable them to access the content from any of their iOS devices, and to provide them a way to register at any time, if they wish to later extend access to additional iOS devices.</p>\n<p>Please note that although guideline 3.1.2 of the App Store Review Guidelines requires an application to make subscription content available to all the iOS devices owned by a single user, it is not appropriate to force user registration to meet this requirement; such user registration must be made optional.</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"趣说shell脚本的pwd、source、$0的连环坑（iOS持续集成续）","date":"2016-07-24T08:00:00.000Z","keywords":"shell","description":"主要讲用shell脚本过程中遇到的一些pwd、source、$0的连环坑","_content":"\n# 目录\n\n- 前言\n- 踩坑跳坑出坑\n  - pwd是获取当前的路径？\n  - source惹的祸／$0 也会骗人\n  - source/$0/pwd相互影响\n  - BASH_SOURCE[0]这又是什么东西？\n  - 鲁棒性？用回pwd啦！\n  - 又是source的坑！变量命名！\n- 小结\n\n\n# 前言\n\n今天重新写了之前的iOS自动化脚本，并加入自动上传符号表文件到Bugly的功能。结果遇到Shell的几个有趣的“坑”。\n\n\n\n简化成以下例子：\n\n> /Users/zack/Desktop/a.sh\n> /Users/zack/Desktop/B/b.sh\n> /Users/zack/Desktop/B/C/c.sh\n\n有如上面路径结构的三个脚本文件a.sh、b.sh、c.sh。\n\nB目录内的文件是写给别人调用的，b.sh调用c.sh。假设在桌面有个a.sh调用了b.sh。\n\n实际过程写了很多脚本文件比较复杂，其实排查起坑来不像下面讲的那么简单，囧囧囧！\n\n\n\n# 踩坑跳坑出坑\n\n接着就开始小小的有趣的踩坑历程啦。\n\n\n\n\n## pwd是获取当前的路径？\n\n首先是a.sh调用b.sh\n\n```\n# a.sh\n/Users/zack/Desktop/B/b.sh\n```\n\nb.sh调用c.sh\n\n```\n# b.sh\nC/c.sh\n```\n\nc.sh随便干点什么\n\n```\n# c.sh\necho \"I'm c.sh.\"\n```\n\n看起来挺正常的是吧？\n\n> /Users/zack/Desktop/B/b.sh: line 1: C/c.sh: No such file or directory\n\n找不到c.sh？为什么？b.sh不是和C目录同一级吗？\n\n嗯想想......应该和被a.sh调用有关系。我是给别人用的工具，那么我并不知道a.sh会在哪调用我的b.sh。好吧，那我加个绝对路径。\n\n```\n# b.sh\n｀pwd｀/C/c.sh\n```\n\n又有问题？对，你猜的没错。\n\n> /Users/zack/Desktop/B/b.sh: line 1: /Users/zack/Desktop/C/c.sh: No such file or directory\n\n好吧，为什么是`/Users/zack/Desktop/C/c.sh`这个路径呢？打印一下`｀pwd｀`，是`/Users/zack/Desktop`。为虾米？这个不是获取当前工作目录吗？\n\n噢我一定是撞鬼了！不，我是唯物主义者！再想想......这个是a.sh的路径，也就是说这个还是跟调用者有关（后文会解释shell进程相关的原因）。\n\n网上度娘说用这个`dirname`取`$0`\n\n```\n# b.sh\n`dirname $0`/C/c.sh\n```\n\n看结果：\n\n> I'm c.sh.\n\n哇真的可以，感谢度娘！\n\n`dirname`用于取给定路径的目录部分,`$0`是Shell本身的文件名。\n\n继续写代码。\n\n\n\n## source惹的祸／$0 也会骗人\n\n发现用source也可以调用其他shell脚本文件。试试。\n\n```\n# b.sh\nsource `dirname $0`/C/c.sh\n```\n\n执行一下./a.sh。嗯也是可以的。然后改改c.sh。\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname $0`\n```\n\n这时候第二行打印应该是c.sh所在的路径，对吧？\n\n不，你错了！！！哈哈哈！\n\n> I'm c.sh.\n> /Users/zack/Desktop/B\n\n为什么是B目录？不是应该`/Users/zack/Desktop/C`吗？我书读得少你不要骗我！！！\n\n打印下`$0`。\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname $0`\necho $0\n```\n\n下面是b.sh用source之后的：\n\n> I'm c.sh.\n> /Users/zack/Desktop/B\n> /Users/zack/Desktop/B/b.sh\n\n下面是b.sh直接用路径之后的：\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n> /Users/zack/Desktop/B/C/c.sh\n\n哦哦哦，原来是你，source！终于把你揪出来了！用了source之后会导致`$0`不同。\n\n下面是考试重点，记住了！！\n\n> source命令，不再产生新的shell，而是在当前shell下执行一切命令。\n>\n> source FileName，作用：在当前bash环境下读取并执行FileName中的命令。\n>\n> source在本shell中执行的，所以能够看到结果\n>\n> 调用绝对路径执行shell是在一个子shell里运行的，所以执行后，结果并没有反应到父shell里。\n\n嗯明白了！source使用的脚本是在当前shell进程下进行的，所以`$0`依旧是当前的b.sh。那么之前的`pwd`应该是当前shell进程的工作目录，这个可以理解了。在a.sh调用b.sh，a.sh没有执行任何`cd dir`操作，b.sh也没有，所以`pwd`仍然是a.sh所在目录。\n\n\n\n## source/$0/pwd相互影响\n\n做个实验：\n\n```\n# b.sh\necho `pwd`\nsource `dirname $0`/C/c.sh\necho `pwd`\n```\n\n```\n# c.sh\ncd ..\necho \"I'm c.sh.\"\n```\n\n猜猜这时候b.sh打印什么？\n\n> /Users/zack/Desktop\n> I'm c.sh.\n> /Users/zack\n\n如果b.sh再改成这样呢？\n\n```\n# b.sh\necho `pwd`\n`dirname $0`/C/c.sh\necho `pwd`\n```\n\n> /Users/zack/Desktop\n> I'm c.sh.\n> /Users/zack/Desktop\n\n哈哈很有趣，这样可以很容易很真切理解这几个东西的作用和影响了！\n\n\n\n## BASH_SOURCE[0]这又是什么东西？\n\n 上面的问题还是没有解决。基友丢来一行代码。\n\n```\necho \"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n```\n\n用BASH_SOURCE[0]来获取当前脚本的路径。\n\n> 与FUNCNAME相似的另外一个比较有用的常量是BASH_SOURCE，同样是一个数组，不过它的第一个元素是当前脚本的名称。\n> 这在source的时候非常有用，因为在被source的脚本中，$0是父脚本的名称，而不是被source的脚本名称。而BASH_SOURCE就可以派上用场了。\n> 唯一遗憾的是，这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。\n\n试下试下：\n\n```\n# b.sh\n`dirname $0`/C/c.sh\n```\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname ${BASH_SOURCE[0]}`\n```\n\n结果如下，哐哐哐！\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n\nb.sh再改成source c.sh的。\n\n```\n# b.sh\nsource `dirname $0`/C/c.sh\n```\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n\nGood的！哈哈哈！好高兴解决了！\n\n\n\n## 鲁棒性？用回pwd啦！\n\n从**source/$0/pwd相互影响**这节的实验可以看到，b.sh使用source c.sh时，在c.sh里面cd dir，会影响外面的pwd；而直接调用c.sh的话，即使cd dir，回到b.sh依旧不影响pwd。\n\n我怎么尽可能保证鲁棒性呢？因为我不知道别人是怎么调用我的。设计得好的话，作为被调用者，应该只产生脚本本身的作用，而不影响到其他东西，比如调用者的工作目录路径。\n\n从另一个角度，我作为调用者的话，怎么防止被调用者影响到我的工作目录路径呢？因为我们经常用pwd来做些操作的。\n\n解决大概如下：\n\n1. 作为调用者，尽可能使用绝对路径或相对路径调用其他脚本文件，不用source；或者在使用其他脚本文件前保存路径`pwd=｀pwd｀`，调用完后再`cd pwd`回去。\n2. 作为被调用者，同上，在开始前保存pwd文件，执行完任务后再cd回去。\n\n\n\n## 又是source的坑！变量命名！\n\n呼呼差不多了，再加点东西。\n\n```\n# b.sh\nmyPath=`dirname ${BASH_SOURCE[0]}`\necho $myPath\nsource ${myPath}/C/c.sh\necho $myPath\n```\n\n```\n# c.sh\nmyPath=`pwd`\necho \"I'm c.sh.\"\ncd $myPath\n```\n\n这里然后c.sh保存了当前路径，最后返回当前路径。b.sh保存了一个`myPath`，调用b.sh前后各打印一次。你猜打印结果一样吗？？\n\n> /Users/zack/Desktop/B\n> I'm c.sh.\n> /Users/zack/Desktop\n\n没道理啊，为什么呢？c.sh应该是不会影响到路径的啊！这个做过试验了的。\n\n猜不到吧，因为c.sh的myPath覆盖了b.sh......\n\n因为source c.sh之后，c.sh和b.sh在同一个shell进程下运行，变量也公用，所以......\n\n怎么解决呢？只能是通过命名空间或者命名规则了吧！\n\n\n\n# 小结\n\n呼呼至此结束了！\n\nshell脚本挺有趣的，虽然有时处理些东西麻烦或者不够规范，比如获取脚本参数、脚本只能返回整型等。晚了，关于pwd、source、$0等等相关更细的知识就不介绍了，度娘知道。\n\n\n\n自动化编译脚本也重写得很优雅很美了！类似下面这样：\n\n```\nfunction archive() {\n}\nfunction exportArchive() {\n}\n...\n\narchive\nexportArchive\npublishToFirIfNeed\nsubmitAppStoreIfNeed\nsendEmail\n```\n\n所有变量什么的都放在函数里面，每个函数再分别调用其他脚本文件。打包、包导出、上传fir、上传appStore、发邮件都分到单独的脚本文件，每个可以单独用；整个根调用文件看起来整洁清晰，步骤也很明显，做的事情就是最下面那5个调用。\n\n后面会补到之前写的文章中：\n简书：[详解Shell脚本实现iOS自动化编译打包提交](http://www.jianshu.com/p/bd4c22952e01) \n个人博客：[详解Shell脚本实现iOS自动化编译打包提交](http://zackzheng.info/2015/12/27/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails)\n\n\n\n让编程一直成为一种有趣的爱好！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-07-24-shell-keng.md","raw":"---\ntitle: 趣说shell脚本的pwd、source、$0的连环坑（iOS持续集成续）\ndate: 2016-07-24 16:00:00\ntags: \n     - shell\ncategories: Tech\nkeywords: shell\ndescription: 主要讲用shell脚本过程中遇到的一些pwd、source、$0的连环坑\n---\n\n# 目录\n\n- 前言\n- 踩坑跳坑出坑\n  - pwd是获取当前的路径？\n  - source惹的祸／$0 也会骗人\n  - source/$0/pwd相互影响\n  - BASH_SOURCE[0]这又是什么东西？\n  - 鲁棒性？用回pwd啦！\n  - 又是source的坑！变量命名！\n- 小结\n\n\n# 前言\n\n今天重新写了之前的iOS自动化脚本，并加入自动上传符号表文件到Bugly的功能。结果遇到Shell的几个有趣的“坑”。\n\n\n\n简化成以下例子：\n\n> /Users/zack/Desktop/a.sh\n> /Users/zack/Desktop/B/b.sh\n> /Users/zack/Desktop/B/C/c.sh\n\n有如上面路径结构的三个脚本文件a.sh、b.sh、c.sh。\n\nB目录内的文件是写给别人调用的，b.sh调用c.sh。假设在桌面有个a.sh调用了b.sh。\n\n实际过程写了很多脚本文件比较复杂，其实排查起坑来不像下面讲的那么简单，囧囧囧！\n\n\n\n# 踩坑跳坑出坑\n\n接着就开始小小的有趣的踩坑历程啦。\n\n\n\n\n## pwd是获取当前的路径？\n\n首先是a.sh调用b.sh\n\n```\n# a.sh\n/Users/zack/Desktop/B/b.sh\n```\n\nb.sh调用c.sh\n\n```\n# b.sh\nC/c.sh\n```\n\nc.sh随便干点什么\n\n```\n# c.sh\necho \"I'm c.sh.\"\n```\n\n看起来挺正常的是吧？\n\n> /Users/zack/Desktop/B/b.sh: line 1: C/c.sh: No such file or directory\n\n找不到c.sh？为什么？b.sh不是和C目录同一级吗？\n\n嗯想想......应该和被a.sh调用有关系。我是给别人用的工具，那么我并不知道a.sh会在哪调用我的b.sh。好吧，那我加个绝对路径。\n\n```\n# b.sh\n｀pwd｀/C/c.sh\n```\n\n又有问题？对，你猜的没错。\n\n> /Users/zack/Desktop/B/b.sh: line 1: /Users/zack/Desktop/C/c.sh: No such file or directory\n\n好吧，为什么是`/Users/zack/Desktop/C/c.sh`这个路径呢？打印一下`｀pwd｀`，是`/Users/zack/Desktop`。为虾米？这个不是获取当前工作目录吗？\n\n噢我一定是撞鬼了！不，我是唯物主义者！再想想......这个是a.sh的路径，也就是说这个还是跟调用者有关（后文会解释shell进程相关的原因）。\n\n网上度娘说用这个`dirname`取`$0`\n\n```\n# b.sh\n`dirname $0`/C/c.sh\n```\n\n看结果：\n\n> I'm c.sh.\n\n哇真的可以，感谢度娘！\n\n`dirname`用于取给定路径的目录部分,`$0`是Shell本身的文件名。\n\n继续写代码。\n\n\n\n## source惹的祸／$0 也会骗人\n\n发现用source也可以调用其他shell脚本文件。试试。\n\n```\n# b.sh\nsource `dirname $0`/C/c.sh\n```\n\n执行一下./a.sh。嗯也是可以的。然后改改c.sh。\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname $0`\n```\n\n这时候第二行打印应该是c.sh所在的路径，对吧？\n\n不，你错了！！！哈哈哈！\n\n> I'm c.sh.\n> /Users/zack/Desktop/B\n\n为什么是B目录？不是应该`/Users/zack/Desktop/C`吗？我书读得少你不要骗我！！！\n\n打印下`$0`。\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname $0`\necho $0\n```\n\n下面是b.sh用source之后的：\n\n> I'm c.sh.\n> /Users/zack/Desktop/B\n> /Users/zack/Desktop/B/b.sh\n\n下面是b.sh直接用路径之后的：\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n> /Users/zack/Desktop/B/C/c.sh\n\n哦哦哦，原来是你，source！终于把你揪出来了！用了source之后会导致`$0`不同。\n\n下面是考试重点，记住了！！\n\n> source命令，不再产生新的shell，而是在当前shell下执行一切命令。\n>\n> source FileName，作用：在当前bash环境下读取并执行FileName中的命令。\n>\n> source在本shell中执行的，所以能够看到结果\n>\n> 调用绝对路径执行shell是在一个子shell里运行的，所以执行后，结果并没有反应到父shell里。\n\n嗯明白了！source使用的脚本是在当前shell进程下进行的，所以`$0`依旧是当前的b.sh。那么之前的`pwd`应该是当前shell进程的工作目录，这个可以理解了。在a.sh调用b.sh，a.sh没有执行任何`cd dir`操作，b.sh也没有，所以`pwd`仍然是a.sh所在目录。\n\n\n\n## source/$0/pwd相互影响\n\n做个实验：\n\n```\n# b.sh\necho `pwd`\nsource `dirname $0`/C/c.sh\necho `pwd`\n```\n\n```\n# c.sh\ncd ..\necho \"I'm c.sh.\"\n```\n\n猜猜这时候b.sh打印什么？\n\n> /Users/zack/Desktop\n> I'm c.sh.\n> /Users/zack\n\n如果b.sh再改成这样呢？\n\n```\n# b.sh\necho `pwd`\n`dirname $0`/C/c.sh\necho `pwd`\n```\n\n> /Users/zack/Desktop\n> I'm c.sh.\n> /Users/zack/Desktop\n\n哈哈很有趣，这样可以很容易很真切理解这几个东西的作用和影响了！\n\n\n\n## BASH_SOURCE[0]这又是什么东西？\n\n 上面的问题还是没有解决。基友丢来一行代码。\n\n```\necho \"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n```\n\n用BASH_SOURCE[0]来获取当前脚本的路径。\n\n> 与FUNCNAME相似的另外一个比较有用的常量是BASH_SOURCE，同样是一个数组，不过它的第一个元素是当前脚本的名称。\n> 这在source的时候非常有用，因为在被source的脚本中，$0是父脚本的名称，而不是被source的脚本名称。而BASH_SOURCE就可以派上用场了。\n> 唯一遗憾的是，这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。\n\n试下试下：\n\n```\n# b.sh\n`dirname $0`/C/c.sh\n```\n\n```\n# c.sh\necho \"I'm c.sh.\"\necho `dirname ${BASH_SOURCE[0]}`\n```\n\n结果如下，哐哐哐！\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n\nb.sh再改成source c.sh的。\n\n```\n# b.sh\nsource `dirname $0`/C/c.sh\n```\n\n> I'm c.sh.\n> /Users/zack/Desktop/B/C\n\nGood的！哈哈哈！好高兴解决了！\n\n\n\n## 鲁棒性？用回pwd啦！\n\n从**source/$0/pwd相互影响**这节的实验可以看到，b.sh使用source c.sh时，在c.sh里面cd dir，会影响外面的pwd；而直接调用c.sh的话，即使cd dir，回到b.sh依旧不影响pwd。\n\n我怎么尽可能保证鲁棒性呢？因为我不知道别人是怎么调用我的。设计得好的话，作为被调用者，应该只产生脚本本身的作用，而不影响到其他东西，比如调用者的工作目录路径。\n\n从另一个角度，我作为调用者的话，怎么防止被调用者影响到我的工作目录路径呢？因为我们经常用pwd来做些操作的。\n\n解决大概如下：\n\n1. 作为调用者，尽可能使用绝对路径或相对路径调用其他脚本文件，不用source；或者在使用其他脚本文件前保存路径`pwd=｀pwd｀`，调用完后再`cd pwd`回去。\n2. 作为被调用者，同上，在开始前保存pwd文件，执行完任务后再cd回去。\n\n\n\n## 又是source的坑！变量命名！\n\n呼呼差不多了，再加点东西。\n\n```\n# b.sh\nmyPath=`dirname ${BASH_SOURCE[0]}`\necho $myPath\nsource ${myPath}/C/c.sh\necho $myPath\n```\n\n```\n# c.sh\nmyPath=`pwd`\necho \"I'm c.sh.\"\ncd $myPath\n```\n\n这里然后c.sh保存了当前路径，最后返回当前路径。b.sh保存了一个`myPath`，调用b.sh前后各打印一次。你猜打印结果一样吗？？\n\n> /Users/zack/Desktop/B\n> I'm c.sh.\n> /Users/zack/Desktop\n\n没道理啊，为什么呢？c.sh应该是不会影响到路径的啊！这个做过试验了的。\n\n猜不到吧，因为c.sh的myPath覆盖了b.sh......\n\n因为source c.sh之后，c.sh和b.sh在同一个shell进程下运行，变量也公用，所以......\n\n怎么解决呢？只能是通过命名空间或者命名规则了吧！\n\n\n\n# 小结\n\n呼呼至此结束了！\n\nshell脚本挺有趣的，虽然有时处理些东西麻烦或者不够规范，比如获取脚本参数、脚本只能返回整型等。晚了，关于pwd、source、$0等等相关更细的知识就不介绍了，度娘知道。\n\n\n\n自动化编译脚本也重写得很优雅很美了！类似下面这样：\n\n```\nfunction archive() {\n}\nfunction exportArchive() {\n}\n...\n\narchive\nexportArchive\npublishToFirIfNeed\nsubmitAppStoreIfNeed\nsendEmail\n```\n\n所有变量什么的都放在函数里面，每个函数再分别调用其他脚本文件。打包、包导出、上传fir、上传appStore、发邮件都分到单独的脚本文件，每个可以单独用；整个根调用文件看起来整洁清晰，步骤也很明显，做的事情就是最下面那5个调用。\n\n后面会补到之前写的文章中：\n简书：[详解Shell脚本实现iOS自动化编译打包提交](http://www.jianshu.com/p/bd4c22952e01) \n个人博客：[详解Shell脚本实现iOS自动化编译打包提交](http://zackzheng.info/2015/12/27/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails)\n\n\n\n让编程一直成为一种有趣的爱好！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"shell-keng","published":1,"updated":"2020-02-25T15:23:08.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q4002g07eim4jimwye","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>踩坑跳坑出坑<ul>\n<li>pwd是获取当前的路径？</li>\n<li>source惹的祸／$0 也会骗人</li>\n<li>source/$0/pwd相互影响</li>\n<li>BASH_SOURCE[0]这又是什么东西？</li>\n<li>鲁棒性？用回pwd啦！</li>\n<li>又是source的坑！变量命名！</li>\n</ul>\n</li>\n<li>小结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天重新写了之前的iOS自动化脚本，并加入自动上传符号表文件到Bugly的功能。结果遇到Shell的几个有趣的“坑”。</p>\n<p>简化成以下例子：</p>\n<blockquote>\n<p>/Users/zack/Desktop/a.sh<br>/Users/zack/Desktop/B/b.sh<br>/Users/zack/Desktop/B/C/c.sh</p>\n</blockquote>\n<p>有如上面路径结构的三个脚本文件a.sh、b.sh、c.sh。</p>\n<p>B目录内的文件是写给别人调用的，b.sh调用c.sh。假设在桌面有个a.sh调用了b.sh。</p>\n<p>实际过程写了很多脚本文件比较复杂，其实排查起坑来不像下面讲的那么简单，囧囧囧！</p>\n<h1 id=\"踩坑跳坑出坑\"><a href=\"#踩坑跳坑出坑\" class=\"headerlink\" title=\"踩坑跳坑出坑\"></a>踩坑跳坑出坑</h1><p>接着就开始小小的有趣的踩坑历程啦。</p>\n<h2 id=\"pwd是获取当前的路径？\"><a href=\"#pwd是获取当前的路径？\" class=\"headerlink\" title=\"pwd是获取当前的路径？\"></a>pwd是获取当前的路径？</h2><p>首先是a.sh调用b.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a.sh</span><br><span class=\"line\">/Users/zack/Desktop/B/b.sh</span><br></pre></td></tr></table></figure>\n\n<p>b.sh调用c.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>c.sh随便干点什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>看起来挺正常的是吧？</p>\n<blockquote>\n<p>/Users/zack/Desktop/B/b.sh: line 1: C/c.sh: No such file or directory</p>\n</blockquote>\n<p>找不到c.sh？为什么？b.sh不是和C目录同一级吗？</p>\n<p>嗯想想……应该和被a.sh调用有关系。我是给别人用的工具，那么我并不知道a.sh会在哪调用我的b.sh。好吧，那我加个绝对路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">｀pwd｀/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>又有问题？对，你猜的没错。</p>\n<blockquote>\n<p>/Users/zack/Desktop/B/b.sh: line 1: /Users/zack/Desktop/C/c.sh: No such file or directory</p>\n</blockquote>\n<p>好吧，为什么是<code>/Users/zack/Desktop/C/c.sh</code>这个路径呢？打印一下<code>｀pwd｀</code>，是<code>/Users/zack/Desktop</code>。为虾米？这个不是获取当前工作目录吗？</p>\n<p>噢我一定是撞鬼了！不，我是唯物主义者！再想想……这个是a.sh的路径，也就是说这个还是跟调用者有关（后文会解释shell进程相关的原因）。</p>\n<p>网上度娘说用这个<code>dirname</code>取<code>$0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>看结果：</p>\n<blockquote>\n<p>I’m c.sh.</p>\n</blockquote>\n<p>哇真的可以，感谢度娘！</p>\n<p><code>dirname</code>用于取给定路径的目录部分,<code>$0</code>是Shell本身的文件名。</p>\n<p>继续写代码。</p>\n<h2 id=\"source惹的祸／-0-也会骗人\"><a href=\"#source惹的祸／-0-也会骗人\" class=\"headerlink\" title=\"source惹的祸／$0 也会骗人\"></a>source惹的祸／$0 也会骗人</h2><p>发现用source也可以调用其他shell脚本文件。试试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行一下./a.sh。嗯也是可以的。然后改改c.sh。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $0`</span><br></pre></td></tr></table></figure>\n\n<p>这时候第二行打印应该是c.sh所在的路径，对吧？</p>\n<p>不，你错了！！！哈哈哈！</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B</p>\n</blockquote>\n<p>为什么是B目录？不是应该<code>/Users/zack/Desktop/C</code>吗？我书读得少你不要骗我！！！</p>\n<p>打印下<code>$0</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $0`</span><br><span class=\"line\">echo $0</span><br></pre></td></tr></table></figure>\n\n<p>下面是b.sh用source之后的：</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B<br>/Users/zack/Desktop/B/b.sh</p>\n</blockquote>\n<p>下面是b.sh直接用路径之后的：</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C<br>/Users/zack/Desktop/B/C/c.sh</p>\n</blockquote>\n<p>哦哦哦，原来是你，source！终于把你揪出来了！用了source之后会导致<code>$0</code>不同。</p>\n<p>下面是考试重点，记住了！！</p>\n<blockquote>\n<p>source命令，不再产生新的shell，而是在当前shell下执行一切命令。</p>\n<p>source FileName，作用：在当前bash环境下读取并执行FileName中的命令。</p>\n<p>source在本shell中执行的，所以能够看到结果</p>\n<p>调用绝对路径执行shell是在一个子shell里运行的，所以执行后，结果并没有反应到父shell里。</p>\n</blockquote>\n<p>嗯明白了！source使用的脚本是在当前shell进程下进行的，所以<code>$0</code>依旧是当前的b.sh。那么之前的<code>pwd</code>应该是当前shell进程的工作目录，这个可以理解了。在a.sh调用b.sh，a.sh没有执行任何<code>cd dir</code>操作，b.sh也没有，所以<code>pwd</code>仍然是a.sh所在目录。</p>\n<h2 id=\"source-0-pwd相互影响\"><a href=\"#source-0-pwd相互影响\" class=\"headerlink\" title=\"source/$0/pwd相互影响\"></a>source/$0/pwd相互影响</h2><p>做个实验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">echo `pwd`</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br><span class=\"line\">echo `pwd`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>猜猜这时候b.sh打印什么？</p>\n<blockquote>\n<p>/Users/zack/Desktop<br>I’m c.sh.<br>/Users/zack</p>\n</blockquote>\n<p>如果b.sh再改成这样呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">echo `pwd`</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br><span class=\"line\">echo `pwd`</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/Users/zack/Desktop<br>I’m c.sh.<br>/Users/zack/Desktop</p>\n</blockquote>\n<p>哈哈很有趣，这样可以很容易很真切理解这几个东西的作用和影响了！</p>\n<h2 id=\"BASH-SOURCE-0-这又是什么东西？\"><a href=\"#BASH-SOURCE-0-这又是什么东西？\" class=\"headerlink\" title=\"BASH_SOURCE[0]这又是什么东西？\"></a>BASH_SOURCE[0]这又是什么东西？</h2><p> 上面的问题还是没有解决。基友丢来一行代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd )&quot;</span><br></pre></td></tr></table></figure>\n\n<p>用BASH_SOURCE[0]来获取当前脚本的路径。</p>\n<blockquote>\n<p>与FUNCNAME相似的另外一个比较有用的常量是BASH_SOURCE，同样是一个数组，不过它的第一个元素是当前脚本的名称。<br>这在source的时候非常有用，因为在被source的脚本中，$0是父脚本的名称，而不是被source的脚本名称。而BASH_SOURCE就可以派上用场了。<br>唯一遗憾的是，这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。</p>\n</blockquote>\n<p>试下试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $&#123;BASH_SOURCE[0]&#125;`</span><br></pre></td></tr></table></figure>\n\n<p>结果如下，哐哐哐！</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C</p>\n</blockquote>\n<p>b.sh再改成source c.sh的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C</p>\n</blockquote>\n<p>Good的！哈哈哈！好高兴解决了！</p>\n<h2 id=\"鲁棒性？用回pwd啦！\"><a href=\"#鲁棒性？用回pwd啦！\" class=\"headerlink\" title=\"鲁棒性？用回pwd啦！\"></a>鲁棒性？用回pwd啦！</h2><p>从<strong>source/$0/pwd相互影响</strong>这节的实验可以看到，b.sh使用source c.sh时，在c.sh里面cd dir，会影响外面的pwd；而直接调用c.sh的话，即使cd dir，回到b.sh依旧不影响pwd。</p>\n<p>我怎么尽可能保证鲁棒性呢？因为我不知道别人是怎么调用我的。设计得好的话，作为被调用者，应该只产生脚本本身的作用，而不影响到其他东西，比如调用者的工作目录路径。</p>\n<p>从另一个角度，我作为调用者的话，怎么防止被调用者影响到我的工作目录路径呢？因为我们经常用pwd来做些操作的。</p>\n<p>解决大概如下：</p>\n<ol>\n<li>作为调用者，尽可能使用绝对路径或相对路径调用其他脚本文件，不用source；或者在使用其他脚本文件前保存路径<code>pwd=｀pwd｀</code>，调用完后再<code>cd pwd</code>回去。</li>\n<li>作为被调用者，同上，在开始前保存pwd文件，执行完任务后再cd回去。</li>\n</ol>\n<h2 id=\"又是source的坑！变量命名！\"><a href=\"#又是source的坑！变量命名！\" class=\"headerlink\" title=\"又是source的坑！变量命名！\"></a>又是source的坑！变量命名！</h2><p>呼呼差不多了，再加点东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">myPath=`dirname $&#123;BASH_SOURCE[0]&#125;`</span><br><span class=\"line\">echo $myPath</span><br><span class=\"line\">source $&#123;myPath&#125;/C/c.sh</span><br><span class=\"line\">echo $myPath</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">myPath=`pwd`</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">cd $myPath</span><br></pre></td></tr></table></figure>\n\n<p>这里然后c.sh保存了当前路径，最后返回当前路径。b.sh保存了一个<code>myPath</code>，调用b.sh前后各打印一次。你猜打印结果一样吗？？</p>\n<blockquote>\n<p>/Users/zack/Desktop/B<br>I’m c.sh.<br>/Users/zack/Desktop</p>\n</blockquote>\n<p>没道理啊，为什么呢？c.sh应该是不会影响到路径的啊！这个做过试验了的。</p>\n<p>猜不到吧，因为c.sh的myPath覆盖了b.sh……</p>\n<p>因为source c.sh之后，c.sh和b.sh在同一个shell进程下运行，变量也公用，所以……</p>\n<p>怎么解决呢？只能是通过命名空间或者命名规则了吧！</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>呼呼至此结束了！</p>\n<p>shell脚本挺有趣的，虽然有时处理些东西麻烦或者不够规范，比如获取脚本参数、脚本只能返回整型等。晚了，关于pwd、source、$0等等相关更细的知识就不介绍了，度娘知道。</p>\n<p>自动化编译脚本也重写得很优雅很美了！类似下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function archive() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function exportArchive() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">archive</span><br><span class=\"line\">exportArchive</span><br><span class=\"line\">publishToFirIfNeed</span><br><span class=\"line\">submitAppStoreIfNeed</span><br><span class=\"line\">sendEmail</span><br></pre></td></tr></table></figure>\n\n<p>所有变量什么的都放在函数里面，每个函数再分别调用其他脚本文件。打包、包导出、上传fir、上传appStore、发邮件都分到单独的脚本文件，每个可以单独用；整个根调用文件看起来整洁清晰，步骤也很明显，做的事情就是最下面那5个调用。</p>\n<p>后面会补到之前写的文章中：<br>简书：<a href=\"http://www.jianshu.com/p/bd4c22952e01\" target=\"_blank\" rel=\"noopener\">详解Shell脚本实现iOS自动化编译打包提交</a><br>个人博客：<a href=\"http://zackzheng.info/2015/12/27/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails\">详解Shell脚本实现iOS自动化编译打包提交</a></p>\n<p>让编程一直成为一种有趣的爱好！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>踩坑跳坑出坑<ul>\n<li>pwd是获取当前的路径？</li>\n<li>source惹的祸／$0 也会骗人</li>\n<li>source/$0/pwd相互影响</li>\n<li>BASH_SOURCE[0]这又是什么东西？</li>\n<li>鲁棒性？用回pwd啦！</li>\n<li>又是source的坑！变量命名！</li>\n</ul>\n</li>\n<li>小结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天重新写了之前的iOS自动化脚本，并加入自动上传符号表文件到Bugly的功能。结果遇到Shell的几个有趣的“坑”。</p>\n<p>简化成以下例子：</p>\n<blockquote>\n<p>/Users/zack/Desktop/a.sh<br>/Users/zack/Desktop/B/b.sh<br>/Users/zack/Desktop/B/C/c.sh</p>\n</blockquote>\n<p>有如上面路径结构的三个脚本文件a.sh、b.sh、c.sh。</p>\n<p>B目录内的文件是写给别人调用的，b.sh调用c.sh。假设在桌面有个a.sh调用了b.sh。</p>\n<p>实际过程写了很多脚本文件比较复杂，其实排查起坑来不像下面讲的那么简单，囧囧囧！</p>\n<h1 id=\"踩坑跳坑出坑\"><a href=\"#踩坑跳坑出坑\" class=\"headerlink\" title=\"踩坑跳坑出坑\"></a>踩坑跳坑出坑</h1><p>接着就开始小小的有趣的踩坑历程啦。</p>\n<h2 id=\"pwd是获取当前的路径？\"><a href=\"#pwd是获取当前的路径？\" class=\"headerlink\" title=\"pwd是获取当前的路径？\"></a>pwd是获取当前的路径？</h2><p>首先是a.sh调用b.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a.sh</span><br><span class=\"line\">/Users/zack/Desktop/B/b.sh</span><br></pre></td></tr></table></figure>\n\n<p>b.sh调用c.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>c.sh随便干点什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>看起来挺正常的是吧？</p>\n<blockquote>\n<p>/Users/zack/Desktop/B/b.sh: line 1: C/c.sh: No such file or directory</p>\n</blockquote>\n<p>找不到c.sh？为什么？b.sh不是和C目录同一级吗？</p>\n<p>嗯想想……应该和被a.sh调用有关系。我是给别人用的工具，那么我并不知道a.sh会在哪调用我的b.sh。好吧，那我加个绝对路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">｀pwd｀/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>又有问题？对，你猜的没错。</p>\n<blockquote>\n<p>/Users/zack/Desktop/B/b.sh: line 1: /Users/zack/Desktop/C/c.sh: No such file or directory</p>\n</blockquote>\n<p>好吧，为什么是<code>/Users/zack/Desktop/C/c.sh</code>这个路径呢？打印一下<code>｀pwd｀</code>，是<code>/Users/zack/Desktop</code>。为虾米？这个不是获取当前工作目录吗？</p>\n<p>噢我一定是撞鬼了！不，我是唯物主义者！再想想……这个是a.sh的路径，也就是说这个还是跟调用者有关（后文会解释shell进程相关的原因）。</p>\n<p>网上度娘说用这个<code>dirname</code>取<code>$0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>看结果：</p>\n<blockquote>\n<p>I’m c.sh.</p>\n</blockquote>\n<p>哇真的可以，感谢度娘！</p>\n<p><code>dirname</code>用于取给定路径的目录部分,<code>$0</code>是Shell本身的文件名。</p>\n<p>继续写代码。</p>\n<h2 id=\"source惹的祸／-0-也会骗人\"><a href=\"#source惹的祸／-0-也会骗人\" class=\"headerlink\" title=\"source惹的祸／$0 也会骗人\"></a>source惹的祸／$0 也会骗人</h2><p>发现用source也可以调用其他shell脚本文件。试试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行一下./a.sh。嗯也是可以的。然后改改c.sh。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $0`</span><br></pre></td></tr></table></figure>\n\n<p>这时候第二行打印应该是c.sh所在的路径，对吧？</p>\n<p>不，你错了！！！哈哈哈！</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B</p>\n</blockquote>\n<p>为什么是B目录？不是应该<code>/Users/zack/Desktop/C</code>吗？我书读得少你不要骗我！！！</p>\n<p>打印下<code>$0</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $0`</span><br><span class=\"line\">echo $0</span><br></pre></td></tr></table></figure>\n\n<p>下面是b.sh用source之后的：</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B<br>/Users/zack/Desktop/B/b.sh</p>\n</blockquote>\n<p>下面是b.sh直接用路径之后的：</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C<br>/Users/zack/Desktop/B/C/c.sh</p>\n</blockquote>\n<p>哦哦哦，原来是你，source！终于把你揪出来了！用了source之后会导致<code>$0</code>不同。</p>\n<p>下面是考试重点，记住了！！</p>\n<blockquote>\n<p>source命令，不再产生新的shell，而是在当前shell下执行一切命令。</p>\n<p>source FileName，作用：在当前bash环境下读取并执行FileName中的命令。</p>\n<p>source在本shell中执行的，所以能够看到结果</p>\n<p>调用绝对路径执行shell是在一个子shell里运行的，所以执行后，结果并没有反应到父shell里。</p>\n</blockquote>\n<p>嗯明白了！source使用的脚本是在当前shell进程下进行的，所以<code>$0</code>依旧是当前的b.sh。那么之前的<code>pwd</code>应该是当前shell进程的工作目录，这个可以理解了。在a.sh调用b.sh，a.sh没有执行任何<code>cd dir</code>操作，b.sh也没有，所以<code>pwd</code>仍然是a.sh所在目录。</p>\n<h2 id=\"source-0-pwd相互影响\"><a href=\"#source-0-pwd相互影响\" class=\"headerlink\" title=\"source/$0/pwd相互影响\"></a>source/$0/pwd相互影响</h2><p>做个实验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">echo `pwd`</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br><span class=\"line\">echo `pwd`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>猜猜这时候b.sh打印什么？</p>\n<blockquote>\n<p>/Users/zack/Desktop<br>I’m c.sh.<br>/Users/zack</p>\n</blockquote>\n<p>如果b.sh再改成这样呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">echo `pwd`</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br><span class=\"line\">echo `pwd`</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/Users/zack/Desktop<br>I’m c.sh.<br>/Users/zack/Desktop</p>\n</blockquote>\n<p>哈哈很有趣，这样可以很容易很真切理解这几个东西的作用和影响了！</p>\n<h2 id=\"BASH-SOURCE-0-这又是什么东西？\"><a href=\"#BASH-SOURCE-0-这又是什么东西？\" class=\"headerlink\" title=\"BASH_SOURCE[0]这又是什么东西？\"></a>BASH_SOURCE[0]这又是什么东西？</h2><p> 上面的问题还是没有解决。基友丢来一行代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd )&quot;</span><br></pre></td></tr></table></figure>\n\n<p>用BASH_SOURCE[0]来获取当前脚本的路径。</p>\n<blockquote>\n<p>与FUNCNAME相似的另外一个比较有用的常量是BASH_SOURCE，同样是一个数组，不过它的第一个元素是当前脚本的名称。<br>这在source的时候非常有用，因为在被source的脚本中，$0是父脚本的名称，而不是被source的脚本名称。而BASH_SOURCE就可以派上用场了。<br>唯一遗憾的是，这种做法会让脚本失去一些可移植性，因为不是所有的shell都支持这些常量。</p>\n</blockquote>\n<p>试下试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">`dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">echo `dirname $&#123;BASH_SOURCE[0]&#125;`</span><br></pre></td></tr></table></figure>\n\n<p>结果如下，哐哐哐！</p>\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C</p>\n</blockquote>\n<p>b.sh再改成source c.sh的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">source `dirname $0`/C/c.sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>I’m c.sh.<br>/Users/zack/Desktop/B/C</p>\n</blockquote>\n<p>Good的！哈哈哈！好高兴解决了！</p>\n<h2 id=\"鲁棒性？用回pwd啦！\"><a href=\"#鲁棒性？用回pwd啦！\" class=\"headerlink\" title=\"鲁棒性？用回pwd啦！\"></a>鲁棒性？用回pwd啦！</h2><p>从<strong>source/$0/pwd相互影响</strong>这节的实验可以看到，b.sh使用source c.sh时，在c.sh里面cd dir，会影响外面的pwd；而直接调用c.sh的话，即使cd dir，回到b.sh依旧不影响pwd。</p>\n<p>我怎么尽可能保证鲁棒性呢？因为我不知道别人是怎么调用我的。设计得好的话，作为被调用者，应该只产生脚本本身的作用，而不影响到其他东西，比如调用者的工作目录路径。</p>\n<p>从另一个角度，我作为调用者的话，怎么防止被调用者影响到我的工作目录路径呢？因为我们经常用pwd来做些操作的。</p>\n<p>解决大概如下：</p>\n<ol>\n<li>作为调用者，尽可能使用绝对路径或相对路径调用其他脚本文件，不用source；或者在使用其他脚本文件前保存路径<code>pwd=｀pwd｀</code>，调用完后再<code>cd pwd</code>回去。</li>\n<li>作为被调用者，同上，在开始前保存pwd文件，执行完任务后再cd回去。</li>\n</ol>\n<h2 id=\"又是source的坑！变量命名！\"><a href=\"#又是source的坑！变量命名！\" class=\"headerlink\" title=\"又是source的坑！变量命名！\"></a>又是source的坑！变量命名！</h2><p>呼呼差不多了，再加点东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># b.sh</span><br><span class=\"line\">myPath=`dirname $&#123;BASH_SOURCE[0]&#125;`</span><br><span class=\"line\">echo $myPath</span><br><span class=\"line\">source $&#123;myPath&#125;/C/c.sh</span><br><span class=\"line\">echo $myPath</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># c.sh</span><br><span class=\"line\">myPath=`pwd`</span><br><span class=\"line\">echo &quot;I&apos;m c.sh.&quot;</span><br><span class=\"line\">cd $myPath</span><br></pre></td></tr></table></figure>\n\n<p>这里然后c.sh保存了当前路径，最后返回当前路径。b.sh保存了一个<code>myPath</code>，调用b.sh前后各打印一次。你猜打印结果一样吗？？</p>\n<blockquote>\n<p>/Users/zack/Desktop/B<br>I’m c.sh.<br>/Users/zack/Desktop</p>\n</blockquote>\n<p>没道理啊，为什么呢？c.sh应该是不会影响到路径的啊！这个做过试验了的。</p>\n<p>猜不到吧，因为c.sh的myPath覆盖了b.sh……</p>\n<p>因为source c.sh之后，c.sh和b.sh在同一个shell进程下运行，变量也公用，所以……</p>\n<p>怎么解决呢？只能是通过命名空间或者命名规则了吧！</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>呼呼至此结束了！</p>\n<p>shell脚本挺有趣的，虽然有时处理些东西麻烦或者不够规范，比如获取脚本参数、脚本只能返回整型等。晚了，关于pwd、source、$0等等相关更细的知识就不介绍了，度娘知道。</p>\n<p>自动化编译脚本也重写得很优雅很美了！类似下面这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function archive() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function exportArchive() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">archive</span><br><span class=\"line\">exportArchive</span><br><span class=\"line\">publishToFirIfNeed</span><br><span class=\"line\">submitAppStoreIfNeed</span><br><span class=\"line\">sendEmail</span><br></pre></td></tr></table></figure>\n\n<p>所有变量什么的都放在函数里面，每个函数再分别调用其他脚本文件。打包、包导出、上传fir、上传appStore、发邮件都分到单独的脚本文件，每个可以单独用；整个根调用文件看起来整洁清晰，步骤也很明显，做的事情就是最下面那5个调用。</p>\n<p>后面会补到之前写的文章中：<br>简书：<a href=\"http://www.jianshu.com/p/bd4c22952e01\" target=\"_blank\" rel=\"noopener\">详解Shell脚本实现iOS自动化编译打包提交</a><br>个人博客：<a href=\"http://zackzheng.info/2015/12/27/2015-12-27-an-automated-script-for-building-archiving-submission-sending-emails\">详解Shell脚本实现iOS自动化编译打包提交</a></p>\n<p>让编程一直成为一种有趣的爱好！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"iOS直播：评论框与粒子系统点赞动画","date":"2016-07-31T08:00:00.000Z","keywords":"iOS 直播","description":"主要介绍了iOS直播的评论框、粒子系统点赞动画的实现","_content":"\n# 目录\n- 前言\n- 效果预览\n- 评论框\n  - 列表\n  - 添加评论\n  - 从下往上显示\n  - 支持昵称颜色\n  - 给出NSAttributedString\n- 点赞动画\n\n# 前言\n\n最近做了直播功能，其实难度不是说很大，主要是方案和SDK的选择、整个直播流程的异常处理和优化，还有第三方SDK的填坑。不过本文只是记录下评论框和点赞效果的实现，其他的是用第三方SDK，觉得没什么好分享的，只是了解了直播流程和开发中会遇到的问题。\n但看到效果还是蛮激动和蛮有成就感的，这个主要是技术本身带来的。\n\n# 效果预览\n\n![2016-07-31-ios-live-comment-praise-1.gif](304530-9c6fd4a095528f98.gif)\n\n# 评论框\n\n细化需求：\n\n1. 显示评论内容\n2. 从下往上显示\n3. 最大支持1000条\n4. 不同人昵称显示颜色随机分配，同一个人颜色保持不变。\n5. 评论插入有动画\n\n## 列表\n\n- 新的类`MessageChatView`，对外接口`add`。\n\n```\nfunc add(message: String) {}\n```\n\n- 存放评论数组\n\n```\nprivate let maxMessageCount: Int = 1000\nprivate var messages: [String] = []\n```\n\n- UITableViewDelegate & UITableViewDataSource\n\n```\nextension MessageChatView: UITableViewDataSource {\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return messages.count\n    }\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 1\n    }\n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {   \n        ...\n        return cell\n    }\n}\nextension MessageChatView: UITableViewDelegate {\n    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        return ...\n    }\n    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {\n        return 5.0\n    }\n}\n```\n\n此时显示了数组里面的评论，最多1000条。\n\n## 添加评论\n\n```\nfunc add(message: String) {\n    messages.insert(message, atIndex: 0)\n    tableView.insertSections(NSIndexSet(index: 0), withRowAnimation: .Top)\n    if messages.count > maxMessageCount {\n        messages.removeLast()\n        tableView.deleteSections(NSIndexSet(index: messages.count), withRowAnimation: .None)\n    }\n}\n```\n\n使用`UITableView`自带的方法可以有动画效果。插入动画使用`.Top`。\n\n## 从下往上显示\n\n- `iOS`在tableView和tableViewCell里调用下面语句：\n\n```\ntableView.transform = CGAffineTransformMakeScale (1,-1);\n```\n\n```\nlabel.transform = CGAffineTransformMakeScale (1,-1);\n```\n\n两条语句就可以实现了。\n\n- `Android`可以调用ListView自带的属性`stackFromBottom`：\n\n```\nandroid:stackFromBottom=\"true\"\n```\n\n> 网上有文章将数据 `append`到数据源，在获取数据源时从后往前读的方式(即messages.count-1-indexPath.section)，显然插入在0位置比那样更方便：`insert(message, atIndex: 0)`\n\n## 支持昵称颜色\n\n- 使用NSAttributedString，且由外界设置。messages类型改为NSAttributedString数组。\n\n```\nprivate var messages: [NSAttributedString] = []\n```\n\n- `add`改为NSAttributedString。\n\n```\nfunc add(message: NSAttributedString) {}\n```\n\n- 设置Label的时候设置label.attributedText。\n\n## 给出NSAttributedString\n\n- 一个新的类ChatColorText，对外接口colorText，参数nickName、text。\n\n```\nfunc colorText(nickName: String?, text: String?) -> NSAttributedString?{}\n```\n\n- 随机颜色数组。\n\n\n```\nprivate var colors = [\n    UIColor(hex: .RGB00AEFF)!,\n    UIColor(hex: .RGB00A61C)!,\n    UIColor(hex: .RGB5400E6)!,\n    UIColor(hex: .RGBFF3377)!,\n    UIColor(hex: .RGBFF8800)!,\n    UIColor(hex: .RGBFF5E00)!,\n    UIColor(hex: .RGBCA2EE6)!,\n]\n```\n\n\n- 记录当前取颜色的`Index`，使得不同人给不同颜色。 \n\n\n```\nprivate var colorIndex: Int = 0\n```\n\n- 记录昵称对应的颜色值，保证同一个昵称同一种颜色。\n\n```\nprivate var dicOfNameAndColor = [String: UIColor]()\n```\n\n- 对外接口colorText实现。\n\n```\nfunc colorText(nickName: String?, text: String?) -> NSAttributedString? {\n    guard let nickName = nickName, text = text else {return nil}\n    let nickNameColor: UIColor = {\n        if let color = dicOfNameAndColor[nickName] {\n            return color\n        }else {\n            let color = colors[colorIndex]\n            dicOfNameAndColor[nickName] = color\n            colorIndex = (colorIndex + 1) % colors.count\n            return color\n        }\n    }()\n    let attributedString = NSAttributedString.attributedStringWithTextsAndColors([nickName, text], colors: [nickNameColor, UIColor(hex: .RGB333333)!])\n    return attributedString\n}\n```\n\n\n`NSAttributedString.attributedStringWithTextsAndColors`是自己扩展的一个方法，传入多串文字和对应的字符返回匹配的`NSAttributedString`。\n\n主要逻辑是：先判断是否已经有保存过昵称对应的颜色值，有则直接返回；没有则根据`index`获取颜色值，然后保存起来，并改变`index`。\n\n\n\n# 点赞动画\n\niOS自带了粒子引擎的类`CAEmitterLayer`，是一个粒子发射器系统，每个粒子都是`CAEmitterCell`的实例。可以查看它们分别有什么属性。\n\n有两个小点，一个是`CAEmitterLayer`一些属性对`CAEmitterCell`有成倍作用，如`birthRate`；另一个是没有明确的停止动画的方法，包括它的父类也没提供。可以想到的方法，除了把`layer`抹除掉之外，还可以将`CAEmitterLayer`的`birthRate`设置为0，这样每个`CAEmitterCell`的诞生速率都为0，就不会有动画了。\n\n```\nclass PraiseEmitterView: UIView {\n\n    private var timer: NSTimer?\n    private let emitter: CAEmitterLayer! = {\n        let emitter = CAEmitterLayer()\n        return emitter\n    }()\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setup()\n    }\n    private func setup() {\n        emitter.frame = bounds\n        emitter.birthRate = 0\n        emitter.emitterShape = kCAEmitterLayerLine\n        emitter.emitterPosition = CGPointMake(0,CGRectGetHeight(bounds))\n        emitter.emitterSize = bounds.size\n        emitter.emitterCells = [getEmitterCell(UIImage(named: \"comment\")!.CGImage!), getEmitterCell(UIImage(named: \"flower_15\")!.CGImage!)]\n        self.layer.addSublayer(emitter)\n    }\n    func timeoutSelector() {\n        emitter.birthRate = 0\n    }\n    func emit() {\n        emitter.birthRate = 2\n        timer?.invalidate()\n        timer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: #selector(timeoutSelector), userInfo: nil, repeats: false)\n    }\n    private func getEmitterCell(contentImage: CGImage) -> CAEmitterCell {\n\n        let emitterCell = CAEmitterCell()\n        emitterCell.contents = contentImage\n        emitterCell.lifetime = 2\n        emitterCell.birthRate = 2\n\n        emitterCell.yAcceleration = -70.0\n        emitterCell.xAcceleration = 0\n        \n        emitterCell.velocity = 20.0\n        emitterCell.velocityRange = 200.0\n        \n        emitterCell.emissionLongitude = CGFloat(0)\n        emitterCell.emissionRange = CGFloat(M_PI_4)\n        \n        emitterCell.scale = 0.8\n        emitterCell.scaleRange = 0.8\n        emitterCell.scaleSpeed = -0.15\n        \n        emitterCell.alphaRange = 0.75\n        emitterCell.alphaSpeed = -0.15\n\n        return emitterCell\n    }\n}\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-07-31-ios-live-comment-praise.md","raw":"---\ntitle: iOS直播：评论框与粒子系统点赞动画\ndate: 2016-07-31 16:00:00\ntags: \n     - iOS\n     - 直播\ncategories: iOS\nkeywords: iOS 直播\ndescription: 主要介绍了iOS直播的评论框、粒子系统点赞动画的实现\n---\n\n# 目录\n- 前言\n- 效果预览\n- 评论框\n  - 列表\n  - 添加评论\n  - 从下往上显示\n  - 支持昵称颜色\n  - 给出NSAttributedString\n- 点赞动画\n\n# 前言\n\n最近做了直播功能，其实难度不是说很大，主要是方案和SDK的选择、整个直播流程的异常处理和优化，还有第三方SDK的填坑。不过本文只是记录下评论框和点赞效果的实现，其他的是用第三方SDK，觉得没什么好分享的，只是了解了直播流程和开发中会遇到的问题。\n但看到效果还是蛮激动和蛮有成就感的，这个主要是技术本身带来的。\n\n# 效果预览\n\n![2016-07-31-ios-live-comment-praise-1.gif](304530-9c6fd4a095528f98.gif)\n\n# 评论框\n\n细化需求：\n\n1. 显示评论内容\n2. 从下往上显示\n3. 最大支持1000条\n4. 不同人昵称显示颜色随机分配，同一个人颜色保持不变。\n5. 评论插入有动画\n\n## 列表\n\n- 新的类`MessageChatView`，对外接口`add`。\n\n```\nfunc add(message: String) {}\n```\n\n- 存放评论数组\n\n```\nprivate let maxMessageCount: Int = 1000\nprivate var messages: [String] = []\n```\n\n- UITableViewDelegate & UITableViewDataSource\n\n```\nextension MessageChatView: UITableViewDataSource {\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return messages.count\n    }\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 1\n    }\n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {   \n        ...\n        return cell\n    }\n}\nextension MessageChatView: UITableViewDelegate {\n    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        return ...\n    }\n    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {\n        return 5.0\n    }\n}\n```\n\n此时显示了数组里面的评论，最多1000条。\n\n## 添加评论\n\n```\nfunc add(message: String) {\n    messages.insert(message, atIndex: 0)\n    tableView.insertSections(NSIndexSet(index: 0), withRowAnimation: .Top)\n    if messages.count > maxMessageCount {\n        messages.removeLast()\n        tableView.deleteSections(NSIndexSet(index: messages.count), withRowAnimation: .None)\n    }\n}\n```\n\n使用`UITableView`自带的方法可以有动画效果。插入动画使用`.Top`。\n\n## 从下往上显示\n\n- `iOS`在tableView和tableViewCell里调用下面语句：\n\n```\ntableView.transform = CGAffineTransformMakeScale (1,-1);\n```\n\n```\nlabel.transform = CGAffineTransformMakeScale (1,-1);\n```\n\n两条语句就可以实现了。\n\n- `Android`可以调用ListView自带的属性`stackFromBottom`：\n\n```\nandroid:stackFromBottom=\"true\"\n```\n\n> 网上有文章将数据 `append`到数据源，在获取数据源时从后往前读的方式(即messages.count-1-indexPath.section)，显然插入在0位置比那样更方便：`insert(message, atIndex: 0)`\n\n## 支持昵称颜色\n\n- 使用NSAttributedString，且由外界设置。messages类型改为NSAttributedString数组。\n\n```\nprivate var messages: [NSAttributedString] = []\n```\n\n- `add`改为NSAttributedString。\n\n```\nfunc add(message: NSAttributedString) {}\n```\n\n- 设置Label的时候设置label.attributedText。\n\n## 给出NSAttributedString\n\n- 一个新的类ChatColorText，对外接口colorText，参数nickName、text。\n\n```\nfunc colorText(nickName: String?, text: String?) -> NSAttributedString?{}\n```\n\n- 随机颜色数组。\n\n\n```\nprivate var colors = [\n    UIColor(hex: .RGB00AEFF)!,\n    UIColor(hex: .RGB00A61C)!,\n    UIColor(hex: .RGB5400E6)!,\n    UIColor(hex: .RGBFF3377)!,\n    UIColor(hex: .RGBFF8800)!,\n    UIColor(hex: .RGBFF5E00)!,\n    UIColor(hex: .RGBCA2EE6)!,\n]\n```\n\n\n- 记录当前取颜色的`Index`，使得不同人给不同颜色。 \n\n\n```\nprivate var colorIndex: Int = 0\n```\n\n- 记录昵称对应的颜色值，保证同一个昵称同一种颜色。\n\n```\nprivate var dicOfNameAndColor = [String: UIColor]()\n```\n\n- 对外接口colorText实现。\n\n```\nfunc colorText(nickName: String?, text: String?) -> NSAttributedString? {\n    guard let nickName = nickName, text = text else {return nil}\n    let nickNameColor: UIColor = {\n        if let color = dicOfNameAndColor[nickName] {\n            return color\n        }else {\n            let color = colors[colorIndex]\n            dicOfNameAndColor[nickName] = color\n            colorIndex = (colorIndex + 1) % colors.count\n            return color\n        }\n    }()\n    let attributedString = NSAttributedString.attributedStringWithTextsAndColors([nickName, text], colors: [nickNameColor, UIColor(hex: .RGB333333)!])\n    return attributedString\n}\n```\n\n\n`NSAttributedString.attributedStringWithTextsAndColors`是自己扩展的一个方法，传入多串文字和对应的字符返回匹配的`NSAttributedString`。\n\n主要逻辑是：先判断是否已经有保存过昵称对应的颜色值，有则直接返回；没有则根据`index`获取颜色值，然后保存起来，并改变`index`。\n\n\n\n# 点赞动画\n\niOS自带了粒子引擎的类`CAEmitterLayer`，是一个粒子发射器系统，每个粒子都是`CAEmitterCell`的实例。可以查看它们分别有什么属性。\n\n有两个小点，一个是`CAEmitterLayer`一些属性对`CAEmitterCell`有成倍作用，如`birthRate`；另一个是没有明确的停止动画的方法，包括它的父类也没提供。可以想到的方法，除了把`layer`抹除掉之外，还可以将`CAEmitterLayer`的`birthRate`设置为0，这样每个`CAEmitterCell`的诞生速率都为0，就不会有动画了。\n\n```\nclass PraiseEmitterView: UIView {\n\n    private var timer: NSTimer?\n    private let emitter: CAEmitterLayer! = {\n        let emitter = CAEmitterLayer()\n        return emitter\n    }()\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setup()\n    }\n    private func setup() {\n        emitter.frame = bounds\n        emitter.birthRate = 0\n        emitter.emitterShape = kCAEmitterLayerLine\n        emitter.emitterPosition = CGPointMake(0,CGRectGetHeight(bounds))\n        emitter.emitterSize = bounds.size\n        emitter.emitterCells = [getEmitterCell(UIImage(named: \"comment\")!.CGImage!), getEmitterCell(UIImage(named: \"flower_15\")!.CGImage!)]\n        self.layer.addSublayer(emitter)\n    }\n    func timeoutSelector() {\n        emitter.birthRate = 0\n    }\n    func emit() {\n        emitter.birthRate = 2\n        timer?.invalidate()\n        timer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: #selector(timeoutSelector), userInfo: nil, repeats: false)\n    }\n    private func getEmitterCell(contentImage: CGImage) -> CAEmitterCell {\n\n        let emitterCell = CAEmitterCell()\n        emitterCell.contents = contentImage\n        emitterCell.lifetime = 2\n        emitterCell.birthRate = 2\n\n        emitterCell.yAcceleration = -70.0\n        emitterCell.xAcceleration = 0\n        \n        emitterCell.velocity = 20.0\n        emitterCell.velocityRange = 200.0\n        \n        emitterCell.emissionLongitude = CGFloat(0)\n        emitterCell.emissionRange = CGFloat(M_PI_4)\n        \n        emitterCell.scale = 0.8\n        emitterCell.scaleRange = 0.8\n        emitterCell.scaleSpeed = -0.15\n        \n        emitterCell.alphaRange = 0.75\n        emitterCell.alphaSpeed = -0.15\n\n        return emitterCell\n    }\n}\n```\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"ios-live-comment-praise","published":1,"updated":"2020-02-25T15:23:08.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q4002j07eijs4wz4y6","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>效果预览</li>\n<li>评论框<ul>\n<li>列表</li>\n<li>添加评论</li>\n<li>从下往上显示</li>\n<li>支持昵称颜色</li>\n<li>给出NSAttributedString</li>\n</ul>\n</li>\n<li>点赞动画</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近做了直播功能，其实难度不是说很大，主要是方案和SDK的选择、整个直播流程的异常处理和优化，还有第三方SDK的填坑。不过本文只是记录下评论框和点赞效果的实现，其他的是用第三方SDK，觉得没什么好分享的，只是了解了直播流程和开发中会遇到的问题。<br>但看到效果还是蛮激动和蛮有成就感的，这个主要是技术本身带来的。</p>\n<h1 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h1><p><img src=\"/2016/07/31/ios-live-comment-praise/304530-9c6fd4a095528f98.gif\" alt=\"2016-07-31-ios-live-comment-praise-1.gif\"></p>\n<h1 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h1><p>细化需求：</p>\n<ol>\n<li>显示评论内容</li>\n<li>从下往上显示</li>\n<li>最大支持1000条</li>\n<li>不同人昵称显示颜色随机分配，同一个人颜色保持不变。</li>\n<li>评论插入有动画</li>\n</ol>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ul>\n<li>新的类<code>MessageChatView</code>，对外接口<code>add</code>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: String) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存放评论数组</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private let maxMessageCount: Int = 1000</span><br><span class=\"line\">private var messages: [String] = []</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>UITableViewDelegate &amp; UITableViewDataSource</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension MessageChatView: UITableViewDataSource &#123;</span><br><span class=\"line\">    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int &#123;</span><br><span class=\"line\">        return messages.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell &#123;   </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extension MessageChatView: UITableViewDelegate &#123;</span><br><span class=\"line\">    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat &#123;</span><br><span class=\"line\">        return ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -&gt; CGFloat &#123;</span><br><span class=\"line\">        return 5.0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时显示了数组里面的评论，最多1000条。</p>\n<h2 id=\"添加评论\"><a href=\"#添加评论\" class=\"headerlink\" title=\"添加评论\"></a>添加评论</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: String) &#123;</span><br><span class=\"line\">    messages.insert(message, atIndex: 0)</span><br><span class=\"line\">    tableView.insertSections(NSIndexSet(index: 0), withRowAnimation: .Top)</span><br><span class=\"line\">    if messages.count &gt; maxMessageCount &#123;</span><br><span class=\"line\">        messages.removeLast()</span><br><span class=\"line\">        tableView.deleteSections(NSIndexSet(index: messages.count), withRowAnimation: .None)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>UITableView</code>自带的方法可以有动画效果。插入动画使用<code>.Top</code>。</p>\n<h2 id=\"从下往上显示\"><a href=\"#从下往上显示\" class=\"headerlink\" title=\"从下往上显示\"></a>从下往上显示</h2><ul>\n<li><code>iOS</code>在tableView和tableViewCell里调用下面语句：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tableView.transform = CGAffineTransformMakeScale (1,-1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.transform = CGAffineTransformMakeScale (1,-1);</span><br></pre></td></tr></table></figure>\n\n<p>两条语句就可以实现了。</p>\n<ul>\n<li><code>Android</code>可以调用ListView自带的属性<code>stackFromBottom</code>：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:stackFromBottom=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>网上有文章将数据 <code>append</code>到数据源，在获取数据源时从后往前读的方式(即messages.count-1-indexPath.section)，显然插入在0位置比那样更方便：<code>insert(message, atIndex: 0)</code></p>\n</blockquote>\n<h2 id=\"支持昵称颜色\"><a href=\"#支持昵称颜色\" class=\"headerlink\" title=\"支持昵称颜色\"></a>支持昵称颜色</h2><ul>\n<li>使用NSAttributedString，且由外界设置。messages类型改为NSAttributedString数组。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var messages: [NSAttributedString] = []</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>add</code>改为NSAttributedString。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: NSAttributedString) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置Label的时候设置label.attributedText。</li>\n</ul>\n<h2 id=\"给出NSAttributedString\"><a href=\"#给出NSAttributedString\" class=\"headerlink\" title=\"给出NSAttributedString\"></a>给出NSAttributedString</h2><ul>\n<li>一个新的类ChatColorText，对外接口colorText，参数nickName、text。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func colorText(nickName: String?, text: String?) -&gt; NSAttributedString?&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>随机颜色数组。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var colors = [</span><br><span class=\"line\">    UIColor(hex: .RGB00AEFF)!,</span><br><span class=\"line\">    UIColor(hex: .RGB00A61C)!,</span><br><span class=\"line\">    UIColor(hex: .RGB5400E6)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF3377)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF8800)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF5E00)!,</span><br><span class=\"line\">    UIColor(hex: .RGBCA2EE6)!,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录当前取颜色的<code>Index</code>，使得不同人给不同颜色。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var colorIndex: Int = 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录昵称对应的颜色值，保证同一个昵称同一种颜色。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var dicOfNameAndColor = [String: UIColor]()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对外接口colorText实现。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func colorText(nickName: String?, text: String?) -&gt; NSAttributedString? &#123;</span><br><span class=\"line\">    guard let nickName = nickName, text = text else &#123;return nil&#125;</span><br><span class=\"line\">    let nickNameColor: UIColor = &#123;</span><br><span class=\"line\">        if let color = dicOfNameAndColor[nickName] &#123;</span><br><span class=\"line\">            return color</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            let color = colors[colorIndex]</span><br><span class=\"line\">            dicOfNameAndColor[nickName] = color</span><br><span class=\"line\">            colorIndex = (colorIndex + 1) % colors.count</span><br><span class=\"line\">            return color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    let attributedString = NSAttributedString.attributedStringWithTextsAndColors([nickName, text], colors: [nickNameColor, UIColor(hex: .RGB333333)!])</span><br><span class=\"line\">    return attributedString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NSAttributedString.attributedStringWithTextsAndColors</code>是自己扩展的一个方法，传入多串文字和对应的字符返回匹配的<code>NSAttributedString</code>。</p>\n<p>主要逻辑是：先判断是否已经有保存过昵称对应的颜色值，有则直接返回；没有则根据<code>index</code>获取颜色值，然后保存起来，并改变<code>index</code>。</p>\n<h1 id=\"点赞动画\"><a href=\"#点赞动画\" class=\"headerlink\" title=\"点赞动画\"></a>点赞动画</h1><p>iOS自带了粒子引擎的类<code>CAEmitterLayer</code>，是一个粒子发射器系统，每个粒子都是<code>CAEmitterCell</code>的实例。可以查看它们分别有什么属性。</p>\n<p>有两个小点，一个是<code>CAEmitterLayer</code>一些属性对<code>CAEmitterCell</code>有成倍作用，如<code>birthRate</code>；另一个是没有明确的停止动画的方法，包括它的父类也没提供。可以想到的方法，除了把<code>layer</code>抹除掉之外，还可以将<code>CAEmitterLayer</code>的<code>birthRate</code>设置为0，这样每个<code>CAEmitterCell</code>的诞生速率都为0，就不会有动画了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class PraiseEmitterView: UIView &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private var timer: NSTimer?</span><br><span class=\"line\">    private let emitter: CAEmitterLayer! = &#123;</span><br><span class=\"line\">        let emitter = CAEmitterLayer()</span><br><span class=\"line\">        return emitter</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    override init(frame: CGRect) &#123;</span><br><span class=\"line\">        super.init(frame: frame)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class=\"line\">        super.init(coder: aDecoder)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private func setup() &#123;</span><br><span class=\"line\">        emitter.frame = bounds</span><br><span class=\"line\">        emitter.birthRate = 0</span><br><span class=\"line\">        emitter.emitterShape = kCAEmitterLayerLine</span><br><span class=\"line\">        emitter.emitterPosition = CGPointMake(0,CGRectGetHeight(bounds))</span><br><span class=\"line\">        emitter.emitterSize = bounds.size</span><br><span class=\"line\">        emitter.emitterCells = [getEmitterCell(UIImage(named: &quot;comment&quot;)!.CGImage!), getEmitterCell(UIImage(named: &quot;flower_15&quot;)!.CGImage!)]</span><br><span class=\"line\">        self.layer.addSublayer(emitter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func timeoutSelector() &#123;</span><br><span class=\"line\">        emitter.birthRate = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func emit() &#123;</span><br><span class=\"line\">        emitter.birthRate = 2</span><br><span class=\"line\">        timer?.invalidate()</span><br><span class=\"line\">        timer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: #selector(timeoutSelector), userInfo: nil, repeats: false)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private func getEmitterCell(contentImage: CGImage) -&gt; CAEmitterCell &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        let emitterCell = CAEmitterCell()</span><br><span class=\"line\">        emitterCell.contents = contentImage</span><br><span class=\"line\">        emitterCell.lifetime = 2</span><br><span class=\"line\">        emitterCell.birthRate = 2</span><br><span class=\"line\"></span><br><span class=\"line\">        emitterCell.yAcceleration = -70.0</span><br><span class=\"line\">        emitterCell.xAcceleration = 0</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.velocity = 20.0</span><br><span class=\"line\">        emitterCell.velocityRange = 200.0</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.emissionLongitude = CGFloat(0)</span><br><span class=\"line\">        emitterCell.emissionRange = CGFloat(M_PI_4)</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.scale = 0.8</span><br><span class=\"line\">        emitterCell.scaleRange = 0.8</span><br><span class=\"line\">        emitterCell.scaleSpeed = -0.15</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.alphaRange = 0.75</span><br><span class=\"line\">        emitterCell.alphaSpeed = -0.15</span><br><span class=\"line\"></span><br><span class=\"line\">        return emitterCell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>效果预览</li>\n<li>评论框<ul>\n<li>列表</li>\n<li>添加评论</li>\n<li>从下往上显示</li>\n<li>支持昵称颜色</li>\n<li>给出NSAttributedString</li>\n</ul>\n</li>\n<li>点赞动画</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近做了直播功能，其实难度不是说很大，主要是方案和SDK的选择、整个直播流程的异常处理和优化，还有第三方SDK的填坑。不过本文只是记录下评论框和点赞效果的实现，其他的是用第三方SDK，觉得没什么好分享的，只是了解了直播流程和开发中会遇到的问题。<br>但看到效果还是蛮激动和蛮有成就感的，这个主要是技术本身带来的。</p>\n<h1 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h1><p><img src=\"/2016/07/31/ios-live-comment-praise/304530-9c6fd4a095528f98.gif\" alt=\"2016-07-31-ios-live-comment-praise-1.gif\"></p>\n<h1 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h1><p>细化需求：</p>\n<ol>\n<li>显示评论内容</li>\n<li>从下往上显示</li>\n<li>最大支持1000条</li>\n<li>不同人昵称显示颜色随机分配，同一个人颜色保持不变。</li>\n<li>评论插入有动画</li>\n</ol>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><ul>\n<li>新的类<code>MessageChatView</code>，对外接口<code>add</code>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: String) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存放评论数组</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private let maxMessageCount: Int = 1000</span><br><span class=\"line\">private var messages: [String] = []</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>UITableViewDelegate &amp; UITableViewDataSource</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension MessageChatView: UITableViewDataSource &#123;</span><br><span class=\"line\">    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int &#123;</span><br><span class=\"line\">        return messages.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell &#123;   </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        return cell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extension MessageChatView: UITableViewDelegate &#123;</span><br><span class=\"line\">    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat &#123;</span><br><span class=\"line\">        return ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -&gt; CGFloat &#123;</span><br><span class=\"line\">        return 5.0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时显示了数组里面的评论，最多1000条。</p>\n<h2 id=\"添加评论\"><a href=\"#添加评论\" class=\"headerlink\" title=\"添加评论\"></a>添加评论</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: String) &#123;</span><br><span class=\"line\">    messages.insert(message, atIndex: 0)</span><br><span class=\"line\">    tableView.insertSections(NSIndexSet(index: 0), withRowAnimation: .Top)</span><br><span class=\"line\">    if messages.count &gt; maxMessageCount &#123;</span><br><span class=\"line\">        messages.removeLast()</span><br><span class=\"line\">        tableView.deleteSections(NSIndexSet(index: messages.count), withRowAnimation: .None)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>UITableView</code>自带的方法可以有动画效果。插入动画使用<code>.Top</code>。</p>\n<h2 id=\"从下往上显示\"><a href=\"#从下往上显示\" class=\"headerlink\" title=\"从下往上显示\"></a>从下往上显示</h2><ul>\n<li><code>iOS</code>在tableView和tableViewCell里调用下面语句：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tableView.transform = CGAffineTransformMakeScale (1,-1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.transform = CGAffineTransformMakeScale (1,-1);</span><br></pre></td></tr></table></figure>\n\n<p>两条语句就可以实现了。</p>\n<ul>\n<li><code>Android</code>可以调用ListView自带的属性<code>stackFromBottom</code>：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:stackFromBottom=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>网上有文章将数据 <code>append</code>到数据源，在获取数据源时从后往前读的方式(即messages.count-1-indexPath.section)，显然插入在0位置比那样更方便：<code>insert(message, atIndex: 0)</code></p>\n</blockquote>\n<h2 id=\"支持昵称颜色\"><a href=\"#支持昵称颜色\" class=\"headerlink\" title=\"支持昵称颜色\"></a>支持昵称颜色</h2><ul>\n<li>使用NSAttributedString，且由外界设置。messages类型改为NSAttributedString数组。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var messages: [NSAttributedString] = []</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>add</code>改为NSAttributedString。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func add(message: NSAttributedString) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置Label的时候设置label.attributedText。</li>\n</ul>\n<h2 id=\"给出NSAttributedString\"><a href=\"#给出NSAttributedString\" class=\"headerlink\" title=\"给出NSAttributedString\"></a>给出NSAttributedString</h2><ul>\n<li>一个新的类ChatColorText，对外接口colorText，参数nickName、text。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func colorText(nickName: String?, text: String?) -&gt; NSAttributedString?&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>随机颜色数组。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var colors = [</span><br><span class=\"line\">    UIColor(hex: .RGB00AEFF)!,</span><br><span class=\"line\">    UIColor(hex: .RGB00A61C)!,</span><br><span class=\"line\">    UIColor(hex: .RGB5400E6)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF3377)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF8800)!,</span><br><span class=\"line\">    UIColor(hex: .RGBFF5E00)!,</span><br><span class=\"line\">    UIColor(hex: .RGBCA2EE6)!,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录当前取颜色的<code>Index</code>，使得不同人给不同颜色。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var colorIndex: Int = 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>记录昵称对应的颜色值，保证同一个昵称同一种颜色。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private var dicOfNameAndColor = [String: UIColor]()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对外接口colorText实现。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func colorText(nickName: String?, text: String?) -&gt; NSAttributedString? &#123;</span><br><span class=\"line\">    guard let nickName = nickName, text = text else &#123;return nil&#125;</span><br><span class=\"line\">    let nickNameColor: UIColor = &#123;</span><br><span class=\"line\">        if let color = dicOfNameAndColor[nickName] &#123;</span><br><span class=\"line\">            return color</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            let color = colors[colorIndex]</span><br><span class=\"line\">            dicOfNameAndColor[nickName] = color</span><br><span class=\"line\">            colorIndex = (colorIndex + 1) % colors.count</span><br><span class=\"line\">            return color</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    let attributedString = NSAttributedString.attributedStringWithTextsAndColors([nickName, text], colors: [nickNameColor, UIColor(hex: .RGB333333)!])</span><br><span class=\"line\">    return attributedString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>NSAttributedString.attributedStringWithTextsAndColors</code>是自己扩展的一个方法，传入多串文字和对应的字符返回匹配的<code>NSAttributedString</code>。</p>\n<p>主要逻辑是：先判断是否已经有保存过昵称对应的颜色值，有则直接返回；没有则根据<code>index</code>获取颜色值，然后保存起来，并改变<code>index</code>。</p>\n<h1 id=\"点赞动画\"><a href=\"#点赞动画\" class=\"headerlink\" title=\"点赞动画\"></a>点赞动画</h1><p>iOS自带了粒子引擎的类<code>CAEmitterLayer</code>，是一个粒子发射器系统，每个粒子都是<code>CAEmitterCell</code>的实例。可以查看它们分别有什么属性。</p>\n<p>有两个小点，一个是<code>CAEmitterLayer</code>一些属性对<code>CAEmitterCell</code>有成倍作用，如<code>birthRate</code>；另一个是没有明确的停止动画的方法，包括它的父类也没提供。可以想到的方法，除了把<code>layer</code>抹除掉之外，还可以将<code>CAEmitterLayer</code>的<code>birthRate</code>设置为0，这样每个<code>CAEmitterCell</code>的诞生速率都为0，就不会有动画了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class PraiseEmitterView: UIView &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private var timer: NSTimer?</span><br><span class=\"line\">    private let emitter: CAEmitterLayer! = &#123;</span><br><span class=\"line\">        let emitter = CAEmitterLayer()</span><br><span class=\"line\">        return emitter</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    override init(frame: CGRect) &#123;</span><br><span class=\"line\">        super.init(frame: frame)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class=\"line\">        super.init(coder: aDecoder)</span><br><span class=\"line\">        setup()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private func setup() &#123;</span><br><span class=\"line\">        emitter.frame = bounds</span><br><span class=\"line\">        emitter.birthRate = 0</span><br><span class=\"line\">        emitter.emitterShape = kCAEmitterLayerLine</span><br><span class=\"line\">        emitter.emitterPosition = CGPointMake(0,CGRectGetHeight(bounds))</span><br><span class=\"line\">        emitter.emitterSize = bounds.size</span><br><span class=\"line\">        emitter.emitterCells = [getEmitterCell(UIImage(named: &quot;comment&quot;)!.CGImage!), getEmitterCell(UIImage(named: &quot;flower_15&quot;)!.CGImage!)]</span><br><span class=\"line\">        self.layer.addSublayer(emitter)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func timeoutSelector() &#123;</span><br><span class=\"line\">        emitter.birthRate = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func emit() &#123;</span><br><span class=\"line\">        emitter.birthRate = 2</span><br><span class=\"line\">        timer?.invalidate()</span><br><span class=\"line\">        timer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: #selector(timeoutSelector), userInfo: nil, repeats: false)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private func getEmitterCell(contentImage: CGImage) -&gt; CAEmitterCell &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        let emitterCell = CAEmitterCell()</span><br><span class=\"line\">        emitterCell.contents = contentImage</span><br><span class=\"line\">        emitterCell.lifetime = 2</span><br><span class=\"line\">        emitterCell.birthRate = 2</span><br><span class=\"line\"></span><br><span class=\"line\">        emitterCell.yAcceleration = -70.0</span><br><span class=\"line\">        emitterCell.xAcceleration = 0</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.velocity = 20.0</span><br><span class=\"line\">        emitterCell.velocityRange = 200.0</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.emissionLongitude = CGFloat(0)</span><br><span class=\"line\">        emitterCell.emissionRange = CGFloat(M_PI_4)</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.scale = 0.8</span><br><span class=\"line\">        emitterCell.scaleRange = 0.8</span><br><span class=\"line\">        emitterCell.scaleSpeed = -0.15</span><br><span class=\"line\">        </span><br><span class=\"line\">        emitterCell.alphaRange = 0.75</span><br><span class=\"line\">        emitterCell.alphaSpeed = -0.15</span><br><span class=\"line\"></span><br><span class=\"line\">        return emitterCell</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"手把手教你发布代码到CocoaPods","date":"2016-10-14T08:00:00.000Z","keywords":"CocoaPods","description":"详细介绍了如何发布代码到CocoaPods，以及后续的更新等","_content":"\n# 目录\n- 前言\n- CocoaPods原理\n- 发布与更新自己的pod\n  - 安装CocoaPods\n  - 创建编辑自己的pod\n  - 本地初始化pod并提交到Github\n  - 注册CocoaPods并提交pod\n  - 更新自己的pod\n- 其他命令\n\n# 前言\n\n最近App在整理一些第三方库，包括一些没怎么再维护的替换为自己实现，所以做了一些简单的库上传到CocoaPods方便管理和维护。\n\n\n\n# CocoaPods原理\n\n每种语言发展到一定阶段，就会出现相应的依赖管理工具，例如Node.js的*npm*、Swift的*Swift Package Manager*，早期为iOS提供依赖管理的工具叫做：CocoaPods。\n\n特点：\n\n+ CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程。整个第三方库工程会生成一个库提供给我们使用。\n+ 我们的工程和Pods工程会被以workspace的形式组织和管理，也就是**.xcworkspace*文件。\n\n好处：\n\n+ CocoaPods上有很多好用的库，以此缩短我们的开发周期和提升软件的质量。\n+ CocoaPods会自动将第三方开源库的源码下载下来，并且为工程设置好相应的系统依赖和编译参数。\n+ 通过*Podfile*可以很方便地更新第三方库。\n\n\n\n\n# 发布与更新自己的pod\n\n下面以我提交的库*ZInAppPurchase*为例，讲解下整个过程和遇到的问题。\n\n> 参考官方文档[Making CocoaPods](http://guides.cocoapods.org/making/index.html)\n\n\n\n## 安装CocoaPods\n\nCocoaPods是用Ruby实现的，而Gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem源来查找、安装、升级和卸载软件包。\n\n+ 更新Gem\n\n如果没有翻墙可能会比较慢，可以将原来的源替换成新的。\n```\n// 查看本机当前设置的源\nZackZhengdeMacBook-Pro:~ zack$ gem source -l\n*** CURRENT SOURCES ***\n\nhttps://rubygems.org/\n// 移除掉原有的源\nZackZhengdeMacBook-Pro:~ zack$ gem sources --remove https://rubygems.org/\n// 添加国内的源\nZackZhengdeMacBook-Pro:~ zack$ gem sources -a https://ruby.taobao.org/\n```\n> **淘宝的源已不再维护**，可以使用新的源，参考[RubyGems 镜像 - Ruby China](https://gems.ruby-china.org/)\n\n接下来更新Gem：\n```\nZackZhengdeMacBook-Pro:~ zack$ sudo gem update --system\n```\n\n+ 安装并初始化CocoaPods\n\n```\nZackZhengdeMacBook-Pro:~ zack$ sudo gem install cocoapods --pre\nPassword:\nSuccessfully installed cocoapods-1.1.0.rc.3\nParsing documentation for cocoapods-1.1.0.rc.3\nDone installing documentation for cocoapods after 2 seconds\n1 gem installed\n```\n\n使用  --pre 是为了尽量使用最新的版本，没更新时遇到过`pod lib lint`发生下面错误的情况：\n\n```\nxcodebuild: error: 'App.xcworkspace' does not exist.\n```\n\n初始化：\n\n```\nZackZhengdeMacBook-Pro:~ zack$ pod setup\nSetting up CocoaPods master repo\n  $ /usr/bin/git -C /Users/zack/.cocoapods/repos/master pull --ff-only\n  From https://github.com/CocoaPods/Specs\n     cae692c..3231da7  master     -> origin/master\n  Updating cae692c..3231da7\n  Fast-forward\n  ......\nSetup completed\n```\n\n> 所有项目的Podspec文件都托管在 https://github.com/CocoaPods/Specs 第一次执行 pod setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大。网上有讲解更换repo镜像的方法。\n\n\n\n\n## 创建编辑自己的pod\n\n\n使用`pod lib`的命令。\n\n```\nZackZhengdeMacBook-Pro:~ zack$ pod lib create ZInAppPurchase\nCloning `https://github.com/CocoaPods/pod-template.git` into `ZInAppPurchase`.\nConfiguring ZInAppPurchase template.\n\n------------------------------\n\nTo get you started we need to ask a few questions, this should only take a minute.\n\nIf this is your first time we recommend running through with the guide: \n - http://guides.cocoapods.org/making/using-pod-lib-create.html\n ( hold cmd and double click links to open in a browser. )\n\n\nWhat language do you want to use?? [ Swift / ObjC ]\n > Swift\n\nWould you like to include a demo application with your library? [ Yes / No ]\n > Yes\n\nWhich testing frameworks will you use? [ Quick / None ]\n > None\n\nWould you like to do view based testing? [ Yes / No ]\n > No\n\nRunning pod install on your new library.\n\nAnalyzing dependencies\nFetching podspec for `ZInAppPurchase` from `../`\nDownloading dependencies\nInstalling ZInAppPurchase (0.1.0)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `ZInAppPurchase.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n\n Ace! you're ready to go!\n We will start you off by opening your project in Xcode\n  open 'ZInAppPurchase/Example/ZInAppPurchase.xcworkspace'\n\nTo learn more about the template see `https://github.com/CocoaPods/pod-template.git`.\nTo learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.\n```\n\n修改文件：\n\n/Users/zack/ZInAppPurchase/ZInAppPurchase/Classes/ReplaceMe.swift\n/Users/zack/ZInAppPurchase/ZInAppPurchase.podspec\n\n>  **.podspec*文件主要是修改*s.homepage*、*s.source*、*s.frameworks*。\n\n*ZInAppPurchase.podspec*内容如下：\n\n```\nPod::Spec.new do |s|\n  s.name             = 'ZInAppPurchase'\n  s.version          = '0.1.1'\n  s.summary          = 'A short description of ZInAppPurchase.'\n\n  s.description      = <<-DESC\nTODO: Add long description of the pod here.\n                       DESC\n\n  s.homepage         = 'https://github.com/sapphirezzz/ZInAppPurchase'\n  s.license          = { :type => 'MIT', :file => 'LICENSE' }\n  s.author           = { 'sapphirezzz' => 'zhengzuanzhe@gmail.com' }\n  s.source           = { :git => 'https://github.com/sapphirezzz/ZInAppPurchase.git', :tag => s.version.to_s }\n\n  s.ios.deployment_target = '8.0'\n\n  s.source_files = 'ZInAppPurchase/Classes/**/*'\n  s.frameworks = 'Foundation', 'StoreKit'\nend\n```\n\n安装pod：\n\n```\nZackZhengdeMacBook-Pro:~ zack$ cd ZInAppPurchase/Example/\nZackZhengdeMacBook-Pro:Example zack$ pod install\nAnalyzing dependencies\nFetching podspec for `ZInAppPurchase` from `../`\nDownloading dependencies\nInstalling ZInAppPurchase 0.1.0 (was 0.1.0)\nGenerating Pods project\nIntegrating client project\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n```\n\n> 此时会看到工程目录下多出ZInAppPurchase.xcworkspace、Podfile.lock文件和Pods目录。\n\n\n\n接下来可以打开下面文件编写库：\n\n/Users/zack/ZInAppPurchase/Example/ZInAppPurchase.xcworkspace\n\n\n\n## 本地初始化pod并提交到Github\n\n\n先到Github建立仓库*ZInAppPurchase*，并提交代码：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A && git commit -m \"Release 0.1.0\"\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag '0.1.1'\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git remote add origin git@github.com:sapphirezzz/ZInAppPurchase.git\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push origin master\n```\n\n初始化pod：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod lib lint --allow-warnings\n\n -> ZInAppPurchase (0.1.0)\n    - WARN  | summary: The summary is not meaningful.\n\nZInAppPurchase passed validation.\n```\n\n> 使用*--allow-warnings*是使得有warning时也能验证通过。比如：WARN  | summary: The summary is not meaningful.\n\n\n\n## 注册CocoaPods并提交pod\n\n先注册：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk register zhengzuanzhe@gmail.com 'zackzheng' --description='macbook pro'\n[!] Please verify the session by clicking the link in the verification email that has been sent to zhengzuanzhe@gmail.com\n```\n\n然后打开收到的标题为*[CocoaPods] Confirm your session.*的邮件，点击链接之后跳转页面，会看到：\n\n*You can go back to your terminal now.*\n\n最后就deploy了：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings\nUpdating spec repo `master`\nValidating podspec\n -> ZInAppPurchase (0.1.0)\n    - WARN  | summary: The summary is not meaningful.\n\nUpdating spec repo `master`\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/ae961ca47afb2a9171653382214897c4e160a679/Specs/ZInAppPurchase/0.1.0/ZInAppPurchase.podspec.json\n  - Log messages:\n    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0' initiated.\n    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0' has been pushed\n    (1.423909231 s).\n```\n\n看看库是否已经可以找到：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod search ZInAppPurchase\n-> ZInAppPurchase (0.1.0)\n   A short description of ZInAppPurchase.\n   pod 'ZInAppPurchase', '~> 0.1.0'\n   - Homepage: https://github.com/sapphirezzz/ZInAppPurchase\n   - Source:   https://github.com/sapphirezzz/ZInAppPurchase.git\n   - Versions: 0.1.0 [master repo]\n(END)\n```\n\n> 组合键shift+Q退出\n\n\n\n## 更新自己的pod\n\n\n修改完代码之后，提交到Github并push到CocoaPods：\n\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A && git commit -m \nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag '0.1.1'\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings\nUpdating spec repo `master`\nValidating podspec\n -> ZInAppPurchase (0.1.1)\n    - WARN  | summary: The summary is not meaningful.\n\nUpdating spec repo `master`\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1fba9c650a4212c0b7be707698b8597556f0ece7/Specs/ZInAppPurchase/0.1.1/ZInAppPurchase.podspec.json\n  - Log messages:\n    - October 13th, 12:42: Push for `ZInAppPurchase 0.1.1' initiated.\n    - October 13th, 12:43: Push for `ZInAppPurchase 0.1.1' has been pushed\n    (1.090057228 s).\n```\n\n\n\n# 其他命令\n\n查看CocoaPods上的个人信息：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk me\n  - Name:     Zackzheng\n  - Email:    zhengzuanzhe@gmail.com\n  - Since:    May 30th, 21:28\n  - Pods:\n    - ZInAppPurchase\n    - ZPlaceholderTextView\n    - ZPopTipView\n  - Sessions:\n    - May 30th, 21:28       -        October 6th, 00:10. IP: 14.18.48.167 \n    \n    - September 28th, 02:06 - February 18th, 2017 10:43. IP: 121.33.185.113\n    Description: macbook pro\n    - October 13th, 11:24   - February 18th, 2017 11:31. IP: 183.240.19.242\n    Description: macbook pro\n```\n\n有时候如果提交有问题，可以执行一下命令删除：\n\n// 直接废去这个pod\n\npod trunk deprecate ZInAppPurchase\n\n// 废去这个pod的某个版本\n\npod trunk delete ZInAppPurchase 1.0.0\n\n> 测试过，两个命令使用完都没返回成功，且*pod search*是可以找到的，但实际却是成功的。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-10-14-publish-new-or-updated-libraries-to-CocoaPods.md","raw":"---\ntitle: 手把手教你发布代码到CocoaPods\ndate: 2016-10-14 16:00:00\ntags: \n     - CocoaPods\n     - iOS\ncategories: iOS\nkeywords: CocoaPods\ndescription: 详细介绍了如何发布代码到CocoaPods，以及后续的更新等\n---\n\n# 目录\n- 前言\n- CocoaPods原理\n- 发布与更新自己的pod\n  - 安装CocoaPods\n  - 创建编辑自己的pod\n  - 本地初始化pod并提交到Github\n  - 注册CocoaPods并提交pod\n  - 更新自己的pod\n- 其他命令\n\n# 前言\n\n最近App在整理一些第三方库，包括一些没怎么再维护的替换为自己实现，所以做了一些简单的库上传到CocoaPods方便管理和维护。\n\n\n\n# CocoaPods原理\n\n每种语言发展到一定阶段，就会出现相应的依赖管理工具，例如Node.js的*npm*、Swift的*Swift Package Manager*，早期为iOS提供依赖管理的工具叫做：CocoaPods。\n\n特点：\n\n+ CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程。整个第三方库工程会生成一个库提供给我们使用。\n+ 我们的工程和Pods工程会被以workspace的形式组织和管理，也就是**.xcworkspace*文件。\n\n好处：\n\n+ CocoaPods上有很多好用的库，以此缩短我们的开发周期和提升软件的质量。\n+ CocoaPods会自动将第三方开源库的源码下载下来，并且为工程设置好相应的系统依赖和编译参数。\n+ 通过*Podfile*可以很方便地更新第三方库。\n\n\n\n\n# 发布与更新自己的pod\n\n下面以我提交的库*ZInAppPurchase*为例，讲解下整个过程和遇到的问题。\n\n> 参考官方文档[Making CocoaPods](http://guides.cocoapods.org/making/index.html)\n\n\n\n## 安装CocoaPods\n\nCocoaPods是用Ruby实现的，而Gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem源来查找、安装、升级和卸载软件包。\n\n+ 更新Gem\n\n如果没有翻墙可能会比较慢，可以将原来的源替换成新的。\n```\n// 查看本机当前设置的源\nZackZhengdeMacBook-Pro:~ zack$ gem source -l\n*** CURRENT SOURCES ***\n\nhttps://rubygems.org/\n// 移除掉原有的源\nZackZhengdeMacBook-Pro:~ zack$ gem sources --remove https://rubygems.org/\n// 添加国内的源\nZackZhengdeMacBook-Pro:~ zack$ gem sources -a https://ruby.taobao.org/\n```\n> **淘宝的源已不再维护**，可以使用新的源，参考[RubyGems 镜像 - Ruby China](https://gems.ruby-china.org/)\n\n接下来更新Gem：\n```\nZackZhengdeMacBook-Pro:~ zack$ sudo gem update --system\n```\n\n+ 安装并初始化CocoaPods\n\n```\nZackZhengdeMacBook-Pro:~ zack$ sudo gem install cocoapods --pre\nPassword:\nSuccessfully installed cocoapods-1.1.0.rc.3\nParsing documentation for cocoapods-1.1.0.rc.3\nDone installing documentation for cocoapods after 2 seconds\n1 gem installed\n```\n\n使用  --pre 是为了尽量使用最新的版本，没更新时遇到过`pod lib lint`发生下面错误的情况：\n\n```\nxcodebuild: error: 'App.xcworkspace' does not exist.\n```\n\n初始化：\n\n```\nZackZhengdeMacBook-Pro:~ zack$ pod setup\nSetting up CocoaPods master repo\n  $ /usr/bin/git -C /Users/zack/.cocoapods/repos/master pull --ff-only\n  From https://github.com/CocoaPods/Specs\n     cae692c..3231da7  master     -> origin/master\n  Updating cae692c..3231da7\n  Fast-forward\n  ......\nSetup completed\n```\n\n> 所有项目的Podspec文件都托管在 https://github.com/CocoaPods/Specs 第一次执行 pod setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大。网上有讲解更换repo镜像的方法。\n\n\n\n\n## 创建编辑自己的pod\n\n\n使用`pod lib`的命令。\n\n```\nZackZhengdeMacBook-Pro:~ zack$ pod lib create ZInAppPurchase\nCloning `https://github.com/CocoaPods/pod-template.git` into `ZInAppPurchase`.\nConfiguring ZInAppPurchase template.\n\n------------------------------\n\nTo get you started we need to ask a few questions, this should only take a minute.\n\nIf this is your first time we recommend running through with the guide: \n - http://guides.cocoapods.org/making/using-pod-lib-create.html\n ( hold cmd and double click links to open in a browser. )\n\n\nWhat language do you want to use?? [ Swift / ObjC ]\n > Swift\n\nWould you like to include a demo application with your library? [ Yes / No ]\n > Yes\n\nWhich testing frameworks will you use? [ Quick / None ]\n > None\n\nWould you like to do view based testing? [ Yes / No ]\n > No\n\nRunning pod install on your new library.\n\nAnalyzing dependencies\nFetching podspec for `ZInAppPurchase` from `../`\nDownloading dependencies\nInstalling ZInAppPurchase (0.1.0)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `ZInAppPurchase.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n\n Ace! you're ready to go!\n We will start you off by opening your project in Xcode\n  open 'ZInAppPurchase/Example/ZInAppPurchase.xcworkspace'\n\nTo learn more about the template see `https://github.com/CocoaPods/pod-template.git`.\nTo learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.\n```\n\n修改文件：\n\n/Users/zack/ZInAppPurchase/ZInAppPurchase/Classes/ReplaceMe.swift\n/Users/zack/ZInAppPurchase/ZInAppPurchase.podspec\n\n>  **.podspec*文件主要是修改*s.homepage*、*s.source*、*s.frameworks*。\n\n*ZInAppPurchase.podspec*内容如下：\n\n```\nPod::Spec.new do |s|\n  s.name             = 'ZInAppPurchase'\n  s.version          = '0.1.1'\n  s.summary          = 'A short description of ZInAppPurchase.'\n\n  s.description      = <<-DESC\nTODO: Add long description of the pod here.\n                       DESC\n\n  s.homepage         = 'https://github.com/sapphirezzz/ZInAppPurchase'\n  s.license          = { :type => 'MIT', :file => 'LICENSE' }\n  s.author           = { 'sapphirezzz' => 'zhengzuanzhe@gmail.com' }\n  s.source           = { :git => 'https://github.com/sapphirezzz/ZInAppPurchase.git', :tag => s.version.to_s }\n\n  s.ios.deployment_target = '8.0'\n\n  s.source_files = 'ZInAppPurchase/Classes/**/*'\n  s.frameworks = 'Foundation', 'StoreKit'\nend\n```\n\n安装pod：\n\n```\nZackZhengdeMacBook-Pro:~ zack$ cd ZInAppPurchase/Example/\nZackZhengdeMacBook-Pro:Example zack$ pod install\nAnalyzing dependencies\nFetching podspec for `ZInAppPurchase` from `../`\nDownloading dependencies\nInstalling ZInAppPurchase 0.1.0 (was 0.1.0)\nGenerating Pods project\nIntegrating client project\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n```\n\n> 此时会看到工程目录下多出ZInAppPurchase.xcworkspace、Podfile.lock文件和Pods目录。\n\n\n\n接下来可以打开下面文件编写库：\n\n/Users/zack/ZInAppPurchase/Example/ZInAppPurchase.xcworkspace\n\n\n\n## 本地初始化pod并提交到Github\n\n\n先到Github建立仓库*ZInAppPurchase*，并提交代码：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A && git commit -m \"Release 0.1.0\"\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag '0.1.1'\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git remote add origin git@github.com:sapphirezzz/ZInAppPurchase.git\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push origin master\n```\n\n初始化pod：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod lib lint --allow-warnings\n\n -> ZInAppPurchase (0.1.0)\n    - WARN  | summary: The summary is not meaningful.\n\nZInAppPurchase passed validation.\n```\n\n> 使用*--allow-warnings*是使得有warning时也能验证通过。比如：WARN  | summary: The summary is not meaningful.\n\n\n\n## 注册CocoaPods并提交pod\n\n先注册：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk register zhengzuanzhe@gmail.com 'zackzheng' --description='macbook pro'\n[!] Please verify the session by clicking the link in the verification email that has been sent to zhengzuanzhe@gmail.com\n```\n\n然后打开收到的标题为*[CocoaPods] Confirm your session.*的邮件，点击链接之后跳转页面，会看到：\n\n*You can go back to your terminal now.*\n\n最后就deploy了：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings\nUpdating spec repo `master`\nValidating podspec\n -> ZInAppPurchase (0.1.0)\n    - WARN  | summary: The summary is not meaningful.\n\nUpdating spec repo `master`\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/ae961ca47afb2a9171653382214897c4e160a679/Specs/ZInAppPurchase/0.1.0/ZInAppPurchase.podspec.json\n  - Log messages:\n    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0' initiated.\n    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0' has been pushed\n    (1.423909231 s).\n```\n\n看看库是否已经可以找到：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod search ZInAppPurchase\n-> ZInAppPurchase (0.1.0)\n   A short description of ZInAppPurchase.\n   pod 'ZInAppPurchase', '~> 0.1.0'\n   - Homepage: https://github.com/sapphirezzz/ZInAppPurchase\n   - Source:   https://github.com/sapphirezzz/ZInAppPurchase.git\n   - Versions: 0.1.0 [master repo]\n(END)\n```\n\n> 组合键shift+Q退出\n\n\n\n## 更新自己的pod\n\n\n修改完代码之后，提交到Github并push到CocoaPods：\n\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A && git commit -m \nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag '0.1.1'\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings\nUpdating spec repo `master`\nValidating podspec\n -> ZInAppPurchase (0.1.1)\n    - WARN  | summary: The summary is not meaningful.\n\nUpdating spec repo `master`\n  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1fba9c650a4212c0b7be707698b8597556f0ece7/Specs/ZInAppPurchase/0.1.1/ZInAppPurchase.podspec.json\n  - Log messages:\n    - October 13th, 12:42: Push for `ZInAppPurchase 0.1.1' initiated.\n    - October 13th, 12:43: Push for `ZInAppPurchase 0.1.1' has been pushed\n    (1.090057228 s).\n```\n\n\n\n# 其他命令\n\n查看CocoaPods上的个人信息：\n\n```\nZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk me\n  - Name:     Zackzheng\n  - Email:    zhengzuanzhe@gmail.com\n  - Since:    May 30th, 21:28\n  - Pods:\n    - ZInAppPurchase\n    - ZPlaceholderTextView\n    - ZPopTipView\n  - Sessions:\n    - May 30th, 21:28       -        October 6th, 00:10. IP: 14.18.48.167 \n    \n    - September 28th, 02:06 - February 18th, 2017 10:43. IP: 121.33.185.113\n    Description: macbook pro\n    - October 13th, 11:24   - February 18th, 2017 11:31. IP: 183.240.19.242\n    Description: macbook pro\n```\n\n有时候如果提交有问题，可以执行一下命令删除：\n\n// 直接废去这个pod\n\npod trunk deprecate ZInAppPurchase\n\n// 废去这个pod的某个版本\n\npod trunk delete ZInAppPurchase 1.0.0\n\n> 测试过，两个命令使用完都没返回成功，且*pod search*是可以找到的，但实际却是成功的。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"publish-new-or-updated-libraries-to-CocoaPods","published":1,"updated":"2020-02-25T15:23:08.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q5002n07ei6qcnsora","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>CocoaPods原理</li>\n<li>发布与更新自己的pod<ul>\n<li>安装CocoaPods</li>\n<li>创建编辑自己的pod</li>\n<li>本地初始化pod并提交到Github</li>\n<li>注册CocoaPods并提交pod</li>\n<li>更新自己的pod</li>\n</ul>\n</li>\n<li>其他命令</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近App在整理一些第三方库，包括一些没怎么再维护的替换为自己实现，所以做了一些简单的库上传到CocoaPods方便管理和维护。</p>\n<h1 id=\"CocoaPods原理\"><a href=\"#CocoaPods原理\" class=\"headerlink\" title=\"CocoaPods原理\"></a>CocoaPods原理</h1><p>每种语言发展到一定阶段，就会出现相应的依赖管理工具，例如Node.js的<em>npm</em>、Swift的<em>Swift Package Manager</em>，早期为iOS提供依赖管理的工具叫做：CocoaPods。</p>\n<p>特点：</p>\n<ul>\n<li>CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程。整个第三方库工程会生成一个库提供给我们使用。</li>\n<li>我们的工程和Pods工程会被以workspace的形式组织和管理，也就是*<em>.xcworkspace</em>文件。</li>\n</ul>\n<p>好处：</p>\n<ul>\n<li>CocoaPods上有很多好用的库，以此缩短我们的开发周期和提升软件的质量。</li>\n<li>CocoaPods会自动将第三方开源库的源码下载下来，并且为工程设置好相应的系统依赖和编译参数。</li>\n<li>通过<em>Podfile</em>可以很方便地更新第三方库。</li>\n</ul>\n<h1 id=\"发布与更新自己的pod\"><a href=\"#发布与更新自己的pod\" class=\"headerlink\" title=\"发布与更新自己的pod\"></a>发布与更新自己的pod</h1><p>下面以我提交的库<em>ZInAppPurchase</em>为例，讲解下整个过程和遇到的问题。</p>\n<blockquote>\n<p>参考官方文档<a href=\"http://guides.cocoapods.org/making/index.html\" target=\"_blank\" rel=\"noopener\">Making CocoaPods</a></p>\n</blockquote>\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p>CocoaPods是用Ruby实现的，而Gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem源来查找、安装、升级和卸载软件包。</p>\n<ul>\n<li>更新Gem</li>\n</ul>\n<p>如果没有翻墙可能会比较慢，可以将原来的源替换成新的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看本机当前设置的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem source -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://rubygems.org/</span><br><span class=\"line\">// 移除掉原有的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">// 添加国内的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>淘宝的源已不再维护</strong>，可以使用新的源，参考<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">RubyGems 镜像 - Ruby China</a></p>\n</blockquote>\n<p>接下来更新Gem：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ sudo gem update --system</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装并初始化CocoaPods</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ sudo gem install cocoapods --pre</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Successfully installed cocoapods-1.1.0.rc.3</span><br><span class=\"line\">Parsing documentation for cocoapods-1.1.0.rc.3</span><br><span class=\"line\">Done installing documentation for cocoapods after 2 seconds</span><br><span class=\"line\">1 gem installed</span><br></pre></td></tr></table></figure>\n\n<p>使用  –pre 是为了尽量使用最新的版本，没更新时遇到过<code>pod lib lint</code>发生下面错误的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild: error: &apos;App.xcworkspace&apos; does not exist.</span><br></pre></td></tr></table></figure>\n\n<p>初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ pod setup</span><br><span class=\"line\">Setting up CocoaPods master repo</span><br><span class=\"line\">  $ /usr/bin/git -C /Users/zack/.cocoapods/repos/master pull --ff-only</span><br><span class=\"line\">  From https://github.com/CocoaPods/Specs</span><br><span class=\"line\">     cae692c..3231da7  master     -&gt; origin/master</span><br><span class=\"line\">  Updating cae692c..3231da7</span><br><span class=\"line\">  Fast-forward</span><br><span class=\"line\">  ......</span><br><span class=\"line\">Setup completed</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>所有项目的Podspec文件都托管在 <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 第一次执行 pod setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大。网上有讲解更换repo镜像的方法。</p>\n</blockquote>\n<h2 id=\"创建编辑自己的pod\"><a href=\"#创建编辑自己的pod\" class=\"headerlink\" title=\"创建编辑自己的pod\"></a>创建编辑自己的pod</h2><p>使用<code>pod lib</code>的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ pod lib create ZInAppPurchase</span><br><span class=\"line\">Cloning `https://github.com/CocoaPods/pod-template.git` into `ZInAppPurchase`.</span><br><span class=\"line\">Configuring ZInAppPurchase template.</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">To get you started we need to ask a few questions, this should only take a minute.</span><br><span class=\"line\"></span><br><span class=\"line\">If this is your first time we recommend running through with the guide: </span><br><span class=\"line\"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</span><br><span class=\"line\"> ( hold cmd and double click links to open in a browser. )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">What language do you want to use?? [ Swift / ObjC ]</span><br><span class=\"line\"> &gt; Swift</span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to include a demo application with your library? [ Yes / No ]</span><br><span class=\"line\"> &gt; Yes</span><br><span class=\"line\"></span><br><span class=\"line\">Which testing frameworks will you use? [ Quick / None ]</span><br><span class=\"line\"> &gt; None</span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to do view based testing? [ Yes / No ]</span><br><span class=\"line\"> &gt; No</span><br><span class=\"line\"></span><br><span class=\"line\">Running pod install on your new library.</span><br><span class=\"line\"></span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Fetching podspec for `ZInAppPurchase` from `../`</span><br><span class=\"line\">Downloading dependencies</span><br><span class=\"line\">Installing ZInAppPurchase (0.1.0)</span><br><span class=\"line\">Generating Pods project</span><br><span class=\"line\">Integrating client project</span><br><span class=\"line\"></span><br><span class=\"line\">[!] Please close any current Xcode sessions and use `ZInAppPurchase.xcworkspace` for this project from now on.</span><br><span class=\"line\">Sending stats</span><br><span class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</span><br><span class=\"line\"></span><br><span class=\"line\"> Ace! you&apos;re ready to go!</span><br><span class=\"line\"> We will start you off by opening your project in Xcode</span><br><span class=\"line\">  open &apos;ZInAppPurchase/Example/ZInAppPurchase.xcworkspace&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</span><br><span class=\"line\">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</span><br></pre></td></tr></table></figure>\n\n<p>修改文件：</p>\n<p>/Users/zack/ZInAppPurchase/ZInAppPurchase/Classes/ReplaceMe.swift<br>/Users/zack/ZInAppPurchase/ZInAppPurchase.podspec</p>\n<blockquote>\n<p> *<em>.podspec</em>文件主要是修改<em>s.homepage</em>、<em>s.source</em>、<em>s.frameworks</em>。</p>\n</blockquote>\n<p><em>ZInAppPurchase.podspec</em>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">  s.name             = &apos;ZInAppPurchase&apos;</span><br><span class=\"line\">  s.version          = &apos;0.1.1&apos;</span><br><span class=\"line\">  s.summary          = &apos;A short description of ZInAppPurchase.&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.description      = &lt;&lt;-DESC</span><br><span class=\"line\">TODO: Add long description of the pod here.</span><br><span class=\"line\">                       DESC</span><br><span class=\"line\"></span><br><span class=\"line\">  s.homepage         = &apos;https://github.com/sapphirezzz/ZInAppPurchase&apos;</span><br><span class=\"line\">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</span><br><span class=\"line\">  s.author           = &#123; &apos;sapphirezzz&apos; =&gt; &apos;zhengzuanzhe@gmail.com&apos; &#125;</span><br><span class=\"line\">  s.source           = &#123; :git =&gt; &apos;https://github.com/sapphirezzz/ZInAppPurchase.git&apos;, :tag =&gt; s.version.to_s &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.ios.deployment_target = &apos;8.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.source_files = &apos;ZInAppPurchase/Classes/**/*&apos;</span><br><span class=\"line\">  s.frameworks = &apos;Foundation&apos;, &apos;StoreKit&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>安装pod：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ cd ZInAppPurchase/Example/</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:Example zack$ pod install</span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Fetching podspec for `ZInAppPurchase` from `../`</span><br><span class=\"line\">Downloading dependencies</span><br><span class=\"line\">Installing ZInAppPurchase 0.1.0 (was 0.1.0)</span><br><span class=\"line\">Generating Pods project</span><br><span class=\"line\">Integrating client project</span><br><span class=\"line\">Sending stats</span><br><span class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时会看到工程目录下多出ZInAppPurchase.xcworkspace、Podfile.lock文件和Pods目录。</p>\n</blockquote>\n<p>接下来可以打开下面文件编写库：</p>\n<p>/Users/zack/ZInAppPurchase/Example/ZInAppPurchase.xcworkspace</p>\n<h2 id=\"本地初始化pod并提交到Github\"><a href=\"#本地初始化pod并提交到Github\" class=\"headerlink\" title=\"本地初始化pod并提交到Github\"></a>本地初始化pod并提交到Github</h2><p>先到Github建立仓库<em>ZInAppPurchase</em>，并提交代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A &amp;&amp; git commit -m &quot;Release 0.1.0&quot;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag &apos;0.1.1&apos;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git remote add origin git@github.com:sapphirezzz/ZInAppPurchase.git</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>初始化pod：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod lib lint --allow-warnings</span><br><span class=\"line\"></span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">ZInAppPurchase passed validation.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用<em>–allow-warnings</em>是使得有warning时也能验证通过。比如：WARN  | summary: The summary is not meaningful.</p>\n</blockquote>\n<h2 id=\"注册CocoaPods并提交pod\"><a href=\"#注册CocoaPods并提交pod\" class=\"headerlink\" title=\"注册CocoaPods并提交pod\"></a>注册CocoaPods并提交pod</h2><p>先注册：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk register zhengzuanzhe@gmail.com &apos;zackzheng&apos; --description=&apos;macbook pro&apos;</span><br><span class=\"line\">[!] Please verify the session by clicking the link in the verification email that has been sent to zhengzuanzhe@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>然后打开收到的标题为*[CocoaPods] Confirm your session.*的邮件，点击链接之后跳转页面，会看到：</p>\n<p><em>You can go back to your terminal now.</em></p>\n<p>最后就deploy了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings</span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/ae961ca47afb2a9171653382214897c4e160a679/Specs/ZInAppPurchase/0.1.0/ZInAppPurchase.podspec.json</span><br><span class=\"line\">  - Log messages:</span><br><span class=\"line\">    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0&apos; initiated.</span><br><span class=\"line\">    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0&apos; has been pushed</span><br><span class=\"line\">    (1.423909231 s).</span><br></pre></td></tr></table></figure>\n\n<p>看看库是否已经可以找到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod search ZInAppPurchase</span><br><span class=\"line\">-&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">   A short description of ZInAppPurchase.</span><br><span class=\"line\">   pod &apos;ZInAppPurchase&apos;, &apos;~&gt; 0.1.0&apos;</span><br><span class=\"line\">   - Homepage: https://github.com/sapphirezzz/ZInAppPurchase</span><br><span class=\"line\">   - Source:   https://github.com/sapphirezzz/ZInAppPurchase.git</span><br><span class=\"line\">   - Versions: 0.1.0 [master repo]</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组合键shift+Q退出</p>\n</blockquote>\n<h2 id=\"更新自己的pod\"><a href=\"#更新自己的pod\" class=\"headerlink\" title=\"更新自己的pod\"></a>更新自己的pod</h2><p>修改完代码之后，提交到Github并push到CocoaPods：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A &amp;&amp; git commit -m </span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag &apos;0.1.1&apos;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings</span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.1)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1fba9c650a4212c0b7be707698b8597556f0ece7/Specs/ZInAppPurchase/0.1.1/ZInAppPurchase.podspec.json</span><br><span class=\"line\">  - Log messages:</span><br><span class=\"line\">    - October 13th, 12:42: Push for `ZInAppPurchase 0.1.1&apos; initiated.</span><br><span class=\"line\">    - October 13th, 12:43: Push for `ZInAppPurchase 0.1.1&apos; has been pushed</span><br><span class=\"line\">    (1.090057228 s).</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><p>查看CocoaPods上的个人信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk me</span><br><span class=\"line\">  - Name:     Zackzheng</span><br><span class=\"line\">  - Email:    zhengzuanzhe@gmail.com</span><br><span class=\"line\">  - Since:    May 30th, 21:28</span><br><span class=\"line\">  - Pods:</span><br><span class=\"line\">    - ZInAppPurchase</span><br><span class=\"line\">    - ZPlaceholderTextView</span><br><span class=\"line\">    - ZPopTipView</span><br><span class=\"line\">  - Sessions:</span><br><span class=\"line\">    - May 30th, 21:28       -        October 6th, 00:10. IP: 14.18.48.167 </span><br><span class=\"line\">    </span><br><span class=\"line\">    - September 28th, 02:06 - February 18th, 2017 10:43. IP: 121.33.185.113</span><br><span class=\"line\">    Description: macbook pro</span><br><span class=\"line\">    - October 13th, 11:24   - February 18th, 2017 11:31. IP: 183.240.19.242</span><br><span class=\"line\">    Description: macbook pro</span><br></pre></td></tr></table></figure>\n\n<p>有时候如果提交有问题，可以执行一下命令删除：</p>\n<p>// 直接废去这个pod</p>\n<p>pod trunk deprecate ZInAppPurchase</p>\n<p>// 废去这个pod的某个版本</p>\n<p>pod trunk delete ZInAppPurchase 1.0.0</p>\n<blockquote>\n<p>测试过，两个命令使用完都没返回成功，且<em>pod search</em>是可以找到的，但实际却是成功的。</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>CocoaPods原理</li>\n<li>发布与更新自己的pod<ul>\n<li>安装CocoaPods</li>\n<li>创建编辑自己的pod</li>\n<li>本地初始化pod并提交到Github</li>\n<li>注册CocoaPods并提交pod</li>\n<li>更新自己的pod</li>\n</ul>\n</li>\n<li>其他命令</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近App在整理一些第三方库，包括一些没怎么再维护的替换为自己实现，所以做了一些简单的库上传到CocoaPods方便管理和维护。</p>\n<h1 id=\"CocoaPods原理\"><a href=\"#CocoaPods原理\" class=\"headerlink\" title=\"CocoaPods原理\"></a>CocoaPods原理</h1><p>每种语言发展到一定阶段，就会出现相应的依赖管理工具，例如Node.js的<em>npm</em>、Swift的<em>Swift Package Manager</em>，早期为iOS提供依赖管理的工具叫做：CocoaPods。</p>\n<p>特点：</p>\n<ul>\n<li>CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程。整个第三方库工程会生成一个库提供给我们使用。</li>\n<li>我们的工程和Pods工程会被以workspace的形式组织和管理，也就是*<em>.xcworkspace</em>文件。</li>\n</ul>\n<p>好处：</p>\n<ul>\n<li>CocoaPods上有很多好用的库，以此缩短我们的开发周期和提升软件的质量。</li>\n<li>CocoaPods会自动将第三方开源库的源码下载下来，并且为工程设置好相应的系统依赖和编译参数。</li>\n<li>通过<em>Podfile</em>可以很方便地更新第三方库。</li>\n</ul>\n<h1 id=\"发布与更新自己的pod\"><a href=\"#发布与更新自己的pod\" class=\"headerlink\" title=\"发布与更新自己的pod\"></a>发布与更新自己的pod</h1><p>下面以我提交的库<em>ZInAppPurchase</em>为例，讲解下整个过程和遇到的问题。</p>\n<blockquote>\n<p>参考官方文档<a href=\"http://guides.cocoapods.org/making/index.html\" target=\"_blank\" rel=\"noopener\">Making CocoaPods</a></p>\n</blockquote>\n<h2 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods\"></a>安装CocoaPods</h2><p>CocoaPods是用Ruby实现的，而Gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem源来查找、安装、升级和卸载软件包。</p>\n<ul>\n<li>更新Gem</li>\n</ul>\n<p>如果没有翻墙可能会比较慢，可以将原来的源替换成新的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看本机当前设置的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem source -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://rubygems.org/</span><br><span class=\"line\">// 移除掉原有的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">// 添加国内的源</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>淘宝的源已不再维护</strong>，可以使用新的源，参考<a href=\"https://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">RubyGems 镜像 - Ruby China</a></p>\n</blockquote>\n<p>接下来更新Gem：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ sudo gem update --system</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装并初始化CocoaPods</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ sudo gem install cocoapods --pre</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Successfully installed cocoapods-1.1.0.rc.3</span><br><span class=\"line\">Parsing documentation for cocoapods-1.1.0.rc.3</span><br><span class=\"line\">Done installing documentation for cocoapods after 2 seconds</span><br><span class=\"line\">1 gem installed</span><br></pre></td></tr></table></figure>\n\n<p>使用  –pre 是为了尽量使用最新的版本，没更新时遇到过<code>pod lib lint</code>发生下面错误的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild: error: &apos;App.xcworkspace&apos; does not exist.</span><br></pre></td></tr></table></figure>\n\n<p>初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ pod setup</span><br><span class=\"line\">Setting up CocoaPods master repo</span><br><span class=\"line\">  $ /usr/bin/git -C /Users/zack/.cocoapods/repos/master pull --ff-only</span><br><span class=\"line\">  From https://github.com/CocoaPods/Specs</span><br><span class=\"line\">     cae692c..3231da7  master     -&gt; origin/master</span><br><span class=\"line\">  Updating cae692c..3231da7</span><br><span class=\"line\">  Fast-forward</span><br><span class=\"line\">  ......</span><br><span class=\"line\">Setup completed</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>所有项目的Podspec文件都托管在 <a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs</a> 第一次执行 pod setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大。网上有讲解更换repo镜像的方法。</p>\n</blockquote>\n<h2 id=\"创建编辑自己的pod\"><a href=\"#创建编辑自己的pod\" class=\"headerlink\" title=\"创建编辑自己的pod\"></a>创建编辑自己的pod</h2><p>使用<code>pod lib</code>的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ pod lib create ZInAppPurchase</span><br><span class=\"line\">Cloning `https://github.com/CocoaPods/pod-template.git` into `ZInAppPurchase`.</span><br><span class=\"line\">Configuring ZInAppPurchase template.</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">To get you started we need to ask a few questions, this should only take a minute.</span><br><span class=\"line\"></span><br><span class=\"line\">If this is your first time we recommend running through with the guide: </span><br><span class=\"line\"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</span><br><span class=\"line\"> ( hold cmd and double click links to open in a browser. )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">What language do you want to use?? [ Swift / ObjC ]</span><br><span class=\"line\"> &gt; Swift</span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to include a demo application with your library? [ Yes / No ]</span><br><span class=\"line\"> &gt; Yes</span><br><span class=\"line\"></span><br><span class=\"line\">Which testing frameworks will you use? [ Quick / None ]</span><br><span class=\"line\"> &gt; None</span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to do view based testing? [ Yes / No ]</span><br><span class=\"line\"> &gt; No</span><br><span class=\"line\"></span><br><span class=\"line\">Running pod install on your new library.</span><br><span class=\"line\"></span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Fetching podspec for `ZInAppPurchase` from `../`</span><br><span class=\"line\">Downloading dependencies</span><br><span class=\"line\">Installing ZInAppPurchase (0.1.0)</span><br><span class=\"line\">Generating Pods project</span><br><span class=\"line\">Integrating client project</span><br><span class=\"line\"></span><br><span class=\"line\">[!] Please close any current Xcode sessions and use `ZInAppPurchase.xcworkspace` for this project from now on.</span><br><span class=\"line\">Sending stats</span><br><span class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</span><br><span class=\"line\"></span><br><span class=\"line\"> Ace! you&apos;re ready to go!</span><br><span class=\"line\"> We will start you off by opening your project in Xcode</span><br><span class=\"line\">  open &apos;ZInAppPurchase/Example/ZInAppPurchase.xcworkspace&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</span><br><span class=\"line\">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</span><br></pre></td></tr></table></figure>\n\n<p>修改文件：</p>\n<p>/Users/zack/ZInAppPurchase/ZInAppPurchase/Classes/ReplaceMe.swift<br>/Users/zack/ZInAppPurchase/ZInAppPurchase.podspec</p>\n<blockquote>\n<p> *<em>.podspec</em>文件主要是修改<em>s.homepage</em>、<em>s.source</em>、<em>s.frameworks</em>。</p>\n</blockquote>\n<p><em>ZInAppPurchase.podspec</em>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">  s.name             = &apos;ZInAppPurchase&apos;</span><br><span class=\"line\">  s.version          = &apos;0.1.1&apos;</span><br><span class=\"line\">  s.summary          = &apos;A short description of ZInAppPurchase.&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.description      = &lt;&lt;-DESC</span><br><span class=\"line\">TODO: Add long description of the pod here.</span><br><span class=\"line\">                       DESC</span><br><span class=\"line\"></span><br><span class=\"line\">  s.homepage         = &apos;https://github.com/sapphirezzz/ZInAppPurchase&apos;</span><br><span class=\"line\">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</span><br><span class=\"line\">  s.author           = &#123; &apos;sapphirezzz&apos; =&gt; &apos;zhengzuanzhe@gmail.com&apos; &#125;</span><br><span class=\"line\">  s.source           = &#123; :git =&gt; &apos;https://github.com/sapphirezzz/ZInAppPurchase.git&apos;, :tag =&gt; s.version.to_s &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.ios.deployment_target = &apos;8.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.source_files = &apos;ZInAppPurchase/Classes/**/*&apos;</span><br><span class=\"line\">  s.frameworks = &apos;Foundation&apos;, &apos;StoreKit&apos;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>安装pod：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:~ zack$ cd ZInAppPurchase/Example/</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:Example zack$ pod install</span><br><span class=\"line\">Analyzing dependencies</span><br><span class=\"line\">Fetching podspec for `ZInAppPurchase` from `../`</span><br><span class=\"line\">Downloading dependencies</span><br><span class=\"line\">Installing ZInAppPurchase 0.1.0 (was 0.1.0)</span><br><span class=\"line\">Generating Pods project</span><br><span class=\"line\">Integrating client project</span><br><span class=\"line\">Sending stats</span><br><span class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时会看到工程目录下多出ZInAppPurchase.xcworkspace、Podfile.lock文件和Pods目录。</p>\n</blockquote>\n<p>接下来可以打开下面文件编写库：</p>\n<p>/Users/zack/ZInAppPurchase/Example/ZInAppPurchase.xcworkspace</p>\n<h2 id=\"本地初始化pod并提交到Github\"><a href=\"#本地初始化pod并提交到Github\" class=\"headerlink\" title=\"本地初始化pod并提交到Github\"></a>本地初始化pod并提交到Github</h2><p>先到Github建立仓库<em>ZInAppPurchase</em>，并提交代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A &amp;&amp; git commit -m &quot;Release 0.1.0&quot;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag &apos;0.1.1&apos;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git remote add origin git@github.com:sapphirezzz/ZInAppPurchase.git</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>初始化pod：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod lib lint --allow-warnings</span><br><span class=\"line\"></span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">ZInAppPurchase passed validation.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用<em>–allow-warnings</em>是使得有warning时也能验证通过。比如：WARN  | summary: The summary is not meaningful.</p>\n</blockquote>\n<h2 id=\"注册CocoaPods并提交pod\"><a href=\"#注册CocoaPods并提交pod\" class=\"headerlink\" title=\"注册CocoaPods并提交pod\"></a>注册CocoaPods并提交pod</h2><p>先注册：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk register zhengzuanzhe@gmail.com &apos;zackzheng&apos; --description=&apos;macbook pro&apos;</span><br><span class=\"line\">[!] Please verify the session by clicking the link in the verification email that has been sent to zhengzuanzhe@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>然后打开收到的标题为*[CocoaPods] Confirm your session.*的邮件，点击链接之后跳转页面，会看到：</p>\n<p><em>You can go back to your terminal now.</em></p>\n<p>最后就deploy了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings</span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/ae961ca47afb2a9171653382214897c4e160a679/Specs/ZInAppPurchase/0.1.0/ZInAppPurchase.podspec.json</span><br><span class=\"line\">  - Log messages:</span><br><span class=\"line\">    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0&apos; initiated.</span><br><span class=\"line\">    - October 13th, 11:28: Push for `ZInAppPurchase 0.1.0&apos; has been pushed</span><br><span class=\"line\">    (1.423909231 s).</span><br></pre></td></tr></table></figure>\n\n<p>看看库是否已经可以找到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod search ZInAppPurchase</span><br><span class=\"line\">-&gt; ZInAppPurchase (0.1.0)</span><br><span class=\"line\">   A short description of ZInAppPurchase.</span><br><span class=\"line\">   pod &apos;ZInAppPurchase&apos;, &apos;~&gt; 0.1.0&apos;</span><br><span class=\"line\">   - Homepage: https://github.com/sapphirezzz/ZInAppPurchase</span><br><span class=\"line\">   - Source:   https://github.com/sapphirezzz/ZInAppPurchase.git</span><br><span class=\"line\">   - Versions: 0.1.0 [master repo]</span><br><span class=\"line\">(END)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组合键shift+Q退出</p>\n</blockquote>\n<h2 id=\"更新自己的pod\"><a href=\"#更新自己的pod\" class=\"headerlink\" title=\"更新自己的pod\"></a>更新自己的pod</h2><p>修改完代码之后，提交到Github并push到CocoaPods：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git add -A &amp;&amp; git commit -m </span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git tag &apos;0.1.1&apos;</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ git push --tags</span><br><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk push ZInAppPurchase.podspec --allow-warnings</span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">Validating podspec</span><br><span class=\"line\"> -&gt; ZInAppPurchase (0.1.1)</span><br><span class=\"line\">    - WARN  | summary: The summary is not meaningful.</span><br><span class=\"line\"></span><br><span class=\"line\">Updating spec repo `master`</span><br><span class=\"line\">  - Data URL: https://raw.githubusercontent.com/CocoaPods/Specs/1fba9c650a4212c0b7be707698b8597556f0ece7/Specs/ZInAppPurchase/0.1.1/ZInAppPurchase.podspec.json</span><br><span class=\"line\">  - Log messages:</span><br><span class=\"line\">    - October 13th, 12:42: Push for `ZInAppPurchase 0.1.1&apos; initiated.</span><br><span class=\"line\">    - October 13th, 12:43: Push for `ZInAppPurchase 0.1.1&apos; has been pushed</span><br><span class=\"line\">    (1.090057228 s).</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><p>查看CocoaPods上的个人信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZackZhengdeMacBook-Pro:ZInAppPurchase zack$ pod trunk me</span><br><span class=\"line\">  - Name:     Zackzheng</span><br><span class=\"line\">  - Email:    zhengzuanzhe@gmail.com</span><br><span class=\"line\">  - Since:    May 30th, 21:28</span><br><span class=\"line\">  - Pods:</span><br><span class=\"line\">    - ZInAppPurchase</span><br><span class=\"line\">    - ZPlaceholderTextView</span><br><span class=\"line\">    - ZPopTipView</span><br><span class=\"line\">  - Sessions:</span><br><span class=\"line\">    - May 30th, 21:28       -        October 6th, 00:10. IP: 14.18.48.167 </span><br><span class=\"line\">    </span><br><span class=\"line\">    - September 28th, 02:06 - February 18th, 2017 10:43. IP: 121.33.185.113</span><br><span class=\"line\">    Description: macbook pro</span><br><span class=\"line\">    - October 13th, 11:24   - February 18th, 2017 11:31. IP: 183.240.19.242</span><br><span class=\"line\">    Description: macbook pro</span><br></pre></td></tr></table></figure>\n\n<p>有时候如果提交有问题，可以执行一下命令删除：</p>\n<p>// 直接废去这个pod</p>\n<p>pod trunk deprecate ZInAppPurchase</p>\n<p>// 废去这个pod的某个版本</p>\n<p>pod trunk delete ZInAppPurchase 1.0.0</p>\n<blockquote>\n<p>测试过，两个命令使用完都没返回成功，且<em>pod search</em>是可以找到的，但实际却是成功的。</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"为多个不同的git帐号配置ssh key","date":"2016-10-26T14:01:01.000Z","keywords":"ssh key git GitHub","description":"简单介绍了如何通过配置～/.ssh/config文件，实现操作多个不同的git帐号，使用不同的ssh key去拉取、提交代码。","_content":"\n# 前言\n\n开发中偶尔会遇到本地有多个git帐号，导致提交代码时因权限问题而失败的情况。处理起来不麻烦，就是比较繁琐容易忘记，所以记录下来备忘。\n\n\n\n# 生成ssh key\n\n如果已经生成多个不同的key，请跳过这一节。\n\n打开终端运行以下命令：\n\n```shell\nssh-keygen -t rsa -b 4096 -C \"[your email]\"\n```\n\n> [your email]替换成你的邮箱\n\n一直按回车，最后一步命名生成的`key`名称，此时就会在`~/.ssh/`目录下生成对应的文件 `id_rsa_xxx`、`id_rsa_xxx.pub`。执行多次命令生成多个`ssh key`。\n\n执行以下命令复制公钥：\n\n```shell\npbcopy < ~/.ssh/id_rsa_xxx.pub\n```\n\n> id_rsa_xxx 是你重命名的名称\n\n执行完就可以到对应的git仓库平台粘贴你的公钥，比如github上`项目->setting->Deploy keys->add deploy key`。\n\n另外，为了避免每次连接时可能会要求输入私钥的对称加密密匙，可以把`key`加入到`authentication agen`t中。需要运行以下命令：\n\n```shell\nssh-add ~/.ssh/id_rsa_xxx.pub\n```\n\n 输入你的私钥密码，就可以把私钥加入到ssh-agent中\n\n\n\n# 配置config文件\n\n打开终端输入命令：\n\n```shell\nvi ~/.ssh/config\n```\n\n对内容修改如下（没有则新建）：\n\n```\nHost github.com\n HostName github.com\n User git\n IdentityFile ~/.ssh/id_rsa_1\n\nHost code.aliyun.com\n HostName code.aliyun.com\n User git\n IdentityFile ~/.ssh/id_rsa_2\n```\n\n> Host 可以随意命名，用于区分不同主机；\n>\n> HostName 是主机名，也就是仓库 ssh 链接中的主机地址，github 是 github.com\n>\n> User 是指定登录用户名，github 平台是 git；\n>\n> IdentifyFile 是指定的私钥地址\n\n\n\n# 测试\n\n终端运行以下命令：\n\n```shell\nssh -T git@[your host]\n```\n\n> [your host] 分别替换成配置文件中的 Host\n\n\n\n# 配置remote url\n\n有几种方式配置远程remote url：\n\n- 修改`.git/config`文件\n\n打开本地仓库的`.git/config`文件，更改`[remote \"origin\"]`项中的`url`的值为上面对应配置的`Host`值。\n\n- 终端修改\n\n打开终端，进入本地仓库文件夹，运行一下命令：\n\n```shell\ngit remote add origin [your User]@[your host]:[your git name]/blog.git\n```\n\n> [your User] 和 [your host] 分别修改为配置文件中对应配置的值。[your git name] 是你帐号在 git 平台的名称，和仓库链接中的 git 用户名一样。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2016-10-26-config-different-ssh-key-for-multiple-git-accounts.md","raw":"---\ntitle: 为多个不同的git帐号配置ssh key\ndate: 2016-10-26 22:01:01\ntags: \n     - ssh\n     - git\ncategories: Tech\nkeywords: ssh key git GitHub\ndescription: 简单介绍了如何通过配置～/.ssh/config文件，实现操作多个不同的git帐号，使用不同的ssh key去拉取、提交代码。\n---\n\n# 前言\n\n开发中偶尔会遇到本地有多个git帐号，导致提交代码时因权限问题而失败的情况。处理起来不麻烦，就是比较繁琐容易忘记，所以记录下来备忘。\n\n\n\n# 生成ssh key\n\n如果已经生成多个不同的key，请跳过这一节。\n\n打开终端运行以下命令：\n\n```shell\nssh-keygen -t rsa -b 4096 -C \"[your email]\"\n```\n\n> [your email]替换成你的邮箱\n\n一直按回车，最后一步命名生成的`key`名称，此时就会在`~/.ssh/`目录下生成对应的文件 `id_rsa_xxx`、`id_rsa_xxx.pub`。执行多次命令生成多个`ssh key`。\n\n执行以下命令复制公钥：\n\n```shell\npbcopy < ~/.ssh/id_rsa_xxx.pub\n```\n\n> id_rsa_xxx 是你重命名的名称\n\n执行完就可以到对应的git仓库平台粘贴你的公钥，比如github上`项目->setting->Deploy keys->add deploy key`。\n\n另外，为了避免每次连接时可能会要求输入私钥的对称加密密匙，可以把`key`加入到`authentication agen`t中。需要运行以下命令：\n\n```shell\nssh-add ~/.ssh/id_rsa_xxx.pub\n```\n\n 输入你的私钥密码，就可以把私钥加入到ssh-agent中\n\n\n\n# 配置config文件\n\n打开终端输入命令：\n\n```shell\nvi ~/.ssh/config\n```\n\n对内容修改如下（没有则新建）：\n\n```\nHost github.com\n HostName github.com\n User git\n IdentityFile ~/.ssh/id_rsa_1\n\nHost code.aliyun.com\n HostName code.aliyun.com\n User git\n IdentityFile ~/.ssh/id_rsa_2\n```\n\n> Host 可以随意命名，用于区分不同主机；\n>\n> HostName 是主机名，也就是仓库 ssh 链接中的主机地址，github 是 github.com\n>\n> User 是指定登录用户名，github 平台是 git；\n>\n> IdentifyFile 是指定的私钥地址\n\n\n\n# 测试\n\n终端运行以下命令：\n\n```shell\nssh -T git@[your host]\n```\n\n> [your host] 分别替换成配置文件中的 Host\n\n\n\n# 配置remote url\n\n有几种方式配置远程remote url：\n\n- 修改`.git/config`文件\n\n打开本地仓库的`.git/config`文件，更改`[remote \"origin\"]`项中的`url`的值为上面对应配置的`Host`值。\n\n- 终端修改\n\n打开终端，进入本地仓库文件夹，运行一下命令：\n\n```shell\ngit remote add origin [your User]@[your host]:[your git name]/blog.git\n```\n\n> [your User] 和 [your host] 分别修改为配置文件中对应配置的值。[your git name] 是你帐号在 git 平台的名称，和仓库链接中的 git 用户名一样。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"config-different-ssh-key-for-multiple-git-accounts","published":1,"updated":"2020-02-25T15:23:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q6002q07eiaqikggj1","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>开发中偶尔会遇到本地有多个git帐号，导致提交代码时因权限问题而失败的情况。处理起来不麻烦，就是比较繁琐容易忘记，所以记录下来备忘。</p>\n<h1 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h1><p>如果已经生成多个不同的key，请跳过这一节。</p>\n<p>打开终端运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C \"[your email]\"</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your email]替换成你的邮箱</p>\n</blockquote>\n<p>一直按回车，最后一步命名生成的<code>key</code>名称，此时就会在<code>~/.ssh/</code>目录下生成对应的文件 <code>id_rsa_xxx</code>、<code>id_rsa_xxx.pub</code>。执行多次命令生成多个<code>ssh key</code>。</p>\n<p>执行以下命令复制公钥：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~/.ssh/id_rsa_xxx.pub</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>id_rsa_xxx 是你重命名的名称</p>\n</blockquote>\n<p>执行完就可以到对应的git仓库平台粘贴你的公钥，比如github上<code>项目-&gt;setting-&gt;Deploy keys-&gt;add deploy key</code>。</p>\n<p>另外，为了避免每次连接时可能会要求输入私钥的对称加密密匙，可以把<code>key</code>加入到<code>authentication agen</code>t中。需要运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa_xxx.pub</span><br></pre></td></tr></table></figure>\n\n<p> 输入你的私钥密码，就可以把私钥加入到ssh-agent中</p>\n<h1 id=\"配置config文件\"><a href=\"#配置config文件\" class=\"headerlink\" title=\"配置config文件\"></a>配置config文件</h1><p>打开终端输入命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.ssh/config</span><br></pre></td></tr></table></figure>\n\n<p>对内容修改如下（没有则新建）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\"> HostName github.com</span><br><span class=\"line\"> User git</span><br><span class=\"line\"> IdentityFile ~/.ssh/id_rsa_1</span><br><span class=\"line\"></span><br><span class=\"line\">Host code.aliyun.com</span><br><span class=\"line\"> HostName code.aliyun.com</span><br><span class=\"line\"> User git</span><br><span class=\"line\"> IdentityFile ~/.ssh/id_rsa_2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Host 可以随意命名，用于区分不同主机；</p>\n<p>HostName 是主机名，也就是仓库 ssh 链接中的主机地址，github 是 github.com</p>\n<p>User 是指定登录用户名，github 平台是 git；</p>\n<p>IdentifyFile 是指定的私钥地址</p>\n</blockquote>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>终端运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@[your host]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your host] 分别替换成配置文件中的 Host</p>\n</blockquote>\n<h1 id=\"配置remote-url\"><a href=\"#配置remote-url\" class=\"headerlink\" title=\"配置remote url\"></a>配置remote url</h1><p>有几种方式配置远程remote url：</p>\n<ul>\n<li>修改<code>.git/config</code>文件</li>\n</ul>\n<p>打开本地仓库的<code>.git/config</code>文件，更改<code>[remote &quot;origin&quot;]</code>项中的<code>url</code>的值为上面对应配置的<code>Host</code>值。</p>\n<ul>\n<li>终端修改</li>\n</ul>\n<p>打开终端，进入本地仓库文件夹，运行一下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [your User]@[your host]:[your git name]/blog.git</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your User] 和 [your host] 分别修改为配置文件中对应配置的值。[your git name] 是你帐号在 git 平台的名称，和仓库链接中的 git 用户名一样。</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>开发中偶尔会遇到本地有多个git帐号，导致提交代码时因权限问题而失败的情况。处理起来不麻烦，就是比较繁琐容易忘记，所以记录下来备忘。</p>\n<h1 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h1><p>如果已经生成多个不同的key，请跳过这一节。</p>\n<p>打开终端运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C \"[your email]\"</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your email]替换成你的邮箱</p>\n</blockquote>\n<p>一直按回车，最后一步命名生成的<code>key</code>名称，此时就会在<code>~/.ssh/</code>目录下生成对应的文件 <code>id_rsa_xxx</code>、<code>id_rsa_xxx.pub</code>。执行多次命令生成多个<code>ssh key</code>。</p>\n<p>执行以下命令复制公钥：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~/.ssh/id_rsa_xxx.pub</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>id_rsa_xxx 是你重命名的名称</p>\n</blockquote>\n<p>执行完就可以到对应的git仓库平台粘贴你的公钥，比如github上<code>项目-&gt;setting-&gt;Deploy keys-&gt;add deploy key</code>。</p>\n<p>另外，为了避免每次连接时可能会要求输入私钥的对称加密密匙，可以把<code>key</code>加入到<code>authentication agen</code>t中。需要运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa_xxx.pub</span><br></pre></td></tr></table></figure>\n\n<p> 输入你的私钥密码，就可以把私钥加入到ssh-agent中</p>\n<h1 id=\"配置config文件\"><a href=\"#配置config文件\" class=\"headerlink\" title=\"配置config文件\"></a>配置config文件</h1><p>打开终端输入命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.ssh/config</span><br></pre></td></tr></table></figure>\n\n<p>对内容修改如下（没有则新建）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\"> HostName github.com</span><br><span class=\"line\"> User git</span><br><span class=\"line\"> IdentityFile ~/.ssh/id_rsa_1</span><br><span class=\"line\"></span><br><span class=\"line\">Host code.aliyun.com</span><br><span class=\"line\"> HostName code.aliyun.com</span><br><span class=\"line\"> User git</span><br><span class=\"line\"> IdentityFile ~/.ssh/id_rsa_2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Host 可以随意命名，用于区分不同主机；</p>\n<p>HostName 是主机名，也就是仓库 ssh 链接中的主机地址，github 是 github.com</p>\n<p>User 是指定登录用户名，github 平台是 git；</p>\n<p>IdentifyFile 是指定的私钥地址</p>\n</blockquote>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>终端运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@[your host]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your host] 分别替换成配置文件中的 Host</p>\n</blockquote>\n<h1 id=\"配置remote-url\"><a href=\"#配置remote-url\" class=\"headerlink\" title=\"配置remote url\"></a>配置remote url</h1><p>有几种方式配置远程remote url：</p>\n<ul>\n<li>修改<code>.git/config</code>文件</li>\n</ul>\n<p>打开本地仓库的<code>.git/config</code>文件，更改<code>[remote &quot;origin&quot;]</code>项中的<code>url</code>的值为上面对应配置的<code>Host</code>值。</p>\n<ul>\n<li>终端修改</li>\n</ul>\n<p>打开终端，进入本地仓库文件夹，运行一下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [your User]@[your host]:[your git name]/blog.git</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[your User] 和 [your host] 分别修改为配置文件中对应配置的值。[your git name] 是你帐号在 git 平台的名称，和仓库链接中的 git 用户名一样。</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"团队Swift编码规范分享","date":"2017-11-14T03:40:00.000Z","keywords":"swift 编码规范 CodeConventions","description":"分享团队在swift项目上的编码规范","_content":"\n# 目录\n\n- 命名\n- 格式\n- 准则\n- 文件\n- 场景\n- 参考\n\n# 命名\n\n**【强制】命名清晰，保持一致性**\n\n反例：displayName（返回name还是展示name）\n\n**【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式**\n\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。\n\n正例：alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文\n\n反例：DaZhePromotion [打折]、getPingfenByName() [评分] / int 某变量 = 3\n\n**【强制】类、结构体、枚举、协议名使用大驼峰风格，常用缩写除外**\n\n正例：UserManager、UMSocialAdapter、TCPManager\n\n**【强制】函数、方法、变量、常量、参数使用小驼峰命名**\n\n**【强制】协议名统一规范**\n\n作用为delegate，结尾添加Delegate；描述协议做的事，用名词描述；描述行为，用形容词，例如\"able\"或者\"ing\"等；如果两者不能满足，结尾添加Protocol。\n\n正例：ScrollToTopable、UIDataSourceTranslating\n\n**【强制】缩略词使用完整大写，如果作为命名的开始部分，且首字母需要小写，则缩略词全小写**\n\n正例：\n\n```swift\nlet userID = \"123456\"\nlet imageURL = \"http://xxxxx\"\nclass URLHandler {\n  func urlConvert(urlString: String) {}\n}\n```\n\n**【强制】枚举项小写**\n\n正例：\n\n```swift\nenum CompassPoint {\n  case north\n  case south\n  case east\n  case west\n}\n```\n\n**【强制】命名先保证表达的意思准确，再考虑简短，不为了缩短书写而缩短书写**\n\n说明：比如有些属性适合定义成类属性；有些准确的需要定义成实例属性。\n\n正例：UIDevice.current.isIphoneX\n\n反例：UIDevice.isIphoneX\n\n**【强制】常量、变量命名若不能明显表明类型，则属性命名内要包括类型信息**\n\n正例：\n\n```swift\n// 变量名中可以表明类型，则命名中不需要包括类型信息\nlet animationDuration: NSTimeInterval\nlet userName: String  \n// Controller命名 \n// UIViewController、UITableViewController等简写成Controller\nlet popupController: UIViewController \n// UITabBarController和UINavigationController保留结构缩写\nlet flashSaleTabBarController: UITabBarController\n// 命名中需要明确类型信息\nlet userImage: UIImage\nlet userImageURL: NSURL\nlet userImageURLString: String\n// 当使用outlets时, 确保命名中标注类型\n@IBOutlet weak var submitButton: UIButton!\n@IBOutlet weak var emailTextField: UITextField!\n@IBOutlet weak var nameLabel: UILabel!\n```\n\n**【推荐】如果使用到了设计模式，建议在类名中体现出具体模式**\n\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n\n正例：class CommunityFollowTopicCellFactory、class TopicListCellBaseFactory\n\n**【强制】如果枚举类型的属性，其命名不能表明是枚举类型的，带上Enum后缀**\n\n正例：UserIdentityEnum、sectionType、playStatus、selectionStyle\n\n**【强制】声明属性时言简意赅，不带上类名**\n\n正例：\n\n```swift\n// 系统 UIDevice.current\n// 而不是UIDevice.currentDevice\nUserDefaults.standard // 而不是UserDefaults.standardDefaults\nclass RouteManager {\n  static let shared = RouteManager() // 用shared，不用sharedManager \n}\n```\n\n**【强制】区分使用default或shared**\n\n说明：default一般用于提供使用默认的参数配置的实例；shared一般用于单例。\n\n**【强制】如果省略外部参数名后会导致调用处含义模糊，则禁止省略**\n\n反例：\n\n```swift\n// 方法声明\nclass func action(_ pageName: String?, pageParam: String?, action: String, actionParam: [String: Any]?, isOutPoint: Bool = false) {} \n// 调用处 UserTracker.action(\"搜索\", pageParam: searchType.rawValue, action: \"语音输入\", actionParam: [\"keywords\": result], isOutPoint: true)\n```\n\n**【强制】函数命名中尽量不添加介词，如of、in、on、with等**\n\n正例：\n\n```swift\n// 原声明：UIFont.systemFontOfSize\nopen class func systemFont(ofSize fontSize: CGFloat) -> UIFont // 原声明：UIView.animateWithDuration\nopen class func animate(withDuration duration: TimeInterval, animations: @escaping () -> Swift.Void)\n```\n\n# 格式\n\n**【强制】如果语句的逻辑或长度较复杂，则使用变量保存再引用**\n\n反例：\n\n```swift\nAnyDataSourceService(dataSource: GoodsCommentResultDataSource(id: goodsId, offset: offset, imageOnly: imageOnly)).run(success: {\n  [weak self] (data: GoodsCommentResult) in\n})\n```\n\n正例：\n\n```swift\nlet dataSource = GoodsCommentResultDataSource(id: goodsId, offset: offset, imageOnly: imageOnly)\nlet service = AnyDataSourceService(dataSource: dataSource)\nservice.run(success: { [weak self] (data: GoodsCommentResult) in\n})\n```\n\n\n\n**【强制】如果大括号内为空，则简洁地写成{}即可，不需要换行**\n\n**【强制】枚举每一个case操作都换行，不跟在“：”后面**\n\n```swift\nswitch enum {\ncase a:\n  methodA()\ncase b:\n  methodB()\ncase c:\n  methodC()\n}\n\n```\n\n**【推荐】如果switch内每一个case的操作大于5行，则封装成一个方法调用**\n\n**【强制】变量类型，函数参数，遵循协议或继承父类，分号前不留空格**\n\n正例：\n\n```swift\nlet str: String = \"Test\"\nsomeFunction(someArgument: \"Argument\")\nclass ViewController: UIViewController {}\nextension ViewController: UITableViewDelegate {}\n\n```\n\n**【强制】逗号后面、运算符前后加空格**\n\n正例：\n\n```swift\nlet array = [1, 2, 3, 4, 5]\nlet sum = 1 + 2\nlet isSuccess = sum == 3\n\n```\n\n**【强制】左大括号不换行，左边保留空格**\n\n**【强制】流程控制不使用小括号**\n\n正例：if x == y { }\n\n**【强制】使用枚举时用简写**\n\n正例：imageView.setImageWithURL(url, type: .person)\n\n**【强制】使用一些语句如 else，catch等紧随代码块的关键词的时候，确保代码块和关键词在同一行**\n\n正例：\n\n```swift\ndo {\n  try canThrowAnError()     // no error was thrown \n} catch {\n  // an error was thrown \n} \nif name == \"world\" {\n  print(\"hello, world\")\n} else {\n  print(\"I'm sorry \\(name), but I don't recognize you\")\n}\n\n```\n\n**【强制】switch与case对齐**\n\n正例：\n\n```swift\nswitch some value to consider {\ncase value 1:\n  respond to value 1\ncase value 2, value 3:\n  respond to value 2 or 3\ndefault:\n  otherwise, do something else \n}\n\n```\n\n**【强制】不注释无用代码，直接删掉。若想保留代码以防以后用到，请使用git**\n\n**【强制】文件末尾必须留且只留一行空白行**\n\n**【强制】“//”注释符号后面要保留空格**\n\n**【强制】求高度/字符串等较复杂时需按一下格式定义，清晰指明含义，方便他人维护**\n\n```swift\nlet factor1Top = 20\nvar factor1Height = 40\nvar factor2Height = 40\nlet bottomPadding = 30\nif lineCount > 0 {\n  let lineHeight = lineCount * 10\n  factor1Height += lineHeight\n}\nif lineCount > 2 {\n  let lineHeight = lineCount * 20\n  factor2Height += lineHeight\n}\nlet height = factor1Top + factor1Height + factor2Height + bottomPadding\nreturn CGSize(width: width, height: height)\n\n```\n\n# 准则\n\n**【强制】若变量类型可以依靠推断得出，则声明时不要指明类型**\n\n正例：\n\n```swift\nlet π = 3.14159\n\n```\n\n**【强制】模型中需要指明数据类型**\n\n正例：\n\n```swift\nstruct DiamondPackage {\n  var id: Int = 0\n  var count: Int = 0\n  var price: Double = 0.0\n  var desc: String?\n  var descIconURL: NSURL?\n  var iapProductId: String?\n}\n\n```\n\n**【强制】使用隐式拆包可选类型的场景只能是@IBOutlets和网络层Service（保证使用之前肯定有值非空时），其余情况禁止使用“!”隐式拆包**\n\n**【强制】若需要判断当前值是否为nil，直接和nil比较**\n\n正例：if someOptional != nil {}\n\n反例：if let _ = someOptional {}\n\n**【强制】使用属性时不用self.修饰**\n\n**【强制】使用guard代替if提前返回**\n\n**【强制】使用guard拆包多个可选值**\n\n正例：\n\n```swift\nguard let thingOne = thingOne, let thingTwo = thingTwo, let thingThree = thingThree else {     \n  return \n}\n\n```\n\n**【强制】严格设置访问权限open／public／internal／fileprivate／private**\n\n**【强制】不使用的库不import进文件**\n\n说明：一般新建文件之后都会有默认代码：import Foundation，不需要则删除\n\n# 文件\n\n**【强制】Controller文件结构**\n\n说明：Controller包含较多代码，需要适量划分，使得代码查找更方便\n\n一般包含以下内容：\n\n```swift\nimport\n@IBOutlet\n@IBAction\noverride\n配置数据源（configSection和enum Row）\n私有属性 开放属性 私有函数 开放函数\ndelegate/protocol\n\n```\n\n正例：\n\n```swift\n// import放最前面，先import系统库\nimport UIKit\nimport Alamofire\nprotocol ViewControllerDelegate: class {}\nclass ViewController: UIViewController {\n  // 仅包含@IBOutlet、@IBAction、私有属性、公有属性、override方法\n  // 顺序依次如下     \n  // IBOutlet\n  @IBOutlet var imageView: UIImageView!\n  // 公有属性\n  var showBottom: Bool = false       \n  // 私有属性     \n  private weak var delegate: ViewControllerDelegate?\n  private var rows: [Row] = []\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    configVM()\n    doSomething()\n    // Do any additional setup after loading the view, typically from a nib.\n  }\n  // override按生命周期顺序\n  override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n  }\n  override func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n  }\n}  \n// 每个extension内第一行空行\n// @IBAction \nextension ViewController {\n\n  @IBAction func clickButton() {}\n}\n// 类方法、开放的方法\nextension ViewController {\n  class func classMethod() {}\n  func openMethod() {}\n}\n// 私有的方法 \nprivate extension ViewController {\n  func doSomething() {}\n}\n// 协议，每个协议分开写\n\nextension ViewController: UITableViewDelegate {} \nextension ViewController: ScrollToTop {}\n// 数据源配置相关放最后的extension\nprivate extension ViewController {\n  enum Row {\n    case row1\n    case row2\n    case row3\n  }\n  func configVM() {\n    rows = []\n    rows.append(.row1)\n  }\n}\n\n```\n\n# 场景\n\n- **定义模型**\n\n【强制】唯一标识统一用id，不使用类似jobId写法\n\n【强制】不参与运算的String不需要初始化，如name,desc等仅用于显示的字段\n\n【强制】数组必须初始化，不使用optional写法\n\n- **使用CocoaPods**\n\n【强制】导入库需要指定某一个确定的版本号，禁止使用大于等于之类的指定\n\n【强制】修改第三方库（禁止修改，除非特殊情况）需要新建一个Pod，并且在提交podfile修改的commit中注释原因\n\n【强制】不轻易引入第三方库，除了网络库、JSON转模型库、路由库等\n\n【强制】保持相同作用的库仅有一个\n\n【推荐】团队开发的库尽量引入framework，不引入源码\n\n# 参考\n\n[swift-style-guide](https://github.com/linkedin/swift-style-guide#1-code-formatting)\n\n[最详尽的 Swift 代码规范指南](http://www.cocoachina.com/swift/20160725/17176.html)\n\n[17条 Swift开发规范 最佳实践](http://mobile.51cto.com/news-493482.htm)\n\n[The Swift Programming Language (Swift 4)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309)\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2017-11-14-swift-code-conventions.md","raw":"---\ntitle: 团队Swift编码规范分享\ndate: 2017-11-14 11:40:00\ntags: \n     - swift\n     - iOS\ncategories: iOS\nkeywords: swift 编码规范 CodeConventions\ndescription: 分享团队在swift项目上的编码规范\n---\n\n# 目录\n\n- 命名\n- 格式\n- 准则\n- 文件\n- 场景\n- 参考\n\n# 命名\n\n**【强制】命名清晰，保持一致性**\n\n反例：displayName（返回name还是展示name）\n\n**【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式**\n\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。\n\n正例：alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文\n\n反例：DaZhePromotion [打折]、getPingfenByName() [评分] / int 某变量 = 3\n\n**【强制】类、结构体、枚举、协议名使用大驼峰风格，常用缩写除外**\n\n正例：UserManager、UMSocialAdapter、TCPManager\n\n**【强制】函数、方法、变量、常量、参数使用小驼峰命名**\n\n**【强制】协议名统一规范**\n\n作用为delegate，结尾添加Delegate；描述协议做的事，用名词描述；描述行为，用形容词，例如\"able\"或者\"ing\"等；如果两者不能满足，结尾添加Protocol。\n\n正例：ScrollToTopable、UIDataSourceTranslating\n\n**【强制】缩略词使用完整大写，如果作为命名的开始部分，且首字母需要小写，则缩略词全小写**\n\n正例：\n\n```swift\nlet userID = \"123456\"\nlet imageURL = \"http://xxxxx\"\nclass URLHandler {\n  func urlConvert(urlString: String) {}\n}\n```\n\n**【强制】枚举项小写**\n\n正例：\n\n```swift\nenum CompassPoint {\n  case north\n  case south\n  case east\n  case west\n}\n```\n\n**【强制】命名先保证表达的意思准确，再考虑简短，不为了缩短书写而缩短书写**\n\n说明：比如有些属性适合定义成类属性；有些准确的需要定义成实例属性。\n\n正例：UIDevice.current.isIphoneX\n\n反例：UIDevice.isIphoneX\n\n**【强制】常量、变量命名若不能明显表明类型，则属性命名内要包括类型信息**\n\n正例：\n\n```swift\n// 变量名中可以表明类型，则命名中不需要包括类型信息\nlet animationDuration: NSTimeInterval\nlet userName: String  \n// Controller命名 \n// UIViewController、UITableViewController等简写成Controller\nlet popupController: UIViewController \n// UITabBarController和UINavigationController保留结构缩写\nlet flashSaleTabBarController: UITabBarController\n// 命名中需要明确类型信息\nlet userImage: UIImage\nlet userImageURL: NSURL\nlet userImageURLString: String\n// 当使用outlets时, 确保命名中标注类型\n@IBOutlet weak var submitButton: UIButton!\n@IBOutlet weak var emailTextField: UITextField!\n@IBOutlet weak var nameLabel: UILabel!\n```\n\n**【推荐】如果使用到了设计模式，建议在类名中体现出具体模式**\n\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n\n正例：class CommunityFollowTopicCellFactory、class TopicListCellBaseFactory\n\n**【强制】如果枚举类型的属性，其命名不能表明是枚举类型的，带上Enum后缀**\n\n正例：UserIdentityEnum、sectionType、playStatus、selectionStyle\n\n**【强制】声明属性时言简意赅，不带上类名**\n\n正例：\n\n```swift\n// 系统 UIDevice.current\n// 而不是UIDevice.currentDevice\nUserDefaults.standard // 而不是UserDefaults.standardDefaults\nclass RouteManager {\n  static let shared = RouteManager() // 用shared，不用sharedManager \n}\n```\n\n**【强制】区分使用default或shared**\n\n说明：default一般用于提供使用默认的参数配置的实例；shared一般用于单例。\n\n**【强制】如果省略外部参数名后会导致调用处含义模糊，则禁止省略**\n\n反例：\n\n```swift\n// 方法声明\nclass func action(_ pageName: String?, pageParam: String?, action: String, actionParam: [String: Any]?, isOutPoint: Bool = false) {} \n// 调用处 UserTracker.action(\"搜索\", pageParam: searchType.rawValue, action: \"语音输入\", actionParam: [\"keywords\": result], isOutPoint: true)\n```\n\n**【强制】函数命名中尽量不添加介词，如of、in、on、with等**\n\n正例：\n\n```swift\n// 原声明：UIFont.systemFontOfSize\nopen class func systemFont(ofSize fontSize: CGFloat) -> UIFont // 原声明：UIView.animateWithDuration\nopen class func animate(withDuration duration: TimeInterval, animations: @escaping () -> Swift.Void)\n```\n\n# 格式\n\n**【强制】如果语句的逻辑或长度较复杂，则使用变量保存再引用**\n\n反例：\n\n```swift\nAnyDataSourceService(dataSource: GoodsCommentResultDataSource(id: goodsId, offset: offset, imageOnly: imageOnly)).run(success: {\n  [weak self] (data: GoodsCommentResult) in\n})\n```\n\n正例：\n\n```swift\nlet dataSource = GoodsCommentResultDataSource(id: goodsId, offset: offset, imageOnly: imageOnly)\nlet service = AnyDataSourceService(dataSource: dataSource)\nservice.run(success: { [weak self] (data: GoodsCommentResult) in\n})\n```\n\n\n\n**【强制】如果大括号内为空，则简洁地写成{}即可，不需要换行**\n\n**【强制】枚举每一个case操作都换行，不跟在“：”后面**\n\n```swift\nswitch enum {\ncase a:\n  methodA()\ncase b:\n  methodB()\ncase c:\n  methodC()\n}\n\n```\n\n**【推荐】如果switch内每一个case的操作大于5行，则封装成一个方法调用**\n\n**【强制】变量类型，函数参数，遵循协议或继承父类，分号前不留空格**\n\n正例：\n\n```swift\nlet str: String = \"Test\"\nsomeFunction(someArgument: \"Argument\")\nclass ViewController: UIViewController {}\nextension ViewController: UITableViewDelegate {}\n\n```\n\n**【强制】逗号后面、运算符前后加空格**\n\n正例：\n\n```swift\nlet array = [1, 2, 3, 4, 5]\nlet sum = 1 + 2\nlet isSuccess = sum == 3\n\n```\n\n**【强制】左大括号不换行，左边保留空格**\n\n**【强制】流程控制不使用小括号**\n\n正例：if x == y { }\n\n**【强制】使用枚举时用简写**\n\n正例：imageView.setImageWithURL(url, type: .person)\n\n**【强制】使用一些语句如 else，catch等紧随代码块的关键词的时候，确保代码块和关键词在同一行**\n\n正例：\n\n```swift\ndo {\n  try canThrowAnError()     // no error was thrown \n} catch {\n  // an error was thrown \n} \nif name == \"world\" {\n  print(\"hello, world\")\n} else {\n  print(\"I'm sorry \\(name), but I don't recognize you\")\n}\n\n```\n\n**【强制】switch与case对齐**\n\n正例：\n\n```swift\nswitch some value to consider {\ncase value 1:\n  respond to value 1\ncase value 2, value 3:\n  respond to value 2 or 3\ndefault:\n  otherwise, do something else \n}\n\n```\n\n**【强制】不注释无用代码，直接删掉。若想保留代码以防以后用到，请使用git**\n\n**【强制】文件末尾必须留且只留一行空白行**\n\n**【强制】“//”注释符号后面要保留空格**\n\n**【强制】求高度/字符串等较复杂时需按一下格式定义，清晰指明含义，方便他人维护**\n\n```swift\nlet factor1Top = 20\nvar factor1Height = 40\nvar factor2Height = 40\nlet bottomPadding = 30\nif lineCount > 0 {\n  let lineHeight = lineCount * 10\n  factor1Height += lineHeight\n}\nif lineCount > 2 {\n  let lineHeight = lineCount * 20\n  factor2Height += lineHeight\n}\nlet height = factor1Top + factor1Height + factor2Height + bottomPadding\nreturn CGSize(width: width, height: height)\n\n```\n\n# 准则\n\n**【强制】若变量类型可以依靠推断得出，则声明时不要指明类型**\n\n正例：\n\n```swift\nlet π = 3.14159\n\n```\n\n**【强制】模型中需要指明数据类型**\n\n正例：\n\n```swift\nstruct DiamondPackage {\n  var id: Int = 0\n  var count: Int = 0\n  var price: Double = 0.0\n  var desc: String?\n  var descIconURL: NSURL?\n  var iapProductId: String?\n}\n\n```\n\n**【强制】使用隐式拆包可选类型的场景只能是@IBOutlets和网络层Service（保证使用之前肯定有值非空时），其余情况禁止使用“!”隐式拆包**\n\n**【强制】若需要判断当前值是否为nil，直接和nil比较**\n\n正例：if someOptional != nil {}\n\n反例：if let _ = someOptional {}\n\n**【强制】使用属性时不用self.修饰**\n\n**【强制】使用guard代替if提前返回**\n\n**【强制】使用guard拆包多个可选值**\n\n正例：\n\n```swift\nguard let thingOne = thingOne, let thingTwo = thingTwo, let thingThree = thingThree else {     \n  return \n}\n\n```\n\n**【强制】严格设置访问权限open／public／internal／fileprivate／private**\n\n**【强制】不使用的库不import进文件**\n\n说明：一般新建文件之后都会有默认代码：import Foundation，不需要则删除\n\n# 文件\n\n**【强制】Controller文件结构**\n\n说明：Controller包含较多代码，需要适量划分，使得代码查找更方便\n\n一般包含以下内容：\n\n```swift\nimport\n@IBOutlet\n@IBAction\noverride\n配置数据源（configSection和enum Row）\n私有属性 开放属性 私有函数 开放函数\ndelegate/protocol\n\n```\n\n正例：\n\n```swift\n// import放最前面，先import系统库\nimport UIKit\nimport Alamofire\nprotocol ViewControllerDelegate: class {}\nclass ViewController: UIViewController {\n  // 仅包含@IBOutlet、@IBAction、私有属性、公有属性、override方法\n  // 顺序依次如下     \n  // IBOutlet\n  @IBOutlet var imageView: UIImageView!\n  // 公有属性\n  var showBottom: Bool = false       \n  // 私有属性     \n  private weak var delegate: ViewControllerDelegate?\n  private var rows: [Row] = []\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    configVM()\n    doSomething()\n    // Do any additional setup after loading the view, typically from a nib.\n  }\n  // override按生命周期顺序\n  override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n  }\n  override func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n  }\n}  \n// 每个extension内第一行空行\n// @IBAction \nextension ViewController {\n\n  @IBAction func clickButton() {}\n}\n// 类方法、开放的方法\nextension ViewController {\n  class func classMethod() {}\n  func openMethod() {}\n}\n// 私有的方法 \nprivate extension ViewController {\n  func doSomething() {}\n}\n// 协议，每个协议分开写\n\nextension ViewController: UITableViewDelegate {} \nextension ViewController: ScrollToTop {}\n// 数据源配置相关放最后的extension\nprivate extension ViewController {\n  enum Row {\n    case row1\n    case row2\n    case row3\n  }\n  func configVM() {\n    rows = []\n    rows.append(.row1)\n  }\n}\n\n```\n\n# 场景\n\n- **定义模型**\n\n【强制】唯一标识统一用id，不使用类似jobId写法\n\n【强制】不参与运算的String不需要初始化，如name,desc等仅用于显示的字段\n\n【强制】数组必须初始化，不使用optional写法\n\n- **使用CocoaPods**\n\n【强制】导入库需要指定某一个确定的版本号，禁止使用大于等于之类的指定\n\n【强制】修改第三方库（禁止修改，除非特殊情况）需要新建一个Pod，并且在提交podfile修改的commit中注释原因\n\n【强制】不轻易引入第三方库，除了网络库、JSON转模型库、路由库等\n\n【强制】保持相同作用的库仅有一个\n\n【推荐】团队开发的库尽量引入framework，不引入源码\n\n# 参考\n\n[swift-style-guide](https://github.com/linkedin/swift-style-guide#1-code-formatting)\n\n[最详尽的 Swift 代码规范指南](http://www.cocoachina.com/swift/20160725/17176.html)\n\n[17条 Swift开发规范 最佳实践](http://mobile.51cto.com/news-493482.htm)\n\n[The Swift Programming Language (Swift 4)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309)\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"swift-code-conventions","published":1,"updated":"2020-02-25T15:23:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q7002t07ei31js8d33","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>命名</li>\n<li>格式</li>\n<li>准则</li>\n<li>文件</li>\n<li>场景</li>\n<li>参考</li>\n</ul>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><p><strong>【强制】命名清晰，保持一致性</strong></p>\n<p>反例：displayName（返回name还是展示name）</p>\n<p><strong>【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式</strong></p>\n<p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>\n<p>正例：alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文</p>\n<p>反例：DaZhePromotion [打折]、getPingfenByName() [评分] / int 某变量 = 3</p>\n<p><strong>【强制】类、结构体、枚举、协议名使用大驼峰风格，常用缩写除外</strong></p>\n<p>正例：UserManager、UMSocialAdapter、TCPManager</p>\n<p><strong>【强制】函数、方法、变量、常量、参数使用小驼峰命名</strong></p>\n<p><strong>【强制】协议名统一规范</strong></p>\n<p>作用为delegate，结尾添加Delegate；描述协议做的事，用名词描述；描述行为，用形容词，例如”able”或者”ing”等；如果两者不能满足，结尾添加Protocol。</p>\n<p>正例：ScrollToTopable、UIDataSourceTranslating</p>\n<p><strong>【强制】缩略词使用完整大写，如果作为命名的开始部分，且首字母需要小写，则缩略词全小写</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> userID = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imageURL = <span class=\"string\">\"http://xxxxx\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlConvert</span><span class=\"params\">(urlString: String)</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】枚举项小写</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CompassPoint</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> north</span><br><span class=\"line\">  <span class=\"keyword\">case</span> south</span><br><span class=\"line\">  <span class=\"keyword\">case</span> east</span><br><span class=\"line\">  <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】命名先保证表达的意思准确，再考虑简短，不为了缩短书写而缩短书写</strong></p>\n<p>说明：比如有些属性适合定义成类属性；有些准确的需要定义成实例属性。</p>\n<p>正例：UIDevice.current.isIphoneX</p>\n<p>反例：UIDevice.isIphoneX</p>\n<p><strong>【强制】常量、变量命名若不能明显表明类型，则属性命名内要包括类型信息</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量名中可以表明类型，则命名中不需要包括类型信息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> animationDuration: <span class=\"type\">NSTimeInterval</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userName: <span class=\"type\">String</span>  </span><br><span class=\"line\"><span class=\"comment\">// Controller命名 </span></span><br><span class=\"line\"><span class=\"comment\">// UIViewController、UITableViewController等简写成Controller</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> popupController: <span class=\"type\">UIViewController</span> </span><br><span class=\"line\"><span class=\"comment\">// UITabBarController和UINavigationController保留结构缩写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flashSaleTabBarController: <span class=\"type\">UITabBarController</span></span><br><span class=\"line\"><span class=\"comment\">// 命名中需要明确类型信息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImage: <span class=\"type\">UIImage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImageURL: <span class=\"type\">NSURL</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImageURLString: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"comment\">// 当使用outlets时, 确保命名中标注类型</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> submitButton: <span class=\"type\">UIButton!</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> emailTextField: <span class=\"type\">UITextField!</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> nameLabel: <span class=\"type\">UILabel!</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式</strong></p>\n<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p>\n<p>正例：class CommunityFollowTopicCellFactory、class TopicListCellBaseFactory</p>\n<p><strong>【强制】如果枚举类型的属性，其命名不能表明是枚举类型的，带上Enum后缀</strong></p>\n<p>正例：UserIdentityEnum、sectionType、playStatus、selectionStyle</p>\n<p><strong>【强制】声明属性时言简意赅，不带上类名</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 系统 UIDevice.current</span></span><br><span class=\"line\"><span class=\"comment\">// 而不是UIDevice.currentDevice</span></span><br><span class=\"line\"><span class=\"type\">UserDefaults</span>.standard <span class=\"comment\">// 而不是UserDefaults.standardDefaults</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared = <span class=\"type\">RouteManager</span>() <span class=\"comment\">// 用shared，不用sharedManager </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】区分使用default或shared</strong></p>\n<p>说明：default一般用于提供使用默认的参数配置的实例；shared一般用于单例。</p>\n<p><strong>【强制】如果省略外部参数名后会导致调用处含义模糊，则禁止省略</strong></p>\n<p>反例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">action</span>(<span class=\"title\">_</span> <span class=\"title\">pageName</span>: <span class=\"title\">String</span>?, <span class=\"title\">pageParam</span>: <span class=\"title\">String</span>?, <span class=\"title\">action</span>: <span class=\"title\">String</span>, <span class=\"title\">actionParam</span>: [<span class=\"title\">String</span>: <span class=\"title\">Any</span>]?, <span class=\"title\">isOutPoint</span>: <span class=\"title\">Bool</span> = <span class=\"title\">false</span>) </span>&#123;&#125; </span><br><span class=\"line\"><span class=\"comment\">// 调用处 UserTracker.action(\"搜索\", pageParam: searchType.rawValue, action: \"语音输入\", actionParam: [\"keywords\": result], isOutPoint: true)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】函数命名中尽量不添加介词，如of、in、on、with等</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原声明：UIFont.systemFontOfSize</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">systemFont</span>(<span class=\"title\">ofSize</span> <span class=\"title\">fontSize</span>: <span class=\"title\">CGFloat</span>) -&gt; <span class=\"title\">UIFont</span> // 原声明：<span class=\"title\">UIView</span>.<span class=\"title\">animateWithDuration</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">open</span> <span class=\"title\">class</span> <span class=\"title\">func</span> <span class=\"title\">animate</span>(<span class=\"title\">withDuration</span> <span class=\"title\">duration</span>: <span class=\"title\">TimeInterval</span>, <span class=\"title\">animations</span>: @<span class=\"title\">escaping</span> () -&gt; <span class=\"title\">Swift</span>.<span class=\"title\">Void</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><p><strong>【强制】如果语句的逻辑或长度较复杂，则使用变量保存再引用</strong></p>\n<p>反例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AnyDataSourceService</span>(dataSource: <span class=\"type\">GoodsCommentResultDataSource</span>(id: goodsId, offset: offset, imageOnly: imageOnly)).run(success: &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] (data: <span class=\"type\">GoodsCommentResult</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = <span class=\"type\">GoodsCommentResultDataSource</span>(id: goodsId, offset: offset, imageOnly: imageOnly)</span><br><span class=\"line\"><span class=\"keyword\">let</span> service = <span class=\"type\">AnyDataSourceService</span>(dataSource: dataSource)</span><br><span class=\"line\">service.run(success: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] (data: <span class=\"type\">GoodsCommentResult</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】如果大括号内为空，则简洁地写成{}即可，不需要换行</strong></p>\n<p><strong>【强制】枚举每一个case操作都换行，不跟在“：”后面</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> <span class=\"class\"><span class=\"keyword\">enum</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> a:</span><br><span class=\"line\">  methodA()</span><br><span class=\"line\"><span class=\"keyword\">case</span> b:</span><br><span class=\"line\">  methodB()</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"built_in\">c</span>:</span><br><span class=\"line\">  methodC()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【推荐】如果switch内每一个case的操作大于5行，则封装成一个方法调用</strong></p>\n<p><strong>【强制】变量类型，函数参数，遵循协议或继承父类，分号前不留空格</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str: <span class=\"type\">String</span> = <span class=\"string\">\"Test\"</span></span><br><span class=\"line\">someFunction(someArgument: <span class=\"string\">\"Argument\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UITableViewDelegate</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】逗号后面、运算符前后加空格</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSuccess = sum == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】左大括号不换行，左边保留空格</strong></p>\n<p><strong>【强制】流程控制不使用小括号</strong></p>\n<p>正例：if x == y { }</p>\n<p><strong>【强制】使用枚举时用简写</strong></p>\n<p>正例：imageView.setImageWithURL(url, type: .person)</p>\n<p><strong>【强制】使用一些语句如 else，catch等紧随代码块的关键词的时候，确保代码块和关键词在同一行</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> canThrowAnError()     <span class=\"comment\">// no error was thrown </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// an error was thrown </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">\"world\"</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"hello, world\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"I'm sorry \\(name), but I don't recognize you\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】switch与case对齐</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> some value to consider &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">1</span>:</span><br><span class=\"line\">  respond to value <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">2</span>, value <span class=\"number\">3</span>:</span><br><span class=\"line\">  respond to value <span class=\"number\">2</span> or <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  otherwise, <span class=\"keyword\">do</span> something <span class=\"keyword\">else</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】不注释无用代码，直接删掉。若想保留代码以防以后用到，请使用git</strong></p>\n<p><strong>【强制】文件末尾必须留且只留一行空白行</strong></p>\n<p><strong>【强制】“//”注释符号后面要保留空格</strong></p>\n<p><strong>【强制】求高度/字符串等较复杂时需按一下格式定义，清晰指明含义，方便他人维护</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> factor1Top = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factor1Height = <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factor2Height = <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bottomPadding = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> lineCount &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineHeight = lineCount * <span class=\"number\">10</span></span><br><span class=\"line\">  factor1Height += lineHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> lineCount &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineHeight = lineCount * <span class=\"number\">20</span></span><br><span class=\"line\">  factor2Height += lineHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> height = factor1Top + factor1Height + factor2Height + bottomPadding</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">CGSize</span>(width: width, height: height)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"准则\"><a href=\"#准则\" class=\"headerlink\" title=\"准则\"></a>准则</h1><p><strong>【强制】若变量类型可以依靠推断得出，则声明时不要指明类型</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> π = <span class=\"number\">3.14159</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】模型中需要指明数据类型</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiamondPackage</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> price: <span class=\"type\">Double</span> = <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> desc: <span class=\"type\">String?</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> descIconURL: <span class=\"type\">NSURL?</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> iapProductId: <span class=\"type\">String?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】使用隐式拆包可选类型的场景只能是@IBOutlets和网络层Service（保证使用之前肯定有值非空时），其余情况禁止使用“!”隐式拆包</strong></p>\n<p><strong>【强制】若需要判断当前值是否为nil，直接和nil比较</strong></p>\n<p>正例：if someOptional != nil {}</p>\n<p>反例：if let _ = someOptional {}</p>\n<p><strong>【强制】使用属性时不用self.修饰</strong></p>\n<p><strong>【强制】使用guard代替if提前返回</strong></p>\n<p><strong>【强制】使用guard拆包多个可选值</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> thingOne = thingOne, <span class=\"keyword\">let</span> thingTwo = thingTwo, <span class=\"keyword\">let</span> thingThree = thingThree <span class=\"keyword\">else</span> &#123;     </span><br><span class=\"line\">  <span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】严格设置访问权限open／public／internal／fileprivate／private</strong></p>\n<p><strong>【强制】不使用的库不import进文件</strong></p>\n<p>说明：一般新建文件之后都会有默认代码：import Foundation，不需要则删除</p>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p><strong>【强制】Controller文件结构</strong></p>\n<p>说明：Controller包含较多代码，需要适量划分，使得代码查找更方便</p>\n<p>一般包含以下内容：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span></span><br><span class=\"line\"><span class=\"keyword\">override</span></span><br><span class=\"line\">配置数据源（configSection和<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Row</span>）</span></span><br><span class=\"line\"><span class=\"class\">私有属性 开放属性 私有函数 开放函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">delegate</span>/<span class=\"title\">protocol</span></span></span><br></pre></td></tr></table></figure>\n\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import放最前面，先import系统库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> Alamofire</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ViewControllerDelegate</span>: <span class=\"title\">class</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仅包含@IBOutlet、@IBAction、私有属性、公有属性、override方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 顺序依次如下     </span></span><br><span class=\"line\">  <span class=\"comment\">// IBOutlet</span></span><br><span class=\"line\">  <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView!</span></span><br><span class=\"line\">  <span class=\"comment\">// 公有属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> showBottom: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span>       </span><br><span class=\"line\">  <span class=\"comment\">// 私有属性     </span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> delegate: <span class=\"type\">ViewControllerDelegate?</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> rows: [<span class=\"type\">Row</span>] = []</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    configVM()</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// override按生命周期顺序</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillAppear(animated)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidAppear(animated)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 每个extension内第一行空行</span></span><br><span class=\"line\"><span class=\"comment\">// @IBAction </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">clickButton</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类方法、开放的方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">classMethod</span>() </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">openMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 私有的方法 </span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 协议，每个协议分开写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UITableViewDelegate</span> </span>&#123;&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">ScrollToTop</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据源配置相关放最后的extension</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Row</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row1</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row2</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configVM</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    rows = []</span><br><span class=\"line\">    rows.append(.row1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><ul>\n<li><strong>定义模型</strong></li>\n</ul>\n<p>【强制】唯一标识统一用id，不使用类似jobId写法</p>\n<p>【强制】不参与运算的String不需要初始化，如name,desc等仅用于显示的字段</p>\n<p>【强制】数组必须初始化，不使用optional写法</p>\n<ul>\n<li><strong>使用CocoaPods</strong></li>\n</ul>\n<p>【强制】导入库需要指定某一个确定的版本号，禁止使用大于等于之类的指定</p>\n<p>【强制】修改第三方库（禁止修改，除非特殊情况）需要新建一个Pod，并且在提交podfile修改的commit中注释原因</p>\n<p>【强制】不轻易引入第三方库，除了网络库、JSON转模型库、路由库等</p>\n<p>【强制】保持相同作用的库仅有一个</p>\n<p>【推荐】团队开发的库尽量引入framework，不引入源码</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/linkedin/swift-style-guide#1-code-formatting\" target=\"_blank\" rel=\"noopener\">swift-style-guide</a></p>\n<p><a href=\"http://www.cocoachina.com/swift/20160725/17176.html\" target=\"_blank\" rel=\"noopener\">最详尽的 Swift 代码规范指南</a></p>\n<p><a href=\"http://mobile.51cto.com/news-493482.htm\" target=\"_blank\" rel=\"noopener\">17条 Swift开发规范 最佳实践</a></p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language (Swift 4)</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>命名</li>\n<li>格式</li>\n<li>准则</li>\n<li>文件</li>\n<li>场景</li>\n<li>参考</li>\n</ul>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><p><strong>【强制】命名清晰，保持一致性</strong></p>\n<p>反例：displayName（返回name还是展示name）</p>\n<p><strong>【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式</strong></p>\n<p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p>\n<p>正例：alibaba / taobao / youku / hangzhou 等国际通用的名称，可视同英文</p>\n<p>反例：DaZhePromotion [打折]、getPingfenByName() [评分] / int 某变量 = 3</p>\n<p><strong>【强制】类、结构体、枚举、协议名使用大驼峰风格，常用缩写除外</strong></p>\n<p>正例：UserManager、UMSocialAdapter、TCPManager</p>\n<p><strong>【强制】函数、方法、变量、常量、参数使用小驼峰命名</strong></p>\n<p><strong>【强制】协议名统一规范</strong></p>\n<p>作用为delegate，结尾添加Delegate；描述协议做的事，用名词描述；描述行为，用形容词，例如”able”或者”ing”等；如果两者不能满足，结尾添加Protocol。</p>\n<p>正例：ScrollToTopable、UIDataSourceTranslating</p>\n<p><strong>【强制】缩略词使用完整大写，如果作为命名的开始部分，且首字母需要小写，则缩略词全小写</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> userID = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imageURL = <span class=\"string\">\"http://xxxxx\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">URLHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">urlConvert</span><span class=\"params\">(urlString: String)</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】枚举项小写</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CompassPoint</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> north</span><br><span class=\"line\">  <span class=\"keyword\">case</span> south</span><br><span class=\"line\">  <span class=\"keyword\">case</span> east</span><br><span class=\"line\">  <span class=\"keyword\">case</span> west</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】命名先保证表达的意思准确，再考虑简短，不为了缩短书写而缩短书写</strong></p>\n<p>说明：比如有些属性适合定义成类属性；有些准确的需要定义成实例属性。</p>\n<p>正例：UIDevice.current.isIphoneX</p>\n<p>反例：UIDevice.isIphoneX</p>\n<p><strong>【强制】常量、变量命名若不能明显表明类型，则属性命名内要包括类型信息</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量名中可以表明类型，则命名中不需要包括类型信息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> animationDuration: <span class=\"type\">NSTimeInterval</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userName: <span class=\"type\">String</span>  </span><br><span class=\"line\"><span class=\"comment\">// Controller命名 </span></span><br><span class=\"line\"><span class=\"comment\">// UIViewController、UITableViewController等简写成Controller</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> popupController: <span class=\"type\">UIViewController</span> </span><br><span class=\"line\"><span class=\"comment\">// UITabBarController和UINavigationController保留结构缩写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> flashSaleTabBarController: <span class=\"type\">UITabBarController</span></span><br><span class=\"line\"><span class=\"comment\">// 命名中需要明确类型信息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImage: <span class=\"type\">UIImage</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImageURL: <span class=\"type\">NSURL</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userImageURLString: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"comment\">// 当使用outlets时, 确保命名中标注类型</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> submitButton: <span class=\"type\">UIButton!</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> emailTextField: <span class=\"type\">UITextField!</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> nameLabel: <span class=\"type\">UILabel!</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式</strong></p>\n<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p>\n<p>正例：class CommunityFollowTopicCellFactory、class TopicListCellBaseFactory</p>\n<p><strong>【强制】如果枚举类型的属性，其命名不能表明是枚举类型的，带上Enum后缀</strong></p>\n<p>正例：UserIdentityEnum、sectionType、playStatus、selectionStyle</p>\n<p><strong>【强制】声明属性时言简意赅，不带上类名</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 系统 UIDevice.current</span></span><br><span class=\"line\"><span class=\"comment\">// 而不是UIDevice.currentDevice</span></span><br><span class=\"line\"><span class=\"type\">UserDefaults</span>.standard <span class=\"comment\">// 而不是UserDefaults.standardDefaults</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared = <span class=\"type\">RouteManager</span>() <span class=\"comment\">// 用shared，不用sharedManager </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】区分使用default或shared</strong></p>\n<p>说明：default一般用于提供使用默认的参数配置的实例；shared一般用于单例。</p>\n<p><strong>【强制】如果省略外部参数名后会导致调用处含义模糊，则禁止省略</strong></p>\n<p>反例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">action</span>(<span class=\"title\">_</span> <span class=\"title\">pageName</span>: <span class=\"title\">String</span>?, <span class=\"title\">pageParam</span>: <span class=\"title\">String</span>?, <span class=\"title\">action</span>: <span class=\"title\">String</span>, <span class=\"title\">actionParam</span>: [<span class=\"title\">String</span>: <span class=\"title\">Any</span>]?, <span class=\"title\">isOutPoint</span>: <span class=\"title\">Bool</span> = <span class=\"title\">false</span>) </span>&#123;&#125; </span><br><span class=\"line\"><span class=\"comment\">// 调用处 UserTracker.action(\"搜索\", pageParam: searchType.rawValue, action: \"语音输入\", actionParam: [\"keywords\": result], isOutPoint: true)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】函数命名中尽量不添加介词，如of、in、on、with等</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原声明：UIFont.systemFontOfSize</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">systemFont</span>(<span class=\"title\">ofSize</span> <span class=\"title\">fontSize</span>: <span class=\"title\">CGFloat</span>) -&gt; <span class=\"title\">UIFont</span> // 原声明：<span class=\"title\">UIView</span>.<span class=\"title\">animateWithDuration</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">open</span> <span class=\"title\">class</span> <span class=\"title\">func</span> <span class=\"title\">animate</span>(<span class=\"title\">withDuration</span> <span class=\"title\">duration</span>: <span class=\"title\">TimeInterval</span>, <span class=\"title\">animations</span>: @<span class=\"title\">escaping</span> () -&gt; <span class=\"title\">Swift</span>.<span class=\"title\">Void</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><p><strong>【强制】如果语句的逻辑或长度较复杂，则使用变量保存再引用</strong></p>\n<p>反例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AnyDataSourceService</span>(dataSource: <span class=\"type\">GoodsCommentResultDataSource</span>(id: goodsId, offset: offset, imageOnly: imageOnly)).run(success: &#123;</span><br><span class=\"line\">  [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] (data: <span class=\"type\">GoodsCommentResult</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = <span class=\"type\">GoodsCommentResultDataSource</span>(id: goodsId, offset: offset, imageOnly: imageOnly)</span><br><span class=\"line\"><span class=\"keyword\">let</span> service = <span class=\"type\">AnyDataSourceService</span>(dataSource: dataSource)</span><br><span class=\"line\">service.run(success: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] (data: <span class=\"type\">GoodsCommentResult</span>) <span class=\"keyword\">in</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】如果大括号内为空，则简洁地写成{}即可，不需要换行</strong></p>\n<p><strong>【强制】枚举每一个case操作都换行，不跟在“：”后面</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> <span class=\"class\"><span class=\"keyword\">enum</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> a:</span><br><span class=\"line\">  methodA()</span><br><span class=\"line\"><span class=\"keyword\">case</span> b:</span><br><span class=\"line\">  methodB()</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"built_in\">c</span>:</span><br><span class=\"line\">  methodC()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【推荐】如果switch内每一个case的操作大于5行，则封装成一个方法调用</strong></p>\n<p><strong>【强制】变量类型，函数参数，遵循协议或继承父类，分号前不留空格</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str: <span class=\"type\">String</span> = <span class=\"string\">\"Test\"</span></span><br><span class=\"line\">someFunction(someArgument: <span class=\"string\">\"Argument\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UITableViewDelegate</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】逗号后面、运算符前后加空格</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isSuccess = sum == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】左大括号不换行，左边保留空格</strong></p>\n<p><strong>【强制】流程控制不使用小括号</strong></p>\n<p>正例：if x == y { }</p>\n<p><strong>【强制】使用枚举时用简写</strong></p>\n<p>正例：imageView.setImageWithURL(url, type: .person)</p>\n<p><strong>【强制】使用一些语句如 else，catch等紧随代码块的关键词的时候，确保代码块和关键词在同一行</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> canThrowAnError()     <span class=\"comment\">// no error was thrown </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// an error was thrown </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">\"world\"</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"hello, world\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"I'm sorry \\(name), but I don't recognize you\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】switch与case对齐</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> some value to consider &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">1</span>:</span><br><span class=\"line\">  respond to value <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> value <span class=\"number\">2</span>, value <span class=\"number\">3</span>:</span><br><span class=\"line\">  respond to value <span class=\"number\">2</span> or <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  otherwise, <span class=\"keyword\">do</span> something <span class=\"keyword\">else</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】不注释无用代码，直接删掉。若想保留代码以防以后用到，请使用git</strong></p>\n<p><strong>【强制】文件末尾必须留且只留一行空白行</strong></p>\n<p><strong>【强制】“//”注释符号后面要保留空格</strong></p>\n<p><strong>【强制】求高度/字符串等较复杂时需按一下格式定义，清晰指明含义，方便他人维护</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> factor1Top = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factor1Height = <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> factor2Height = <span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bottomPadding = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> lineCount &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineHeight = lineCount * <span class=\"number\">10</span></span><br><span class=\"line\">  factor1Height += lineHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> lineCount &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lineHeight = lineCount * <span class=\"number\">20</span></span><br><span class=\"line\">  factor2Height += lineHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> height = factor1Top + factor1Height + factor2Height + bottomPadding</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"type\">CGSize</span>(width: width, height: height)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"准则\"><a href=\"#准则\" class=\"headerlink\" title=\"准则\"></a>准则</h1><p><strong>【强制】若变量类型可以依靠推断得出，则声明时不要指明类型</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> π = <span class=\"number\">3.14159</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】模型中需要指明数据类型</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiamondPackage</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> price: <span class=\"type\">Double</span> = <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> desc: <span class=\"type\">String?</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> descIconURL: <span class=\"type\">NSURL?</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> iapProductId: <span class=\"type\">String?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】使用隐式拆包可选类型的场景只能是@IBOutlets和网络层Service（保证使用之前肯定有值非空时），其余情况禁止使用“!”隐式拆包</strong></p>\n<p><strong>【强制】若需要判断当前值是否为nil，直接和nil比较</strong></p>\n<p>正例：if someOptional != nil {}</p>\n<p>反例：if let _ = someOptional {}</p>\n<p><strong>【强制】使用属性时不用self.修饰</strong></p>\n<p><strong>【强制】使用guard代替if提前返回</strong></p>\n<p><strong>【强制】使用guard拆包多个可选值</strong></p>\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> thingOne = thingOne, <span class=\"keyword\">let</span> thingTwo = thingTwo, <span class=\"keyword\">let</span> thingThree = thingThree <span class=\"keyword\">else</span> &#123;     </span><br><span class=\"line\">  <span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>【强制】严格设置访问权限open／public／internal／fileprivate／private</strong></p>\n<p><strong>【强制】不使用的库不import进文件</strong></p>\n<p>说明：一般新建文件之后都会有默认代码：import Foundation，不需要则删除</p>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p><strong>【强制】Controller文件结构</strong></p>\n<p>说明：Controller包含较多代码，需要适量划分，使得代码查找更方便</p>\n<p>一般包含以下内容：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span></span><br><span class=\"line\"><span class=\"meta\">@IBOutlet</span></span><br><span class=\"line\"><span class=\"meta\">@IBAction</span></span><br><span class=\"line\"><span class=\"keyword\">override</span></span><br><span class=\"line\">配置数据源（configSection和<span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Row</span>）</span></span><br><span class=\"line\"><span class=\"class\">私有属性 开放属性 私有函数 开放函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">delegate</span>/<span class=\"title\">protocol</span></span></span><br></pre></td></tr></table></figure>\n\n<p>正例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import放最前面，先import系统库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> Alamofire</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">ViewControllerDelegate</span>: <span class=\"title\">class</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仅包含@IBOutlet、@IBAction、私有属性、公有属性、override方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 顺序依次如下     </span></span><br><span class=\"line\">  <span class=\"comment\">// IBOutlet</span></span><br><span class=\"line\">  <span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView!</span></span><br><span class=\"line\">  <span class=\"comment\">// 公有属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> showBottom: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span>       </span><br><span class=\"line\">  <span class=\"comment\">// 私有属性     </span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> delegate: <span class=\"type\">ViewControllerDelegate?</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> rows: [<span class=\"type\">Row</span>] = []</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    configVM()</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// override按生命周期顺序</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillAppear(animated)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidAppear(animated)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 每个extension内第一行空行</span></span><br><span class=\"line\"><span class=\"comment\">// @IBAction </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">clickButton</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类方法、开放的方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">classMethod</span>() </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">openMethod</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 私有的方法 </span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 协议，每个协议分开写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">UITableViewDelegate</span> </span>&#123;&#125; </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span>: <span class=\"title\">ScrollToTop</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据源配置相关放最后的extension</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ViewController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Row</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row1</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row2</span><br><span class=\"line\">    <span class=\"keyword\">case</span> row3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">configVM</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    rows = []</span><br><span class=\"line\">    rows.append(.row1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><ul>\n<li><strong>定义模型</strong></li>\n</ul>\n<p>【强制】唯一标识统一用id，不使用类似jobId写法</p>\n<p>【强制】不参与运算的String不需要初始化，如name,desc等仅用于显示的字段</p>\n<p>【强制】数组必须初始化，不使用optional写法</p>\n<ul>\n<li><strong>使用CocoaPods</strong></li>\n</ul>\n<p>【强制】导入库需要指定某一个确定的版本号，禁止使用大于等于之类的指定</p>\n<p>【强制】修改第三方库（禁止修改，除非特殊情况）需要新建一个Pod，并且在提交podfile修改的commit中注释原因</p>\n<p>【强制】不轻易引入第三方库，除了网络库、JSON转模型库、路由库等</p>\n<p>【强制】保持相同作用的库仅有一个</p>\n<p>【推荐】团队开发的库尽量引入framework，不引入源码</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/linkedin/swift-style-guide#1-code-formatting\" target=\"_blank\" rel=\"noopener\">swift-style-guide</a></p>\n<p><a href=\"http://www.cocoachina.com/swift/20160725/17176.html\" target=\"_blank\" rel=\"noopener\">最详尽的 Swift 代码规范指南</a></p>\n<p><a href=\"http://mobile.51cto.com/news-493482.htm\" target=\"_blank\" rel=\"noopener\">17条 Swift开发规范 最佳实践</a></p>\n<p><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language (Swift 4)</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"通过iPhone设备的identifier精确判断设备型号和是否是全屏设备","date":"2018-02-07T08:00:00.000Z","keywords":"iOS model swift identifier","description":"记录了iPhone设备的identifier，并以此判断iPhone设备的机型","_content":"\n记录 iPhone 设备的 identifier ，并以此判断设备型号。\n\n```swift\nimport UIKit\n\nextension UIDevice {\n\n    public enum iPhoneDevice {\n\n        enum DeviceIdentifier: String {\n\n            case iPhone1_1 = \"iPhone1,1\"\n            case iPhone1_2 = \"iPhone1,2\"\n            case iPhone2_1 = \"iPhone2,1\"\n            case iPhone3_1 = \"iPhone3,1\"\n            case iPhone3_2 = \"iPhone3,2\"\n            case iPhone3_3 = \"iPhone3,3\"\n            case iPhone4_1 = \"iPhone4,1\"\n            case iPhone5_1 = \"iPhone5,1\"\n            case iPhone5_2 = \"iPhone5,2\"\n            case iPhone5_3 = \"iPhone5,3\"\n            case iPhone5_4 = \"iPhone5,4\"\n            case iPhone6_1 = \"iPhone6,1\"\n            case iPhone6_2 = \"iPhone6,3\"\n            case iPhone7_1 = \"iPhone7,1\"\n            case iPhone7_2 = \"iPhone7,2\"\n            case iPhone8_1 = \"iPhone8,1\"\n            case iPhone8_2 = \"iPhone8,2\"\n            case iPhone8_4 = \"iPhone8,4\"\n            case iPhone9_1 = \"iPhone9,1\"\n            case iPhone9_2 = \"iPhone9,2\"\n            case iPhone9_3 = \"iPhone9,3\"\n            case iPhone9_4 = \"iPhone9,4\"\n            case iPhone10_1 = \"iPhone10,1\"\n            case iPhone10_2 = \"iPhone10,2\"\n            case iPhone10_3 = \"iPhone10,3\"\n            case iPhone10_4 = \"iPhone10,4\"\n            case iPhone10_5 = \"iPhone10,5\"\n            case iPhone10_6 = \"iPhone10,6\"\n            case iPhone11_2 = \"iPhone11,2\"\n            case iPhone11_4 = \"iPhone11,4\"\n            case iPhone11_6 = \"iPhone11,6\"\n            case iPhone11_8 = \"iPhone11,8\"\n            case iPhone12_1 = \"iPhone12,1\"\n            case iPhone12_3 = \"iPhone12,3\"\n            case iPhone12_5 = \"iPhone12,5\"\n        }\n\n        case iPhone\n        case iPhone3G\n        case iPhone3GS\n        case iPhone4\n        case iPhone4S\n        case iPhone5\n        case iPhone5c\n        case iPhone5s\n        case iPhone6\n        case iPhone6Plus\n        case iPhone6s\n        case iPhone6sPlus\n        case iPhoneSE\n        case iPhone7\n        case iPhone7Plus\n        case iPhone8\n        case iPhone8Plus\n        case iPhoneX\n        case iPhoneXs\n        case iPhoneXsMax\n        case iPhoneXr\n        case iPhone11\n        case iPhone11Pro\n        case iPhone11ProMax\n\n        init(identifier: DeviceIdentifier) {\n            switch identifier {\n            case .iPhone1_1:\n                self = .iPhone\n            case .iPhone1_2:\n                self = .iPhone3G\n            case .iPhone2_1:\n                self = .iPhone3GS\n            case .iPhone3_1, .iPhone3_2, .iPhone3_3:\n                self = .iPhone4\n            case .iPhone4_1:\n                self = .iPhone4S\n            case .iPhone5_1, .iPhone5_2:\n                self = .iPhone5\n            case .iPhone5_3, .iPhone5_4:\n                self = .iPhone5c\n            case .iPhone6_1, .iPhone6_2:\n                self = .iPhone5s\n            case .iPhone7_2:\n                self = .iPhone6\n            case .iPhone7_1:\n                self = .iPhone6Plus\n            case .iPhone8_1:\n                self = .iPhone6s\n            case .iPhone8_2:\n                self = .iPhone6sPlus\n            case .iPhone8_4:\n                self = .iPhoneSE\n            case .iPhone9_1, .iPhone9_3:\n                self = .iPhone7\n            case .iPhone9_2, .iPhone9_4:\n                self = .iPhone7Plus\n            case .iPhone10_1, .iPhone10_4:\n                self = .iPhone8\n            case .iPhone10_2, .iPhone10_5:\n                self = .iPhone8Plus\n            case .iPhone10_3, .iPhone10_6:\n                self = .iPhoneX\n            case .iPhone11_2:\n                self = .iPhoneXs\n            case .iPhone11_4, .iPhone11_6:\n                self = .iPhoneXsMax\n            case .iPhone11_8:\n                self = .iPhoneXr\n            case .iPhone12_1:\n                self = .iPhone11\n            case .iPhone12_3:\n                self = .iPhone11Pro\n            case .iPhone12_5:\n                self = .iPhone11ProMax\n            }\n        }\n    }\n\n    private var identifier: String {\n\n        var systemInfo = utsname()\n        uname(&systemInfo)\n        let machineMirror = Mirror(reflecting: systemInfo.machine)\n        let identifier = machineMirror.children.reduce(\"\") { identifier, element in\n            guard let value = element.value as? Int8, value != 0 else { return identifier }\n            return identifier + String(UnicodeScalar(UInt8(value)))\n        }\n        return identifier\n    }\n\n    public var isPad: Bool {\n        return userInterfaceIdiom == UIUserInterfaceIdiom.pad\n    }\n\n    public var isPhone: Bool {\n        return userInterfaceIdiom == UIUserInterfaceIdiom.phone\n    }\n\n    public var iPhoneGeneration: iPhoneDevice? {\n\n        let identifier = UIDevice.current.identifier\n        guard let deviceIdentifier = iPhoneDevice.DeviceIdentifier(rawValue: identifier) else {\n            return nil\n        }\n        return iPhoneDevice(identifier: deviceIdentifier)\n    }\n\n    public var isFullScreenSeries: Bool {\n        #if DEBUG\n            return ((UIScreen.main.bounds.width, UIScreen.main.bounds.height) == (375, 812) && UIScreen.main.scale == 3.0) || ((UIScreen.main.bounds.width, UIScreen.main.bounds.height) == (414, 896) && (UIScreen.main.scale == 3.0 || UIScreen.main.scale == 2.0))\n        #else\n        return [\n            iPhoneDevice.iPhoneX,\n            iPhoneDevice.iPhoneXs,\n            iPhoneDevice.iPhoneXsMax,\n            iPhoneDevice.iPhoneXr,\n            iPhoneDevice.iPhone11,\n            iPhoneDevice.iPhone11Pro,\n            iPhoneDevice.iPhone11ProMax\n        ].contains(iPhoneGeneration)\n        #endif\n    }\n}\n```\n\n使用：\n\n```swift\nlet model = UIDevice.current.iPhoneGeneration\nlet isFullScreenSeries = UIDevice.current.isFullScreenSeries\n```\n\n\n\n> 设备 identifier 摘自 [Model](https://www.theiphonewiki.com/wiki/Models) \n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2018-02-07-ios-device-model-identifier.md","raw":"---\ntitle: 通过iPhone设备的identifier精确判断设备型号和是否是全屏设备\ndate: 2018-02-07 16:00:00\ntags: \n     - iOS\ncategories: iOS\nkeywords: iOS model swift identifier\ndescription: 记录了iPhone设备的identifier，并以此判断iPhone设备的机型\n---\n\n记录 iPhone 设备的 identifier ，并以此判断设备型号。\n\n```swift\nimport UIKit\n\nextension UIDevice {\n\n    public enum iPhoneDevice {\n\n        enum DeviceIdentifier: String {\n\n            case iPhone1_1 = \"iPhone1,1\"\n            case iPhone1_2 = \"iPhone1,2\"\n            case iPhone2_1 = \"iPhone2,1\"\n            case iPhone3_1 = \"iPhone3,1\"\n            case iPhone3_2 = \"iPhone3,2\"\n            case iPhone3_3 = \"iPhone3,3\"\n            case iPhone4_1 = \"iPhone4,1\"\n            case iPhone5_1 = \"iPhone5,1\"\n            case iPhone5_2 = \"iPhone5,2\"\n            case iPhone5_3 = \"iPhone5,3\"\n            case iPhone5_4 = \"iPhone5,4\"\n            case iPhone6_1 = \"iPhone6,1\"\n            case iPhone6_2 = \"iPhone6,3\"\n            case iPhone7_1 = \"iPhone7,1\"\n            case iPhone7_2 = \"iPhone7,2\"\n            case iPhone8_1 = \"iPhone8,1\"\n            case iPhone8_2 = \"iPhone8,2\"\n            case iPhone8_4 = \"iPhone8,4\"\n            case iPhone9_1 = \"iPhone9,1\"\n            case iPhone9_2 = \"iPhone9,2\"\n            case iPhone9_3 = \"iPhone9,3\"\n            case iPhone9_4 = \"iPhone9,4\"\n            case iPhone10_1 = \"iPhone10,1\"\n            case iPhone10_2 = \"iPhone10,2\"\n            case iPhone10_3 = \"iPhone10,3\"\n            case iPhone10_4 = \"iPhone10,4\"\n            case iPhone10_5 = \"iPhone10,5\"\n            case iPhone10_6 = \"iPhone10,6\"\n            case iPhone11_2 = \"iPhone11,2\"\n            case iPhone11_4 = \"iPhone11,4\"\n            case iPhone11_6 = \"iPhone11,6\"\n            case iPhone11_8 = \"iPhone11,8\"\n            case iPhone12_1 = \"iPhone12,1\"\n            case iPhone12_3 = \"iPhone12,3\"\n            case iPhone12_5 = \"iPhone12,5\"\n        }\n\n        case iPhone\n        case iPhone3G\n        case iPhone3GS\n        case iPhone4\n        case iPhone4S\n        case iPhone5\n        case iPhone5c\n        case iPhone5s\n        case iPhone6\n        case iPhone6Plus\n        case iPhone6s\n        case iPhone6sPlus\n        case iPhoneSE\n        case iPhone7\n        case iPhone7Plus\n        case iPhone8\n        case iPhone8Plus\n        case iPhoneX\n        case iPhoneXs\n        case iPhoneXsMax\n        case iPhoneXr\n        case iPhone11\n        case iPhone11Pro\n        case iPhone11ProMax\n\n        init(identifier: DeviceIdentifier) {\n            switch identifier {\n            case .iPhone1_1:\n                self = .iPhone\n            case .iPhone1_2:\n                self = .iPhone3G\n            case .iPhone2_1:\n                self = .iPhone3GS\n            case .iPhone3_1, .iPhone3_2, .iPhone3_3:\n                self = .iPhone4\n            case .iPhone4_1:\n                self = .iPhone4S\n            case .iPhone5_1, .iPhone5_2:\n                self = .iPhone5\n            case .iPhone5_3, .iPhone5_4:\n                self = .iPhone5c\n            case .iPhone6_1, .iPhone6_2:\n                self = .iPhone5s\n            case .iPhone7_2:\n                self = .iPhone6\n            case .iPhone7_1:\n                self = .iPhone6Plus\n            case .iPhone8_1:\n                self = .iPhone6s\n            case .iPhone8_2:\n                self = .iPhone6sPlus\n            case .iPhone8_4:\n                self = .iPhoneSE\n            case .iPhone9_1, .iPhone9_3:\n                self = .iPhone7\n            case .iPhone9_2, .iPhone9_4:\n                self = .iPhone7Plus\n            case .iPhone10_1, .iPhone10_4:\n                self = .iPhone8\n            case .iPhone10_2, .iPhone10_5:\n                self = .iPhone8Plus\n            case .iPhone10_3, .iPhone10_6:\n                self = .iPhoneX\n            case .iPhone11_2:\n                self = .iPhoneXs\n            case .iPhone11_4, .iPhone11_6:\n                self = .iPhoneXsMax\n            case .iPhone11_8:\n                self = .iPhoneXr\n            case .iPhone12_1:\n                self = .iPhone11\n            case .iPhone12_3:\n                self = .iPhone11Pro\n            case .iPhone12_5:\n                self = .iPhone11ProMax\n            }\n        }\n    }\n\n    private var identifier: String {\n\n        var systemInfo = utsname()\n        uname(&systemInfo)\n        let machineMirror = Mirror(reflecting: systemInfo.machine)\n        let identifier = machineMirror.children.reduce(\"\") { identifier, element in\n            guard let value = element.value as? Int8, value != 0 else { return identifier }\n            return identifier + String(UnicodeScalar(UInt8(value)))\n        }\n        return identifier\n    }\n\n    public var isPad: Bool {\n        return userInterfaceIdiom == UIUserInterfaceIdiom.pad\n    }\n\n    public var isPhone: Bool {\n        return userInterfaceIdiom == UIUserInterfaceIdiom.phone\n    }\n\n    public var iPhoneGeneration: iPhoneDevice? {\n\n        let identifier = UIDevice.current.identifier\n        guard let deviceIdentifier = iPhoneDevice.DeviceIdentifier(rawValue: identifier) else {\n            return nil\n        }\n        return iPhoneDevice(identifier: deviceIdentifier)\n    }\n\n    public var isFullScreenSeries: Bool {\n        #if DEBUG\n            return ((UIScreen.main.bounds.width, UIScreen.main.bounds.height) == (375, 812) && UIScreen.main.scale == 3.0) || ((UIScreen.main.bounds.width, UIScreen.main.bounds.height) == (414, 896) && (UIScreen.main.scale == 3.0 || UIScreen.main.scale == 2.0))\n        #else\n        return [\n            iPhoneDevice.iPhoneX,\n            iPhoneDevice.iPhoneXs,\n            iPhoneDevice.iPhoneXsMax,\n            iPhoneDevice.iPhoneXr,\n            iPhoneDevice.iPhone11,\n            iPhoneDevice.iPhone11Pro,\n            iPhoneDevice.iPhone11ProMax\n        ].contains(iPhoneGeneration)\n        #endif\n    }\n}\n```\n\n使用：\n\n```swift\nlet model = UIDevice.current.iPhoneGeneration\nlet isFullScreenSeries = UIDevice.current.isFullScreenSeries\n```\n\n\n\n> 设备 identifier 摘自 [Model](https://www.theiphonewiki.com/wiki/Models) \n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"ios-device-model-identifier","published":1,"updated":"2020-02-25T15:23:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q8002w07eiqljkflpq","content":"<p>记录 iPhone 设备的 identifier ，并以此判断设备型号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIDevice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">iPhoneDevice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DeviceIdentifier</span>: <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone1_1 = <span class=\"string\">\"iPhone1,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone1_2 = <span class=\"string\">\"iPhone1,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone2_1 = <span class=\"string\">\"iPhone2,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_1 = <span class=\"string\">\"iPhone3,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_2 = <span class=\"string\">\"iPhone3,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_3 = <span class=\"string\">\"iPhone3,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone4_1 = <span class=\"string\">\"iPhone4,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_1 = <span class=\"string\">\"iPhone5,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_2 = <span class=\"string\">\"iPhone5,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_3 = <span class=\"string\">\"iPhone5,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_4 = <span class=\"string\">\"iPhone5,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone6_1 = <span class=\"string\">\"iPhone6,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone6_2 = <span class=\"string\">\"iPhone6,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone7_1 = <span class=\"string\">\"iPhone7,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone7_2 = <span class=\"string\">\"iPhone7,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_1 = <span class=\"string\">\"iPhone8,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_2 = <span class=\"string\">\"iPhone8,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_4 = <span class=\"string\">\"iPhone8,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_1 = <span class=\"string\">\"iPhone9,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_2 = <span class=\"string\">\"iPhone9,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_3 = <span class=\"string\">\"iPhone9,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_4 = <span class=\"string\">\"iPhone9,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_1 = <span class=\"string\">\"iPhone10,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_2 = <span class=\"string\">\"iPhone10,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_3 = <span class=\"string\">\"iPhone10,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_4 = <span class=\"string\">\"iPhone10,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_5 = <span class=\"string\">\"iPhone10,5\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_6 = <span class=\"string\">\"iPhone10,6\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_2 = <span class=\"string\">\"iPhone11,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_4 = <span class=\"string\">\"iPhone11,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_6 = <span class=\"string\">\"iPhone11,6\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_8 = <span class=\"string\">\"iPhone11,8\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_1 = <span class=\"string\">\"iPhone12,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_3 = <span class=\"string\">\"iPhone12,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_5 = <span class=\"string\">\"iPhone12,5\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone3G</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone3GS</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone4</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone4S</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5c</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5s</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6s</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6sPlus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneSE</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone7Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone8</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone8Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneX</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXs</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXsMax</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXr</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11Pro</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11ProMax</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">init</span>(identifier: <span class=\"type\">DeviceIdentifier</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> identifier &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone1_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone1_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone3G</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone2_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone3GS</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone3_1, .iPhone3_2, .iPhone3_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone4</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone4S</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5_1, .iPhone5_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5_3, .iPhone5_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5c</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6_1, .iPhone6_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5s</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6s</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6sPlus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneSE</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone9_1, .iPhone9_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone7</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone9_2, .iPhone9_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone7Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_1, .iPhone10_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone8</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_2, .iPhone10_5:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone8Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_3, .iPhone10_6:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneX</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXs</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_4, .iPhone11_6:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXsMax</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_8:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXr</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11Pro</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_5:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11ProMax</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> identifier: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> systemInfo = utsname()</span><br><span class=\"line\">        uname(&amp;systemInfo)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> machineMirror = <span class=\"type\">Mirror</span>(reflecting: systemInfo.machine)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identifier = machineMirror.children.<span class=\"built_in\">reduce</span>(<span class=\"string\">\"\"</span>) &#123; identifier, element <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = element.value <span class=\"keyword\">as</span>? <span class=\"type\">Int8</span>, value != <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> identifier &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> identifier + <span class=\"type\">String</span>(<span class=\"type\">UnicodeScalar</span>(<span class=\"type\">UInt8</span>(value)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> identifier</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isPad: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userInterfaceIdiom == <span class=\"type\">UIUserInterfaceIdiom</span>.pad</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isPhone: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userInterfaceIdiom == <span class=\"type\">UIUserInterfaceIdiom</span>.phone</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> iPhoneGeneration: iPhoneDevice? &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> identifier = <span class=\"type\">UIDevice</span>.current.identifier</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> deviceIdentifier = iPhoneDevice.<span class=\"type\">DeviceIdentifier</span>(rawValue: identifier) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneDevice(identifier: deviceIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isFullScreenSeries: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        #<span class=\"keyword\">if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((<span class=\"type\">UIScreen</span>.main.bounds.width, <span class=\"type\">UIScreen</span>.main.bounds.height) == (<span class=\"number\">375</span>, <span class=\"number\">812</span>) &amp;&amp; <span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">3.0</span>) || ((<span class=\"type\">UIScreen</span>.main.bounds.width, <span class=\"type\">UIScreen</span>.main.bounds.height) == (<span class=\"number\">414</span>, <span class=\"number\">896</span>) &amp;&amp; (<span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">3.0</span> || <span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">2.0</span>))</span><br><span class=\"line\">        #<span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">            iPhoneDevice.iPhoneX,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXs,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXsMax,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXr,</span><br><span class=\"line\">            iPhoneDevice.iPhone11,</span><br><span class=\"line\">            iPhoneDevice.iPhone11Pro,</span><br><span class=\"line\">            iPhoneDevice.iPhone11ProMax</span><br><span class=\"line\">        ].<span class=\"built_in\">contains</span>(iPhoneGeneration)</span><br><span class=\"line\">        #endif</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> model = <span class=\"type\">UIDevice</span>.current.iPhoneGeneration</span><br><span class=\"line\"><span class=\"keyword\">let</span> isFullScreenSeries = <span class=\"type\">UIDevice</span>.current.isFullScreenSeries</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设备 identifier 摘自 <a href=\"https://www.theiphonewiki.com/wiki/Models\" target=\"_blank\" rel=\"noopener\">Model</a> </p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>记录 iPhone 设备的 identifier ，并以此判断设备型号。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UIDevice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">iPhoneDevice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DeviceIdentifier</span>: <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone1_1 = <span class=\"string\">\"iPhone1,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone1_2 = <span class=\"string\">\"iPhone1,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone2_1 = <span class=\"string\">\"iPhone2,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_1 = <span class=\"string\">\"iPhone3,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_2 = <span class=\"string\">\"iPhone3,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone3_3 = <span class=\"string\">\"iPhone3,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone4_1 = <span class=\"string\">\"iPhone4,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_1 = <span class=\"string\">\"iPhone5,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_2 = <span class=\"string\">\"iPhone5,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_3 = <span class=\"string\">\"iPhone5,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone5_4 = <span class=\"string\">\"iPhone5,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone6_1 = <span class=\"string\">\"iPhone6,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone6_2 = <span class=\"string\">\"iPhone6,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone7_1 = <span class=\"string\">\"iPhone7,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone7_2 = <span class=\"string\">\"iPhone7,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_1 = <span class=\"string\">\"iPhone8,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_2 = <span class=\"string\">\"iPhone8,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone8_4 = <span class=\"string\">\"iPhone8,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_1 = <span class=\"string\">\"iPhone9,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_2 = <span class=\"string\">\"iPhone9,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_3 = <span class=\"string\">\"iPhone9,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone9_4 = <span class=\"string\">\"iPhone9,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_1 = <span class=\"string\">\"iPhone10,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_2 = <span class=\"string\">\"iPhone10,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_3 = <span class=\"string\">\"iPhone10,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_4 = <span class=\"string\">\"iPhone10,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_5 = <span class=\"string\">\"iPhone10,5\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone10_6 = <span class=\"string\">\"iPhone10,6\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_2 = <span class=\"string\">\"iPhone11,2\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_4 = <span class=\"string\">\"iPhone11,4\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_6 = <span class=\"string\">\"iPhone11,6\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone11_8 = <span class=\"string\">\"iPhone11,8\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_1 = <span class=\"string\">\"iPhone12,1\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_3 = <span class=\"string\">\"iPhone12,3\"</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> iPhone12_5 = <span class=\"string\">\"iPhone12,5\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone3G</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone3GS</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone4</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone4S</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5c</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone5s</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6s</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone6sPlus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneSE</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone7</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone7Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone8</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone8Plus</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneX</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXs</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXsMax</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhoneXr</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11Pro</span><br><span class=\"line\">        <span class=\"keyword\">case</span> iPhone11ProMax</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">init</span>(identifier: <span class=\"type\">DeviceIdentifier</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> identifier &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone1_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone1_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone3G</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone2_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone3GS</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone3_1, .iPhone3_2, .iPhone3_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone4</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone4_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone4S</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5_1, .iPhone5_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone5_3, .iPhone5_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5c</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone6_1, .iPhone6_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone5s</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone7_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6s</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone6sPlus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone8_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneSE</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone9_1, .iPhone9_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone7</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone9_2, .iPhone9_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone7Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_1, .iPhone10_4:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone8</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_2, .iPhone10_5:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone8Plus</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone10_3, .iPhone10_6:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneX</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_2:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXs</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_4, .iPhone11_6:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXsMax</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone11_8:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhoneXr</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_1:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_3:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11Pro</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .iPhone12_5:</span><br><span class=\"line\">                <span class=\"keyword\">self</span> = .iPhone11ProMax</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> identifier: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> systemInfo = utsname()</span><br><span class=\"line\">        uname(&amp;systemInfo)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> machineMirror = <span class=\"type\">Mirror</span>(reflecting: systemInfo.machine)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> identifier = machineMirror.children.<span class=\"built_in\">reduce</span>(<span class=\"string\">\"\"</span>) &#123; identifier, element <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = element.value <span class=\"keyword\">as</span>? <span class=\"type\">Int8</span>, value != <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> identifier &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> identifier + <span class=\"type\">String</span>(<span class=\"type\">UnicodeScalar</span>(<span class=\"type\">UInt8</span>(value)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> identifier</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isPad: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userInterfaceIdiom == <span class=\"type\">UIUserInterfaceIdiom</span>.pad</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isPhone: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userInterfaceIdiom == <span class=\"type\">UIUserInterfaceIdiom</span>.phone</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> iPhoneGeneration: iPhoneDevice? &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> identifier = <span class=\"type\">UIDevice</span>.current.identifier</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> deviceIdentifier = iPhoneDevice.<span class=\"type\">DeviceIdentifier</span>(rawValue: identifier) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iPhoneDevice(identifier: deviceIdentifier)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isFullScreenSeries: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        #<span class=\"keyword\">if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((<span class=\"type\">UIScreen</span>.main.bounds.width, <span class=\"type\">UIScreen</span>.main.bounds.height) == (<span class=\"number\">375</span>, <span class=\"number\">812</span>) &amp;&amp; <span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">3.0</span>) || ((<span class=\"type\">UIScreen</span>.main.bounds.width, <span class=\"type\">UIScreen</span>.main.bounds.height) == (<span class=\"number\">414</span>, <span class=\"number\">896</span>) &amp;&amp; (<span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">3.0</span> || <span class=\"type\">UIScreen</span>.main.scale == <span class=\"number\">2.0</span>))</span><br><span class=\"line\">        #<span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">            iPhoneDevice.iPhoneX,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXs,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXsMax,</span><br><span class=\"line\">            iPhoneDevice.iPhoneXr,</span><br><span class=\"line\">            iPhoneDevice.iPhone11,</span><br><span class=\"line\">            iPhoneDevice.iPhone11Pro,</span><br><span class=\"line\">            iPhoneDevice.iPhone11ProMax</span><br><span class=\"line\">        ].<span class=\"built_in\">contains</span>(iPhoneGeneration)</span><br><span class=\"line\">        #endif</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> model = <span class=\"type\">UIDevice</span>.current.iPhoneGeneration</span><br><span class=\"line\"><span class=\"keyword\">let</span> isFullScreenSeries = <span class=\"type\">UIDevice</span>.current.isFullScreenSeries</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设备 identifier 摘自 <a href=\"https://www.theiphonewiki.com/wiki/Models\" target=\"_blank\" rel=\"noopener\">Model</a> </p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"手把手教你用Source Editor Extension开发Xcode插件","date":"2019-04-24T14:00:00.000Z","keywords":"Xcode插件 SourceEditorExtension","description":"详细介绍了如何使用Xcode Source Editor Extension 开发 Xcode 插件，以及实现了一个将代码的 import 排序的 Demo","_content":"\n# 目录\n\n+ 前言\n+ Xcode 插件史\n+ 实现插件\n  - 创建 macOS 应用\n  - 编写插件代码\n  - 修改插件命名\n  - 调试插件\n  - 分发插件\n  - 设置快捷键\n+ 进阶讲解\n  - Demo 逻辑\n  - Plist 文件处理\n  - XCSourceEditorCommand 协议\n  - XCSourceEditorExtension 协议\n+ 总结\n\n\n\n# 前言\n\n一个项目工程，随着架构的阶段性稳定、公共组件的抽离和代码规范的制定等，势必会进入一个\"重复劳动\"的阶段。所谓\"重复劳动\"，即需求都有固定的模式和分解步骤去完成，大部分是重复、一致的代码编写，只有少部分工作需要思考、抽象、实现。但往往这些\"重复劳动\"占据了大部分时间成本，而且由于其机械性所以最容易出现问题。\n\n于是将重复劳动自动化，即用代码写代码，是一个团队的重点工作之一，让成员将时间和精力放在更值得关注的事情上。而开发 IDE 插件，可以实现这种代码层面的自动化。\n\n本来想做个插件，实现生成 cell 的 .xib 和 .swift 文件并自动关联等功能，练练手，结果发现目前 Xcode 开放的插件并不能支持。\n\n\n\n# Xcode插件史\n\n在Xcode 8之前，Xcode 插件有着比较辉煌的发展，各种便利的插件、专门的插件管理工具 Alcatraz 等。\n\n但从 Xcode 8 开始，出于安全性考虑（比如说 Xcode ghost 事件），Apple 不再支持第三方的插件，但提供了解决方案—— Xcode Source Editor Extension，目前只能完成有限的文本编辑辅助。\n\n> 本文Demo：[https://github.com/sapphirezzz/ZXcodeExtension](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsapphirezzz%2FZXcodeExtension)）\n\n\n\n# 实现插件\n\n本文开发环境：Xcode Version 10.2.1 (10E1001)\n\n## 创建macOS应用\n\n打开Xcode，File->New->Project…，选择 macOS->Application>Cocoa App，填写 Product Name\n\n![20190424135311](20190424135311.jpg)\n\n新建 Target，File->New->Target…，选择 macOS->Application Extension->Xcode Source Editor Extension，填写 Product Name，如 ZExtension。在弹窗中选择 Activate。\n\n**注意：该 Target 的命名会成为后面使用插件时一级菜单名称。**\n\n![20190424135633](20190424135633.jpg)\n\n## 编写插件代码\n\n修改 SourceEditorCommand.swift 文件。\n\n> 以下代码实现将import排序的功能\n\n```swift\nfunc perform(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -> Void ) -> Void {\n    // Implement your command here, invoking the completion handler when done. Pass it nil on success, and an NSError on failure.\n\n    let linesToSort = invocation.buffer.lines.filter { line in\n        return (line as? String)?.hasPrefix(\"import\") ?? false\n    }\n\n    guard linesToSort.count > 0 else {\n        completionHandler(nil)\n        return\n    }\n\n    let firstLineIndex = invocation.buffer.lines.index(of: linesToSort[0]) // For insert\n    guard firstLineIndex >= 0 else {\n        completionHandler(nil)\n        return\n    }\n    invocation.buffer.lines.removeObjects(in: linesToSort)\n    let linesSorted = (linesToSort as? [String] ?? []).sorted() {$0 <= $1}\n    linesSorted.reversed().forEach { (line) in\n        invocation.buffer.lines.insert(line, at: firstLineIndex)\n    }\n    let selectionsUpdated: [XCSourceTextRange] = (0..<linesSorted.count).map { (index) in\n        let lineIndex = firstLineIndex + index\n        let endColumn = linesSorted[index].count - 1\n        return XCSourceTextRange(start: XCSourceTextPosition(line: lineIndex, column: 0), end: XCSourceTextPosition(line: lineIndex, column: endColumn))\n    }\n    invocation.buffer.selections.setArray(selectionsUpdated)\n    completionHandler(nil)\n}\n```\n\n## 修改插件命名\n\n在 ZExtension/Info.plist 中可以修改插件名称，对应的 Key 是 XCSourceEditorCommandName，支持中文。\n\n不修改则默认是 Source Editor Command。\n\n## 调试插件\n\n选择该新建的 Scheme，如 ZExtension，运行（Command+R）。在弹窗中选择 Xcode，点 击Run。\n\n![20190424145603](20190424145603.jpg)\n\n接下来会弹出灰色的Xcode界面，新建项目或者打开测试项目。本文用了测试项目 Test。\n\n![20190424150404](20190424150404.jpg)\n\n使用插件排序，点击 Editor->ZExtension->Source Editor Command。\n\n![20190424150422](20190424150422.jpg)\n\n以下为插件运行后的结果：\n\n![20190424150437](20190424150437.jpg)\n\n结果显示，所有 import 排好序了！\n\n## 分发插件\n\n插件完成后，就需要投入工作中使用。\n\n+ 上架 Mac App Store\n\n编写的插件可以发布，上架到 Mac App Store。在 Xcode->Xcode Extensions… 可以看到上架的插件。笔者还没有发布，先略过。\n\n+ 内部使用\n\n在插件项目中，将 Products->ZXcodeExtension.app 文件拷贝到应用程序，并双击打开。此时在系统偏好设置->扩展->Xcode Source Editor，可以看到该插件，并且已勾选。重启 Xcode 就可以使用了。\n\n## 设置快捷键\n\n可以给插件设置快捷键，方便使用。\n\n在 Xcode->Preferences…->Key Bindings->Editor Menu for Source Code，找到并设置。建议用 alt 如 alt+s，避免和其他快捷键冲突。\n\n\n\n# 进阶讲解\n\n\n实现之后，简单讲解下一些细节。\n\n## Demo逻辑\n\nDemo中主要操作了两个内容：\n\n1. invocation.buffer.lines\n2. invocation.buffer.selections\n\n> lines 是当前编辑文件的每一行的内容，selections 是当前编辑文件选中的内容。\n\nDemo 逻辑是：\n\n1. 筛选出符合条件的行 linesToSort（以 import 开头）\n2. 记录第一个符合条件的行的行数firstLineIndex，作为排序后的插入位置\n3. 从 invocation.buffer.lines 中删除符合条件的行\n4. 将符合条件的行进行排序得出 linesSorted\n5. 将排序后的行插入 invocation.buffer.lines\n6. 获取所有改动行信息 selectionsUpdated，设置 invocation.buffer.selections\n\n主要是对 XCSourceEditorCommand 协议的实现。\n\n## Plist 文件处理\n\nInfo.plist 文件中重要的 key 是 NSExtension 的 NSExtensionAttributes，包含两个 key：\n\n1. XCSourceEditorCommandDefinitions\n2. XCSourceEditorExtensionPrincipalClass\n\n### XCSourceEditorCommandDefinitions\n\nXCSourceEditorCommandDefinitions 是设置了每个命令（二级菜单）的信息：\n\n1. XCSourceEditorCommandClassName\n2. XCSourceEditorCommandIdentifier\n3. XCSourceEditorCommandName\n\n第一个是处理这个命令的类名，该类需实现 XCSourceEditorCommand 协议；第二个是每个命令的标示，用于 XCSourceEditorCommand 协议的方法区分处理命令；第三个是命令的展示名字。\n\n### XCSourceEditorExtensionPrincipalClass\n\n该扩展的类名，该类需实现 XCSourceEditorExtension 协议。\n\n## XCSourceEditorCommand协议\n\n```swift\n/** A command provided by a source editor extension. There does not need to be a one-to-one mapping between command classes and commands: Multiple commands can be handled by a single class, by checking their invocation's commandIdentifier at runtime. */\n@protocol XCSourceEditorCommand <NSObject>\n```\n\n根据官方注释，一个实现了 XCSourceEditorCommand 的类可以处理多种命令，即多个二级菜单，通过 invocation.commandIdentifier 来区分。而 commandIdentifier 是 Info.plist 中，XCSourceEditorCommandDefinitions 里面每一项的 XCSourceEditorCommandIdentifier 所定义的。\n\n```swift\n/** Perform the action associated with the command using the information in \\a invocation. Xcode will pass the code a completion handler that it must invoke to finish performing the command, passing nil on success or an error on failure.\n \n A canceled command must still call the completion handler, passing nil.\n \n \\note Make no assumptions about the thread or queue on which this method will be invoked.\n */\n- (void)performCommandWithInvocation:(XCSourceEditorCommandInvocation *)invocation completionHandler:(void (^)(NSError * _Nullable nilOrError))completionHandler;\n```\n\n这是 XCSourceEditorCommand 协议定义的方法。\n\n+ XCSourceEditorCommandInvocation\n\ncommandIdentifier 属性，用于区分不同命令；buffer，XCSourceTextBuffer 类型，主要用它的 lines 和 selections 属性。\n\n+ completionHandler\n\n实现逻辑之后，必须调用 completionHandler 以结束插件命令，成功时传参 nil，失败时传参 error 对象。即使取消处理也需要调用并传参 nil。\n\n**结合 Plist 文件和 XCSourceEditorCommand 协议，我们可以编写处理多个命令的插件。**\n\n## XCSourceEditorExtension协议\n\n```swift\n/** Invoked when the extension has been launched, which may be some time before the extension actually receives a command (if ever).\n \n \\note Make no assumptions about the thread or queue on which this method will be invoked.\n */\n- (void)extensionDidFinishLaunching;\n```\n\n\n插件被加载后的处理。\n\n\n\n# 总结\n\n可以看出，目前 Xcode Source Editor Extension 解决方案能实现的插件功能很有限，不支持UI交互，只能局限于文本处理上。希望以后苹果能扩展更多 API 供开发者使用。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension.md","raw":"---\ntitle: 手把手教你用Source Editor Extension开发Xcode插件\ndate: 2019-04-24 22:00:00\ntags: \n     - Xcode插件\n     - iOS\ncategories: iOS\nkeywords: Xcode插件 SourceEditorExtension\ndescription: 详细介绍了如何使用Xcode Source Editor Extension 开发 Xcode 插件，以及实现了一个将代码的 import 排序的 Demo\n---\n\n# 目录\n\n+ 前言\n+ Xcode 插件史\n+ 实现插件\n  - 创建 macOS 应用\n  - 编写插件代码\n  - 修改插件命名\n  - 调试插件\n  - 分发插件\n  - 设置快捷键\n+ 进阶讲解\n  - Demo 逻辑\n  - Plist 文件处理\n  - XCSourceEditorCommand 协议\n  - XCSourceEditorExtension 协议\n+ 总结\n\n\n\n# 前言\n\n一个项目工程，随着架构的阶段性稳定、公共组件的抽离和代码规范的制定等，势必会进入一个\"重复劳动\"的阶段。所谓\"重复劳动\"，即需求都有固定的模式和分解步骤去完成，大部分是重复、一致的代码编写，只有少部分工作需要思考、抽象、实现。但往往这些\"重复劳动\"占据了大部分时间成本，而且由于其机械性所以最容易出现问题。\n\n于是将重复劳动自动化，即用代码写代码，是一个团队的重点工作之一，让成员将时间和精力放在更值得关注的事情上。而开发 IDE 插件，可以实现这种代码层面的自动化。\n\n本来想做个插件，实现生成 cell 的 .xib 和 .swift 文件并自动关联等功能，练练手，结果发现目前 Xcode 开放的插件并不能支持。\n\n\n\n# Xcode插件史\n\n在Xcode 8之前，Xcode 插件有着比较辉煌的发展，各种便利的插件、专门的插件管理工具 Alcatraz 等。\n\n但从 Xcode 8 开始，出于安全性考虑（比如说 Xcode ghost 事件），Apple 不再支持第三方的插件，但提供了解决方案—— Xcode Source Editor Extension，目前只能完成有限的文本编辑辅助。\n\n> 本文Demo：[https://github.com/sapphirezzz/ZXcodeExtension](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsapphirezzz%2FZXcodeExtension)）\n\n\n\n# 实现插件\n\n本文开发环境：Xcode Version 10.2.1 (10E1001)\n\n## 创建macOS应用\n\n打开Xcode，File->New->Project…，选择 macOS->Application>Cocoa App，填写 Product Name\n\n![20190424135311](20190424135311.jpg)\n\n新建 Target，File->New->Target…，选择 macOS->Application Extension->Xcode Source Editor Extension，填写 Product Name，如 ZExtension。在弹窗中选择 Activate。\n\n**注意：该 Target 的命名会成为后面使用插件时一级菜单名称。**\n\n![20190424135633](20190424135633.jpg)\n\n## 编写插件代码\n\n修改 SourceEditorCommand.swift 文件。\n\n> 以下代码实现将import排序的功能\n\n```swift\nfunc perform(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -> Void ) -> Void {\n    // Implement your command here, invoking the completion handler when done. Pass it nil on success, and an NSError on failure.\n\n    let linesToSort = invocation.buffer.lines.filter { line in\n        return (line as? String)?.hasPrefix(\"import\") ?? false\n    }\n\n    guard linesToSort.count > 0 else {\n        completionHandler(nil)\n        return\n    }\n\n    let firstLineIndex = invocation.buffer.lines.index(of: linesToSort[0]) // For insert\n    guard firstLineIndex >= 0 else {\n        completionHandler(nil)\n        return\n    }\n    invocation.buffer.lines.removeObjects(in: linesToSort)\n    let linesSorted = (linesToSort as? [String] ?? []).sorted() {$0 <= $1}\n    linesSorted.reversed().forEach { (line) in\n        invocation.buffer.lines.insert(line, at: firstLineIndex)\n    }\n    let selectionsUpdated: [XCSourceTextRange] = (0..<linesSorted.count).map { (index) in\n        let lineIndex = firstLineIndex + index\n        let endColumn = linesSorted[index].count - 1\n        return XCSourceTextRange(start: XCSourceTextPosition(line: lineIndex, column: 0), end: XCSourceTextPosition(line: lineIndex, column: endColumn))\n    }\n    invocation.buffer.selections.setArray(selectionsUpdated)\n    completionHandler(nil)\n}\n```\n\n## 修改插件命名\n\n在 ZExtension/Info.plist 中可以修改插件名称，对应的 Key 是 XCSourceEditorCommandName，支持中文。\n\n不修改则默认是 Source Editor Command。\n\n## 调试插件\n\n选择该新建的 Scheme，如 ZExtension，运行（Command+R）。在弹窗中选择 Xcode，点 击Run。\n\n![20190424145603](20190424145603.jpg)\n\n接下来会弹出灰色的Xcode界面，新建项目或者打开测试项目。本文用了测试项目 Test。\n\n![20190424150404](20190424150404.jpg)\n\n使用插件排序，点击 Editor->ZExtension->Source Editor Command。\n\n![20190424150422](20190424150422.jpg)\n\n以下为插件运行后的结果：\n\n![20190424150437](20190424150437.jpg)\n\n结果显示，所有 import 排好序了！\n\n## 分发插件\n\n插件完成后，就需要投入工作中使用。\n\n+ 上架 Mac App Store\n\n编写的插件可以发布，上架到 Mac App Store。在 Xcode->Xcode Extensions… 可以看到上架的插件。笔者还没有发布，先略过。\n\n+ 内部使用\n\n在插件项目中，将 Products->ZXcodeExtension.app 文件拷贝到应用程序，并双击打开。此时在系统偏好设置->扩展->Xcode Source Editor，可以看到该插件，并且已勾选。重启 Xcode 就可以使用了。\n\n## 设置快捷键\n\n可以给插件设置快捷键，方便使用。\n\n在 Xcode->Preferences…->Key Bindings->Editor Menu for Source Code，找到并设置。建议用 alt 如 alt+s，避免和其他快捷键冲突。\n\n\n\n# 进阶讲解\n\n\n实现之后，简单讲解下一些细节。\n\n## Demo逻辑\n\nDemo中主要操作了两个内容：\n\n1. invocation.buffer.lines\n2. invocation.buffer.selections\n\n> lines 是当前编辑文件的每一行的内容，selections 是当前编辑文件选中的内容。\n\nDemo 逻辑是：\n\n1. 筛选出符合条件的行 linesToSort（以 import 开头）\n2. 记录第一个符合条件的行的行数firstLineIndex，作为排序后的插入位置\n3. 从 invocation.buffer.lines 中删除符合条件的行\n4. 将符合条件的行进行排序得出 linesSorted\n5. 将排序后的行插入 invocation.buffer.lines\n6. 获取所有改动行信息 selectionsUpdated，设置 invocation.buffer.selections\n\n主要是对 XCSourceEditorCommand 协议的实现。\n\n## Plist 文件处理\n\nInfo.plist 文件中重要的 key 是 NSExtension 的 NSExtensionAttributes，包含两个 key：\n\n1. XCSourceEditorCommandDefinitions\n2. XCSourceEditorExtensionPrincipalClass\n\n### XCSourceEditorCommandDefinitions\n\nXCSourceEditorCommandDefinitions 是设置了每个命令（二级菜单）的信息：\n\n1. XCSourceEditorCommandClassName\n2. XCSourceEditorCommandIdentifier\n3. XCSourceEditorCommandName\n\n第一个是处理这个命令的类名，该类需实现 XCSourceEditorCommand 协议；第二个是每个命令的标示，用于 XCSourceEditorCommand 协议的方法区分处理命令；第三个是命令的展示名字。\n\n### XCSourceEditorExtensionPrincipalClass\n\n该扩展的类名，该类需实现 XCSourceEditorExtension 协议。\n\n## XCSourceEditorCommand协议\n\n```swift\n/** A command provided by a source editor extension. There does not need to be a one-to-one mapping between command classes and commands: Multiple commands can be handled by a single class, by checking their invocation's commandIdentifier at runtime. */\n@protocol XCSourceEditorCommand <NSObject>\n```\n\n根据官方注释，一个实现了 XCSourceEditorCommand 的类可以处理多种命令，即多个二级菜单，通过 invocation.commandIdentifier 来区分。而 commandIdentifier 是 Info.plist 中，XCSourceEditorCommandDefinitions 里面每一项的 XCSourceEditorCommandIdentifier 所定义的。\n\n```swift\n/** Perform the action associated with the command using the information in \\a invocation. Xcode will pass the code a completion handler that it must invoke to finish performing the command, passing nil on success or an error on failure.\n \n A canceled command must still call the completion handler, passing nil.\n \n \\note Make no assumptions about the thread or queue on which this method will be invoked.\n */\n- (void)performCommandWithInvocation:(XCSourceEditorCommandInvocation *)invocation completionHandler:(void (^)(NSError * _Nullable nilOrError))completionHandler;\n```\n\n这是 XCSourceEditorCommand 协议定义的方法。\n\n+ XCSourceEditorCommandInvocation\n\ncommandIdentifier 属性，用于区分不同命令；buffer，XCSourceTextBuffer 类型，主要用它的 lines 和 selections 属性。\n\n+ completionHandler\n\n实现逻辑之后，必须调用 completionHandler 以结束插件命令，成功时传参 nil，失败时传参 error 对象。即使取消处理也需要调用并传参 nil。\n\n**结合 Plist 文件和 XCSourceEditorCommand 协议，我们可以编写处理多个命令的插件。**\n\n## XCSourceEditorExtension协议\n\n```swift\n/** Invoked when the extension has been launched, which may be some time before the extension actually receives a command (if ever).\n \n \\note Make no assumptions about the thread or queue on which this method will be invoked.\n */\n- (void)extensionDidFinishLaunching;\n```\n\n\n插件被加载后的处理。\n\n\n\n# 总结\n\n可以看出，目前 Xcode Source Editor Extension 解决方案能实现的插件功能很有限，不支持UI交互，只能局限于文本处理上。希望以后苹果能扩展更多 API 供开发者使用。\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"create-xcode-plug-in-by-source-editor-extension","published":1,"updated":"2020-02-25T15:23:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7q9002y07eiwn1g3fo2","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Xcode 插件史</li>\n<li>实现插件<ul>\n<li>创建 macOS 应用</li>\n<li>编写插件代码</li>\n<li>修改插件命名</li>\n<li>调试插件</li>\n<li>分发插件</li>\n<li>设置快捷键</li>\n</ul>\n</li>\n<li>进阶讲解<ul>\n<li>Demo 逻辑</li>\n<li>Plist 文件处理</li>\n<li>XCSourceEditorCommand 协议</li>\n<li>XCSourceEditorExtension 协议</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个项目工程，随着架构的阶段性稳定、公共组件的抽离和代码规范的制定等，势必会进入一个”重复劳动”的阶段。所谓”重复劳动”，即需求都有固定的模式和分解步骤去完成，大部分是重复、一致的代码编写，只有少部分工作需要思考、抽象、实现。但往往这些”重复劳动”占据了大部分时间成本，而且由于其机械性所以最容易出现问题。</p>\n<p>于是将重复劳动自动化，即用代码写代码，是一个团队的重点工作之一，让成员将时间和精力放在更值得关注的事情上。而开发 IDE 插件，可以实现这种代码层面的自动化。</p>\n<p>本来想做个插件，实现生成 cell 的 .xib 和 .swift 文件并自动关联等功能，练练手，结果发现目前 Xcode 开放的插件并不能支持。</p>\n<h1 id=\"Xcode插件史\"><a href=\"#Xcode插件史\" class=\"headerlink\" title=\"Xcode插件史\"></a>Xcode插件史</h1><p>在Xcode 8之前，Xcode 插件有着比较辉煌的发展，各种便利的插件、专门的插件管理工具 Alcatraz 等。</p>\n<p>但从 Xcode 8 开始，出于安全性考虑（比如说 Xcode ghost 事件），Apple 不再支持第三方的插件，但提供了解决方案—— Xcode Source Editor Extension，目前只能完成有限的文本编辑辅助。</p>\n<blockquote>\n<p>本文Demo：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsapphirezzz%2FZXcodeExtension\" target=\"_blank\" rel=\"noopener\">https://github.com/sapphirezzz/ZXcodeExtension</a>）</p>\n</blockquote>\n<h1 id=\"实现插件\"><a href=\"#实现插件\" class=\"headerlink\" title=\"实现插件\"></a>实现插件</h1><p>本文开发环境：Xcode Version 10.2.1 (10E1001)</p>\n<h2 id=\"创建macOS应用\"><a href=\"#创建macOS应用\" class=\"headerlink\" title=\"创建macOS应用\"></a>创建macOS应用</h2><p>打开Xcode，File-&gt;New-&gt;Project…，选择 macOS-&gt;Application&gt;Cocoa App，填写 Product Name</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135311.jpg\" alt=\"20190424135311\"></p>\n<p>新建 Target，File-&gt;New-&gt;Target…，选择 macOS-&gt;Application Extension-&gt;Xcode Source Editor Extension，填写 Product Name，如 ZExtension。在弹窗中选择 Activate。</p>\n<p><strong>注意：该 Target 的命名会成为后面使用插件时一级菜单名称。</strong></p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135633.jpg\" alt=\"20190424135633\"></p>\n<h2 id=\"编写插件代码\"><a href=\"#编写插件代码\" class=\"headerlink\" title=\"编写插件代码\"></a>编写插件代码</h2><p>修改 SourceEditorCommand.swift 文件。</p>\n<blockquote>\n<p>以下代码实现将import排序的功能</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping <span class=\"params\">(Error?)</span></span></span> -&gt; <span class=\"type\">Void</span> ) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Implement your command here, invoking the completion handler when done. Pass it nil on success, and an NSError on failure.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> linesToSort = invocation.buffer.lines.<span class=\"built_in\">filter</span> &#123; line <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (line <span class=\"keyword\">as</span>? <span class=\"type\">String</span>)?.hasPrefix(<span class=\"string\">\"import\"</span>) ?? <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> linesToSort.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstLineIndex = invocation.buffer.lines.index(of: linesToSort[<span class=\"number\">0</span>]) <span class=\"comment\">// For insert</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> firstLineIndex &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invocation.buffer.lines.removeObjects(<span class=\"keyword\">in</span>: linesToSort)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> linesSorted = (linesToSort <span class=\"keyword\">as</span>? [<span class=\"type\">String</span>] ?? []).sorted() &#123;$<span class=\"number\">0</span> &lt;= $<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    linesSorted.reversed().forEach &#123; (line) <span class=\"keyword\">in</span></span><br><span class=\"line\">        invocation.buffer.lines.insert(line, at: firstLineIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectionsUpdated: [<span class=\"type\">XCSourceTextRange</span>] = (<span class=\"number\">0</span>..&lt;linesSorted.<span class=\"built_in\">count</span>).<span class=\"built_in\">map</span> &#123; (index) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> lineIndex = firstLineIndex + index</span><br><span class=\"line\">        <span class=\"keyword\">let</span> endColumn = linesSorted[index].<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">XCSourceTextRange</span>(start: <span class=\"type\">XCSourceTextPosition</span>(line: lineIndex, column: <span class=\"number\">0</span>), end: <span class=\"type\">XCSourceTextPosition</span>(line: lineIndex, column: endColumn))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invocation.buffer.selections.setArray(selectionsUpdated)</span><br><span class=\"line\">    completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改插件命名\"><a href=\"#修改插件命名\" class=\"headerlink\" title=\"修改插件命名\"></a>修改插件命名</h2><p>在 ZExtension/Info.plist 中可以修改插件名称，对应的 Key 是 XCSourceEditorCommandName，支持中文。</p>\n<p>不修改则默认是 Source Editor Command。</p>\n<h2 id=\"调试插件\"><a href=\"#调试插件\" class=\"headerlink\" title=\"调试插件\"></a>调试插件</h2><p>选择该新建的 Scheme，如 ZExtension，运行（Command+R）。在弹窗中选择 Xcode，点 击Run。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424145603.jpg\" alt=\"20190424145603\"></p>\n<p>接下来会弹出灰色的Xcode界面，新建项目或者打开测试项目。本文用了测试项目 Test。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150404.jpg\" alt=\"20190424150404\"></p>\n<p>使用插件排序，点击 Editor-&gt;ZExtension-&gt;Source Editor Command。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150422.jpg\" alt=\"20190424150422\"></p>\n<p>以下为插件运行后的结果：</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150437.jpg\" alt=\"20190424150437\"></p>\n<p>结果显示，所有 import 排好序了！</p>\n<h2 id=\"分发插件\"><a href=\"#分发插件\" class=\"headerlink\" title=\"分发插件\"></a>分发插件</h2><p>插件完成后，就需要投入工作中使用。</p>\n<ul>\n<li>上架 Mac App Store</li>\n</ul>\n<p>编写的插件可以发布，上架到 Mac App Store。在 Xcode-&gt;Xcode Extensions… 可以看到上架的插件。笔者还没有发布，先略过。</p>\n<ul>\n<li>内部使用</li>\n</ul>\n<p>在插件项目中，将 Products-&gt;ZXcodeExtension.app 文件拷贝到应用程序，并双击打开。此时在系统偏好设置-&gt;扩展-&gt;Xcode Source Editor，可以看到该插件，并且已勾选。重启 Xcode 就可以使用了。</p>\n<h2 id=\"设置快捷键\"><a href=\"#设置快捷键\" class=\"headerlink\" title=\"设置快捷键\"></a>设置快捷键</h2><p>可以给插件设置快捷键，方便使用。</p>\n<p>在 Xcode-&gt;Preferences…-&gt;Key Bindings-&gt;Editor Menu for Source Code，找到并设置。建议用 alt 如 alt+s，避免和其他快捷键冲突。</p>\n<h1 id=\"进阶讲解\"><a href=\"#进阶讲解\" class=\"headerlink\" title=\"进阶讲解\"></a>进阶讲解</h1><p>实现之后，简单讲解下一些细节。</p>\n<h2 id=\"Demo逻辑\"><a href=\"#Demo逻辑\" class=\"headerlink\" title=\"Demo逻辑\"></a>Demo逻辑</h2><p>Demo中主要操作了两个内容：</p>\n<ol>\n<li>invocation.buffer.lines</li>\n<li>invocation.buffer.selections</li>\n</ol>\n<blockquote>\n<p>lines 是当前编辑文件的每一行的内容，selections 是当前编辑文件选中的内容。</p>\n</blockquote>\n<p>Demo 逻辑是：</p>\n<ol>\n<li>筛选出符合条件的行 linesToSort（以 import 开头）</li>\n<li>记录第一个符合条件的行的行数firstLineIndex，作为排序后的插入位置</li>\n<li>从 invocation.buffer.lines 中删除符合条件的行</li>\n<li>将符合条件的行进行排序得出 linesSorted</li>\n<li>将排序后的行插入 invocation.buffer.lines</li>\n<li>获取所有改动行信息 selectionsUpdated，设置 invocation.buffer.selections</li>\n</ol>\n<p>主要是对 XCSourceEditorCommand 协议的实现。</p>\n<h2 id=\"Plist-文件处理\"><a href=\"#Plist-文件处理\" class=\"headerlink\" title=\"Plist 文件处理\"></a>Plist 文件处理</h2><p>Info.plist 文件中重要的 key 是 NSExtension 的 NSExtensionAttributes，包含两个 key：</p>\n<ol>\n<li>XCSourceEditorCommandDefinitions</li>\n<li>XCSourceEditorExtensionPrincipalClass</li>\n</ol>\n<h3 id=\"XCSourceEditorCommandDefinitions\"><a href=\"#XCSourceEditorCommandDefinitions\" class=\"headerlink\" title=\"XCSourceEditorCommandDefinitions\"></a>XCSourceEditorCommandDefinitions</h3><p>XCSourceEditorCommandDefinitions 是设置了每个命令（二级菜单）的信息：</p>\n<ol>\n<li>XCSourceEditorCommandClassName</li>\n<li>XCSourceEditorCommandIdentifier</li>\n<li>XCSourceEditorCommandName</li>\n</ol>\n<p>第一个是处理这个命令的类名，该类需实现 XCSourceEditorCommand 协议；第二个是每个命令的标示，用于 XCSourceEditorCommand 协议的方法区分处理命令；第三个是命令的展示名字。</p>\n<h3 id=\"XCSourceEditorExtensionPrincipalClass\"><a href=\"#XCSourceEditorExtensionPrincipalClass\" class=\"headerlink\" title=\"XCSourceEditorExtensionPrincipalClass\"></a>XCSourceEditorExtensionPrincipalClass</h3><p>该扩展的类名，该类需实现 XCSourceEditorExtension 协议。</p>\n<h2 id=\"XCSourceEditorCommand协议\"><a href=\"#XCSourceEditorCommand协议\" class=\"headerlink\" title=\"XCSourceEditorCommand协议\"></a>XCSourceEditorCommand协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** A command provided by a source editor extension. There does not need to be a one-to-one mapping between command classes and commands: Multiple commands can be handled by a single class, by checking their invocation's commandIdentifier at runtime. */</span></span><br><span class=\"line\">@<span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">XCSourceEditorCommand</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>根据官方注释，一个实现了 XCSourceEditorCommand 的类可以处理多种命令，即多个二级菜单，通过 invocation.commandIdentifier 来区分。而 commandIdentifier 是 Info.plist 中，XCSourceEditorCommandDefinitions 里面每一项的 XCSourceEditorCommandIdentifier 所定义的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Perform the action associated with the command using the information in \\a invocation. Xcode will pass the code a completion handler that it must invoke to finish performing the command, passing nil on success or an error on failure.</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> A canceled command must still call the completion handler, passing nil.</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> \\note Make no assumptions about the thread or queue on which this method will be invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (void)performCommandWithInvocation:(<span class=\"type\">XCSourceEditorCommandInvocation</span> *)invocation completionHandler:(void (^)(<span class=\"type\">NSError</span> * _Nullable nilOrError))completionHandler;</span><br></pre></td></tr></table></figure>\n\n<p>这是 XCSourceEditorCommand 协议定义的方法。</p>\n<ul>\n<li>XCSourceEditorCommandInvocation</li>\n</ul>\n<p>commandIdentifier 属性，用于区分不同命令；buffer，XCSourceTextBuffer 类型，主要用它的 lines 和 selections 属性。</p>\n<ul>\n<li>completionHandler</li>\n</ul>\n<p>实现逻辑之后，必须调用 completionHandler 以结束插件命令，成功时传参 nil，失败时传参 error 对象。即使取消处理也需要调用并传参 nil。</p>\n<p><strong>结合 Plist 文件和 XCSourceEditorCommand 协议，我们可以编写处理多个命令的插件。</strong></p>\n<h2 id=\"XCSourceEditorExtension协议\"><a href=\"#XCSourceEditorExtension协议\" class=\"headerlink\" title=\"XCSourceEditorExtension协议\"></a>XCSourceEditorExtension协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Invoked when the extension has been launched, which may be some time before the extension actually receives a command (if ever).</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> \\note Make no assumptions about the thread or queue on which this method will be invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (void)extensionDidFinishLaunching;</span><br></pre></td></tr></table></figure>\n\n<p>插件被加载后的处理。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>可以看出，目前 Xcode Source Editor Extension 解决方案能实现的插件功能很有限，不支持UI交互，只能局限于文本处理上。希望以后苹果能扩展更多 API 供开发者使用。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>Xcode 插件史</li>\n<li>实现插件<ul>\n<li>创建 macOS 应用</li>\n<li>编写插件代码</li>\n<li>修改插件命名</li>\n<li>调试插件</li>\n<li>分发插件</li>\n<li>设置快捷键</li>\n</ul>\n</li>\n<li>进阶讲解<ul>\n<li>Demo 逻辑</li>\n<li>Plist 文件处理</li>\n<li>XCSourceEditorCommand 协议</li>\n<li>XCSourceEditorExtension 协议</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个项目工程，随着架构的阶段性稳定、公共组件的抽离和代码规范的制定等，势必会进入一个”重复劳动”的阶段。所谓”重复劳动”，即需求都有固定的模式和分解步骤去完成，大部分是重复、一致的代码编写，只有少部分工作需要思考、抽象、实现。但往往这些”重复劳动”占据了大部分时间成本，而且由于其机械性所以最容易出现问题。</p>\n<p>于是将重复劳动自动化，即用代码写代码，是一个团队的重点工作之一，让成员将时间和精力放在更值得关注的事情上。而开发 IDE 插件，可以实现这种代码层面的自动化。</p>\n<p>本来想做个插件，实现生成 cell 的 .xib 和 .swift 文件并自动关联等功能，练练手，结果发现目前 Xcode 开放的插件并不能支持。</p>\n<h1 id=\"Xcode插件史\"><a href=\"#Xcode插件史\" class=\"headerlink\" title=\"Xcode插件史\"></a>Xcode插件史</h1><p>在Xcode 8之前，Xcode 插件有着比较辉煌的发展，各种便利的插件、专门的插件管理工具 Alcatraz 等。</p>\n<p>但从 Xcode 8 开始，出于安全性考虑（比如说 Xcode ghost 事件），Apple 不再支持第三方的插件，但提供了解决方案—— Xcode Source Editor Extension，目前只能完成有限的文本编辑辅助。</p>\n<blockquote>\n<p>本文Demo：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsapphirezzz%2FZXcodeExtension\" target=\"_blank\" rel=\"noopener\">https://github.com/sapphirezzz/ZXcodeExtension</a>）</p>\n</blockquote>\n<h1 id=\"实现插件\"><a href=\"#实现插件\" class=\"headerlink\" title=\"实现插件\"></a>实现插件</h1><p>本文开发环境：Xcode Version 10.2.1 (10E1001)</p>\n<h2 id=\"创建macOS应用\"><a href=\"#创建macOS应用\" class=\"headerlink\" title=\"创建macOS应用\"></a>创建macOS应用</h2><p>打开Xcode，File-&gt;New-&gt;Project…，选择 macOS-&gt;Application&gt;Cocoa App，填写 Product Name</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135311.jpg\" alt=\"20190424135311\"></p>\n<p>新建 Target，File-&gt;New-&gt;Target…，选择 macOS-&gt;Application Extension-&gt;Xcode Source Editor Extension，填写 Product Name，如 ZExtension。在弹窗中选择 Activate。</p>\n<p><strong>注意：该 Target 的命名会成为后面使用插件时一级菜单名称。</strong></p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424135633.jpg\" alt=\"20190424135633\"></p>\n<h2 id=\"编写插件代码\"><a href=\"#编写插件代码\" class=\"headerlink\" title=\"编写插件代码\"></a>编写插件代码</h2><p>修改 SourceEditorCommand.swift 文件。</p>\n<blockquote>\n<p>以下代码实现将import排序的功能</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping <span class=\"params\">(Error?)</span></span></span> -&gt; <span class=\"type\">Void</span> ) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Implement your command here, invoking the completion handler when done. Pass it nil on success, and an NSError on failure.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> linesToSort = invocation.buffer.lines.<span class=\"built_in\">filter</span> &#123; line <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (line <span class=\"keyword\">as</span>? <span class=\"type\">String</span>)?.hasPrefix(<span class=\"string\">\"import\"</span>) ?? <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> linesToSort.<span class=\"built_in\">count</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstLineIndex = invocation.buffer.lines.index(of: linesToSort[<span class=\"number\">0</span>]) <span class=\"comment\">// For insert</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> firstLineIndex &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invocation.buffer.lines.removeObjects(<span class=\"keyword\">in</span>: linesToSort)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> linesSorted = (linesToSort <span class=\"keyword\">as</span>? [<span class=\"type\">String</span>] ?? []).sorted() &#123;$<span class=\"number\">0</span> &lt;= $<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    linesSorted.reversed().forEach &#123; (line) <span class=\"keyword\">in</span></span><br><span class=\"line\">        invocation.buffer.lines.insert(line, at: firstLineIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectionsUpdated: [<span class=\"type\">XCSourceTextRange</span>] = (<span class=\"number\">0</span>..&lt;linesSorted.<span class=\"built_in\">count</span>).<span class=\"built_in\">map</span> &#123; (index) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> lineIndex = firstLineIndex + index</span><br><span class=\"line\">        <span class=\"keyword\">let</span> endColumn = linesSorted[index].<span class=\"built_in\">count</span> - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">XCSourceTextRange</span>(start: <span class=\"type\">XCSourceTextPosition</span>(line: lineIndex, column: <span class=\"number\">0</span>), end: <span class=\"type\">XCSourceTextPosition</span>(line: lineIndex, column: endColumn))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    invocation.buffer.selections.setArray(selectionsUpdated)</span><br><span class=\"line\">    completionHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改插件命名\"><a href=\"#修改插件命名\" class=\"headerlink\" title=\"修改插件命名\"></a>修改插件命名</h2><p>在 ZExtension/Info.plist 中可以修改插件名称，对应的 Key 是 XCSourceEditorCommandName，支持中文。</p>\n<p>不修改则默认是 Source Editor Command。</p>\n<h2 id=\"调试插件\"><a href=\"#调试插件\" class=\"headerlink\" title=\"调试插件\"></a>调试插件</h2><p>选择该新建的 Scheme，如 ZExtension，运行（Command+R）。在弹窗中选择 Xcode，点 击Run。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424145603.jpg\" alt=\"20190424145603\"></p>\n<p>接下来会弹出灰色的Xcode界面，新建项目或者打开测试项目。本文用了测试项目 Test。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150404.jpg\" alt=\"20190424150404\"></p>\n<p>使用插件排序，点击 Editor-&gt;ZExtension-&gt;Source Editor Command。</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150422.jpg\" alt=\"20190424150422\"></p>\n<p>以下为插件运行后的结果：</p>\n<p><img src=\"/2019/04/24/create-xcode-plug-in-by-source-editor-extension/20190424150437.jpg\" alt=\"20190424150437\"></p>\n<p>结果显示，所有 import 排好序了！</p>\n<h2 id=\"分发插件\"><a href=\"#分发插件\" class=\"headerlink\" title=\"分发插件\"></a>分发插件</h2><p>插件完成后，就需要投入工作中使用。</p>\n<ul>\n<li>上架 Mac App Store</li>\n</ul>\n<p>编写的插件可以发布，上架到 Mac App Store。在 Xcode-&gt;Xcode Extensions… 可以看到上架的插件。笔者还没有发布，先略过。</p>\n<ul>\n<li>内部使用</li>\n</ul>\n<p>在插件项目中，将 Products-&gt;ZXcodeExtension.app 文件拷贝到应用程序，并双击打开。此时在系统偏好设置-&gt;扩展-&gt;Xcode Source Editor，可以看到该插件，并且已勾选。重启 Xcode 就可以使用了。</p>\n<h2 id=\"设置快捷键\"><a href=\"#设置快捷键\" class=\"headerlink\" title=\"设置快捷键\"></a>设置快捷键</h2><p>可以给插件设置快捷键，方便使用。</p>\n<p>在 Xcode-&gt;Preferences…-&gt;Key Bindings-&gt;Editor Menu for Source Code，找到并设置。建议用 alt 如 alt+s，避免和其他快捷键冲突。</p>\n<h1 id=\"进阶讲解\"><a href=\"#进阶讲解\" class=\"headerlink\" title=\"进阶讲解\"></a>进阶讲解</h1><p>实现之后，简单讲解下一些细节。</p>\n<h2 id=\"Demo逻辑\"><a href=\"#Demo逻辑\" class=\"headerlink\" title=\"Demo逻辑\"></a>Demo逻辑</h2><p>Demo中主要操作了两个内容：</p>\n<ol>\n<li>invocation.buffer.lines</li>\n<li>invocation.buffer.selections</li>\n</ol>\n<blockquote>\n<p>lines 是当前编辑文件的每一行的内容，selections 是当前编辑文件选中的内容。</p>\n</blockquote>\n<p>Demo 逻辑是：</p>\n<ol>\n<li>筛选出符合条件的行 linesToSort（以 import 开头）</li>\n<li>记录第一个符合条件的行的行数firstLineIndex，作为排序后的插入位置</li>\n<li>从 invocation.buffer.lines 中删除符合条件的行</li>\n<li>将符合条件的行进行排序得出 linesSorted</li>\n<li>将排序后的行插入 invocation.buffer.lines</li>\n<li>获取所有改动行信息 selectionsUpdated，设置 invocation.buffer.selections</li>\n</ol>\n<p>主要是对 XCSourceEditorCommand 协议的实现。</p>\n<h2 id=\"Plist-文件处理\"><a href=\"#Plist-文件处理\" class=\"headerlink\" title=\"Plist 文件处理\"></a>Plist 文件处理</h2><p>Info.plist 文件中重要的 key 是 NSExtension 的 NSExtensionAttributes，包含两个 key：</p>\n<ol>\n<li>XCSourceEditorCommandDefinitions</li>\n<li>XCSourceEditorExtensionPrincipalClass</li>\n</ol>\n<h3 id=\"XCSourceEditorCommandDefinitions\"><a href=\"#XCSourceEditorCommandDefinitions\" class=\"headerlink\" title=\"XCSourceEditorCommandDefinitions\"></a>XCSourceEditorCommandDefinitions</h3><p>XCSourceEditorCommandDefinitions 是设置了每个命令（二级菜单）的信息：</p>\n<ol>\n<li>XCSourceEditorCommandClassName</li>\n<li>XCSourceEditorCommandIdentifier</li>\n<li>XCSourceEditorCommandName</li>\n</ol>\n<p>第一个是处理这个命令的类名，该类需实现 XCSourceEditorCommand 协议；第二个是每个命令的标示，用于 XCSourceEditorCommand 协议的方法区分处理命令；第三个是命令的展示名字。</p>\n<h3 id=\"XCSourceEditorExtensionPrincipalClass\"><a href=\"#XCSourceEditorExtensionPrincipalClass\" class=\"headerlink\" title=\"XCSourceEditorExtensionPrincipalClass\"></a>XCSourceEditorExtensionPrincipalClass</h3><p>该扩展的类名，该类需实现 XCSourceEditorExtension 协议。</p>\n<h2 id=\"XCSourceEditorCommand协议\"><a href=\"#XCSourceEditorCommand协议\" class=\"headerlink\" title=\"XCSourceEditorCommand协议\"></a>XCSourceEditorCommand协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** A command provided by a source editor extension. There does not need to be a one-to-one mapping between command classes and commands: Multiple commands can be handled by a single class, by checking their invocation's commandIdentifier at runtime. */</span></span><br><span class=\"line\">@<span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">XCSourceEditorCommand</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>根据官方注释，一个实现了 XCSourceEditorCommand 的类可以处理多种命令，即多个二级菜单，通过 invocation.commandIdentifier 来区分。而 commandIdentifier 是 Info.plist 中，XCSourceEditorCommandDefinitions 里面每一项的 XCSourceEditorCommandIdentifier 所定义的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Perform the action associated with the command using the information in \\a invocation. Xcode will pass the code a completion handler that it must invoke to finish performing the command, passing nil on success or an error on failure.</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> A canceled command must still call the completion handler, passing nil.</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> \\note Make no assumptions about the thread or queue on which this method will be invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (void)performCommandWithInvocation:(<span class=\"type\">XCSourceEditorCommandInvocation</span> *)invocation completionHandler:(void (^)(<span class=\"type\">NSError</span> * _Nullable nilOrError))completionHandler;</span><br></pre></td></tr></table></figure>\n\n<p>这是 XCSourceEditorCommand 协议定义的方法。</p>\n<ul>\n<li>XCSourceEditorCommandInvocation</li>\n</ul>\n<p>commandIdentifier 属性，用于区分不同命令；buffer，XCSourceTextBuffer 类型，主要用它的 lines 和 selections 属性。</p>\n<ul>\n<li>completionHandler</li>\n</ul>\n<p>实现逻辑之后，必须调用 completionHandler 以结束插件命令，成功时传参 nil，失败时传参 error 对象。即使取消处理也需要调用并传参 nil。</p>\n<p><strong>结合 Plist 文件和 XCSourceEditorCommand 协议，我们可以编写处理多个命令的插件。</strong></p>\n<h2 id=\"XCSourceEditorExtension协议\"><a href=\"#XCSourceEditorExtension协议\" class=\"headerlink\" title=\"XCSourceEditorExtension协议\"></a>XCSourceEditorExtension协议</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Invoked when the extension has been launched, which may be some time before the extension actually receives a command (if ever).</span></span><br><span class=\"line\"><span class=\"comment\"> </span></span><br><span class=\"line\"><span class=\"comment\"> \\note Make no assumptions about the thread or queue on which this method will be invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (void)extensionDidFinishLaunching;</span><br></pre></td></tr></table></figure>\n\n<p>插件被加载后的处理。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>可以看出，目前 Xcode Source Editor Extension 解决方案能实现的插件功能很有限，不支持UI交互，只能局限于文本处理上。希望以后苹果能扩展更多 API 供开发者使用。</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"手把手教你实现macOS应用文件拖拽进窗口功能-批量生成APP的多尺寸icon实战","date":"2019-08-03T06:00:00.000Z","keywords":"macOS 拖拽 registerForDraggedTypes","description":"详细介绍了macOS开发中如何实现拖拽功能，并附上例子实现批量生成App的多尺寸icon","_content":"\n# 目录\n\n+ 前言\n+ 拖拽功能\n  - Source 、 Destination 和 Dragging Session\n  - 需要处理的事情\n+ Demo 功能实现\n  - 功能拆解\n  - 实现\n  - 文件的读写权限\n  - NSView 设置问题\n  - 关于 Retina 设备生成图片大小问题\n+ 总结\n\n# 前言\n\n最近公司项目的 APP 更换 icon，UI 设计师提供的素材缺少几个尺寸，因为不清楚具体需要哪些尺寸，且经过交流发现，UI 设计师生成不同尺寸时，是一个一个生成的，这样效率比较低，于是想做个小工具提高下这种工作的效率，当作玩玩 macOS 开发咯（之前开发过对接 jira 的批量新建分配任务的小工具且一直在使用）。\n\n> 关于批量生成 icon 的，朋友推荐了一个[在线工具](http://icon.wuruihong.com)，这个功能已经比较完善，可以了解下。当然，自己开发的话可以定制。\n\n# 拖拽功能\n\n讲讲拖拽那点事，更多具体信息可以看👇的官方文档。\n\n> 苹果官方文档 [Drag and Drop](https://developer.apple.com/documentation/appkit/drag_and_drop)\n\n## Source 、 Destination 和 Dragging Session\n\n操作拖拽，那么就涉及到三个元素，拖拽的起点，称为源 Source；拖拽的终点，称为目的地 Destination；拖拽的对象，称为 Item 吧。源对应协议 NSDraggingSource，目的地对应协议 NSDraggingDestination；拖拽过程就是一个 Dragging Session；拖拽的对象是 NSDraggingItem，放在 NSPasteboard 中。\n\n大概过程：\n\n1. 从 Source 开始拖拽，Dragging Session 生成并进行\n2. 选择拖拽对象，生成拖拽信息，拖拽的数据会存在拖拽粘贴板上\n3. 拖拽放到 Destination，接收到拖拽信息，可以选择拒绝或接收，并进行一些操作\n4. Dragging Session 结束\n\n## 需要处理的事情\n\n操作拖拽的 NSView 需要实现 NSDraggingSource 协议，拖拽的目的地 NSView 需要实现 NSDraggingDestination 协议。另外可以通过 NSView 的拖拽相关 Extension 去注册支持拖拽的类型 NSPasteboard.PasteboardType。目前支持的类型有几种图片类型、字体、颜色、URL、fileURL 等。拖拽之后，从 NSDraggingInfo 中获取相关信息进行处理。\n\n协议具体需要实现的方法比较简单，没有什么特别要讲的。\n\n### NSDraggingSource\n\n```swift\nfunc draggingSession(_ session: NSDraggingSession, sourceOperationMaskFor context: NSDraggingContext) -> NSDragOperation\noptional func draggingSession(_ session: NSDraggingSession, willBeginAt screenPoint: NSPoint)\noptional func draggingSession(_ session: NSDraggingSession, movedTo screenPoint: NSPoint)\noptional func draggingSession(_ session: NSDraggingSession, endedAt screenPoint: NSPoint, operation: NSDragOperation)\noptional func ignoreModifierKeys(for session: NSDraggingSession) -> Bool\n```\n\n### NSDraggingDestination\n\n```swift\noptional func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation\noptional func draggingUpdated(_ sender: NSDraggingInfo) -> NSDragOperation\noptional func draggingExited(_ sender: NSDraggingInfo?)\noptional func prepareForDragOperation(_ sender: NSDraggingInfo) -> Bool\noptional func performDragOperation(_ sender: NSDraggingInfo) -> Bool\noptional func concludeDragOperation(_ sender: NSDraggingInfo?)\noptional func draggingEnded(_ sender: NSDraggingInfo)\noptional func wantsPeriodicDraggingUpdates() -> Bool\noptional func updateDraggingItemsForDrag(_ sender: NSDraggingInfo?)\n```\n\n### NSView 拖拽相关的 Extension\n\n```swift\nopen func beginDraggingSession(with items: [NSDraggingItem], event: NSEvent, source: NSDraggingSource) -> NSDraggingSession\nopen var registeredDraggedTypes: [NSPasteboard.PasteboardType] { get }\nopen func registerForDraggedTypes(_ newTypes: [NSPasteboard.PasteboardType])\nopen func unregisterDraggedTypes()\n```\n\n# Demo 功能实现\n\n简单实现下功能。本文 Demo 详见文章末尾的链接。\n\n![readme.gif](readme.gif)\n\n## 功能拆解\n\n1. 需求\n\n- 基于提供的大尺寸图片，批量生成不同尺寸的 icon\n\n好吧，需求总是简单一句话描述，大概所有程序猿都讨厌产品经理这么说哈哈。\n\n2. 设想用户操作\n\n- 设计生成 icon 大尺寸图片\n- 支持拖拽来指定该文件为生成的基准\n- 勾选需要的尺寸\n- 指定生成目录\n\n## 实现\n\n拖拽是从别的文件夹窗口拖拽过来的，所以不需要定义一个 NSView 去实现 NSDraggingSource 协议。\n\n下面定义 DestinationView，NSView 类型，实现 NSDraggingDestination 协议。因为 NSView 默认扩展了该协议，所以不需要声明扩展。\n\n定义 Delegate 代理，DestinationViewDelegate，通知外部。\n\n```swift\nprotocol DestinationViewDelegate {\n  func processImage(_ image: NSImage)\n}\n```\n\nawakeFromNib 中注册支持的类型 NSPasteboard.PasteboardType.fileURL\n\n```swift\nregisterForDraggedTypes([NSPasteboard.PasteboardType.fileURL])\n```\n\n然后实现 NSDraggingDestination 协议几个方法\n\ndraggingEntered 需要判断拖拽的内容是否接收，本 Demo 没有处理。\n\n```swift\noverride func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation {\n    return .copy\n}\n```\n\n可以进行以下处理：\n\n```swift\nlet pasteBoard = sender.draggingPasteboard\nlet accept = NSImage(pasteboard: pasteBoard) != nil\nreturn accept ? .copy : NSDragOperation()\n```\n\n> The data represented by the image can be copied. 返回 .copy 是为了后面展示图片；\n>\n> 具体参考 [NSDragoperation](https://developer.apple.com/documentation/appkit/nsdragoperation)。\n\ndraggingExited，当拖拽退出时，需要设置 needsDisplay 为 true。\n\n> needsDisplay，NSView 用于确定在显示之前是否需要重绘视图。\n\nperformDragOperation，判断是否图片，并处理。\n\n下面是 DestinationView 完整的代码。\n\n```swift\n//  DestinationView.swift\nimport Cocoa\n\nprotocol DestinationViewDelegate {\n  func processImage(_ image: NSImage)\n}\n\nclass DestinationView: NSView {\n\n  var delegate: DestinationViewDelegate?\n\n  override func awakeFromNib() {\n      registerForDraggedTypes([NSPasteboard.PasteboardType.fileURL])\n  }\n\n  var isReceivingDrag = false {\n      didSet {\n          needsDisplay = true\n      }\n  }\n\n  override func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation {\n      return .copy\n  }\n\n  override func draggingExited(_ sender: NSDraggingInfo?) {\n      isReceivingDrag = false\n  }\n\n  override func prepareForDragOperation(_ sender: NSDraggingInfo) -> Bool {\n      return true\n  }\n\n  override func performDragOperation(_ sender: NSDraggingInfo) -> Bool {\n\n      isReceivingDrag = false\n      let pasteBoard = sender.draggingPasteboard\n      guard let image = NSImage(pasteboard: pasteBoard) else {\n          return false\n      }\n      delegate?.processImage(image)\n      return true\n  }\n}\n```\n\n## 文件的读写权限\n\nmacOS开发，文件相关的组件有两个 NSOpenPanel 和 NSSavePanel。前者用于选择文件或者文件夹，后者用于保存单个文件。因为需要批量保存，NSSavePanel 无法实现，所以使用 Data 的 write 方法。\n\n```swift\npublic func write(to url: URL, options: Data.WritingOptions = []) throws\n```\n\n文件读写，需要修改对应 Target 的 Capabilities 中的 App Sanbox - File Access 权限。\n\nUser Selected File 修改为 Read/Write 即可读写。\n\n也可以关闭 App Sanbox 。\n\n```swift\ntry? imageData?.write(to: path.appendingPathComponent(\"icon\\(iconSize.rawValue).png\"))\n```\n\n> 发布到 Mac AppStore 的应用，必须遵守沙盒约定。macOS APP 不需要上架，可以不开启 Sandbox 功能，随意访问 mac 上的文件。\n\n## NSView 设置问题\n\nNSView 没有 backgroundColor 属性，修改背景色需要修改 layer 的。\n\n```swift\nbackgroundView.layer?.backgroundColor = NSColor.white.cgColor\n```\n\n并且需要设置 wantsLayer 生效。\n\n```swift\nbackgroundView.wantsLayer = true\n```\n\n包括设置圆角，也需要设置 wantsLayer。\n\n```swift\nbackgroundView.layer?.cornerRadius = 10\n```\n\n## 关于 Retina 设备生成图片大小问题\n\n```swift\npublic convenience init(size: NSSize, flipped drawingHandlerShouldBeCalledWithFlippedContext: Bool, drawingHandler: @escaping (NSRect) -> Bool)\n```\n\n在 Retina 设备上，NSImage 的初始化方法传递参数 size ，生成的图片的尺寸会是 size 的两倍。不了解，暂时先除以 2 解决。后面找到原因再处理下，如果了解原因欢迎给我留言哈。\n\n\n# 总结\n\n没什么好总结的哈哈。\n\n\n\n> 本文Demo：[https://github.com/sapphirezzz/AppIconReducer](https://github.com/sapphirezzz/AppIconReducer)）\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2019-08-03-mac-app-drag-and-drop-produce-app-icon.md","raw":"---\ntitle: 手把手教你实现macOS应用文件拖拽进窗口功能-批量生成APP的多尺寸icon实战\ndate: 2019-08-03 14:00:00\ntags: \n     - macOS\ncategories: macOS\nkeywords: macOS 拖拽 registerForDraggedTypes\ndescription: 详细介绍了macOS开发中如何实现拖拽功能，并附上例子实现批量生成App的多尺寸icon\n---\n\n# 目录\n\n+ 前言\n+ 拖拽功能\n  - Source 、 Destination 和 Dragging Session\n  - 需要处理的事情\n+ Demo 功能实现\n  - 功能拆解\n  - 实现\n  - 文件的读写权限\n  - NSView 设置问题\n  - 关于 Retina 设备生成图片大小问题\n+ 总结\n\n# 前言\n\n最近公司项目的 APP 更换 icon，UI 设计师提供的素材缺少几个尺寸，因为不清楚具体需要哪些尺寸，且经过交流发现，UI 设计师生成不同尺寸时，是一个一个生成的，这样效率比较低，于是想做个小工具提高下这种工作的效率，当作玩玩 macOS 开发咯（之前开发过对接 jira 的批量新建分配任务的小工具且一直在使用）。\n\n> 关于批量生成 icon 的，朋友推荐了一个[在线工具](http://icon.wuruihong.com)，这个功能已经比较完善，可以了解下。当然，自己开发的话可以定制。\n\n# 拖拽功能\n\n讲讲拖拽那点事，更多具体信息可以看👇的官方文档。\n\n> 苹果官方文档 [Drag and Drop](https://developer.apple.com/documentation/appkit/drag_and_drop)\n\n## Source 、 Destination 和 Dragging Session\n\n操作拖拽，那么就涉及到三个元素，拖拽的起点，称为源 Source；拖拽的终点，称为目的地 Destination；拖拽的对象，称为 Item 吧。源对应协议 NSDraggingSource，目的地对应协议 NSDraggingDestination；拖拽过程就是一个 Dragging Session；拖拽的对象是 NSDraggingItem，放在 NSPasteboard 中。\n\n大概过程：\n\n1. 从 Source 开始拖拽，Dragging Session 生成并进行\n2. 选择拖拽对象，生成拖拽信息，拖拽的数据会存在拖拽粘贴板上\n3. 拖拽放到 Destination，接收到拖拽信息，可以选择拒绝或接收，并进行一些操作\n4. Dragging Session 结束\n\n## 需要处理的事情\n\n操作拖拽的 NSView 需要实现 NSDraggingSource 协议，拖拽的目的地 NSView 需要实现 NSDraggingDestination 协议。另外可以通过 NSView 的拖拽相关 Extension 去注册支持拖拽的类型 NSPasteboard.PasteboardType。目前支持的类型有几种图片类型、字体、颜色、URL、fileURL 等。拖拽之后，从 NSDraggingInfo 中获取相关信息进行处理。\n\n协议具体需要实现的方法比较简单，没有什么特别要讲的。\n\n### NSDraggingSource\n\n```swift\nfunc draggingSession(_ session: NSDraggingSession, sourceOperationMaskFor context: NSDraggingContext) -> NSDragOperation\noptional func draggingSession(_ session: NSDraggingSession, willBeginAt screenPoint: NSPoint)\noptional func draggingSession(_ session: NSDraggingSession, movedTo screenPoint: NSPoint)\noptional func draggingSession(_ session: NSDraggingSession, endedAt screenPoint: NSPoint, operation: NSDragOperation)\noptional func ignoreModifierKeys(for session: NSDraggingSession) -> Bool\n```\n\n### NSDraggingDestination\n\n```swift\noptional func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation\noptional func draggingUpdated(_ sender: NSDraggingInfo) -> NSDragOperation\noptional func draggingExited(_ sender: NSDraggingInfo?)\noptional func prepareForDragOperation(_ sender: NSDraggingInfo) -> Bool\noptional func performDragOperation(_ sender: NSDraggingInfo) -> Bool\noptional func concludeDragOperation(_ sender: NSDraggingInfo?)\noptional func draggingEnded(_ sender: NSDraggingInfo)\noptional func wantsPeriodicDraggingUpdates() -> Bool\noptional func updateDraggingItemsForDrag(_ sender: NSDraggingInfo?)\n```\n\n### NSView 拖拽相关的 Extension\n\n```swift\nopen func beginDraggingSession(with items: [NSDraggingItem], event: NSEvent, source: NSDraggingSource) -> NSDraggingSession\nopen var registeredDraggedTypes: [NSPasteboard.PasteboardType] { get }\nopen func registerForDraggedTypes(_ newTypes: [NSPasteboard.PasteboardType])\nopen func unregisterDraggedTypes()\n```\n\n# Demo 功能实现\n\n简单实现下功能。本文 Demo 详见文章末尾的链接。\n\n![readme.gif](readme.gif)\n\n## 功能拆解\n\n1. 需求\n\n- 基于提供的大尺寸图片，批量生成不同尺寸的 icon\n\n好吧，需求总是简单一句话描述，大概所有程序猿都讨厌产品经理这么说哈哈。\n\n2. 设想用户操作\n\n- 设计生成 icon 大尺寸图片\n- 支持拖拽来指定该文件为生成的基准\n- 勾选需要的尺寸\n- 指定生成目录\n\n## 实现\n\n拖拽是从别的文件夹窗口拖拽过来的，所以不需要定义一个 NSView 去实现 NSDraggingSource 协议。\n\n下面定义 DestinationView，NSView 类型，实现 NSDraggingDestination 协议。因为 NSView 默认扩展了该协议，所以不需要声明扩展。\n\n定义 Delegate 代理，DestinationViewDelegate，通知外部。\n\n```swift\nprotocol DestinationViewDelegate {\n  func processImage(_ image: NSImage)\n}\n```\n\nawakeFromNib 中注册支持的类型 NSPasteboard.PasteboardType.fileURL\n\n```swift\nregisterForDraggedTypes([NSPasteboard.PasteboardType.fileURL])\n```\n\n然后实现 NSDraggingDestination 协议几个方法\n\ndraggingEntered 需要判断拖拽的内容是否接收，本 Demo 没有处理。\n\n```swift\noverride func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation {\n    return .copy\n}\n```\n\n可以进行以下处理：\n\n```swift\nlet pasteBoard = sender.draggingPasteboard\nlet accept = NSImage(pasteboard: pasteBoard) != nil\nreturn accept ? .copy : NSDragOperation()\n```\n\n> The data represented by the image can be copied. 返回 .copy 是为了后面展示图片；\n>\n> 具体参考 [NSDragoperation](https://developer.apple.com/documentation/appkit/nsdragoperation)。\n\ndraggingExited，当拖拽退出时，需要设置 needsDisplay 为 true。\n\n> needsDisplay，NSView 用于确定在显示之前是否需要重绘视图。\n\nperformDragOperation，判断是否图片，并处理。\n\n下面是 DestinationView 完整的代码。\n\n```swift\n//  DestinationView.swift\nimport Cocoa\n\nprotocol DestinationViewDelegate {\n  func processImage(_ image: NSImage)\n}\n\nclass DestinationView: NSView {\n\n  var delegate: DestinationViewDelegate?\n\n  override func awakeFromNib() {\n      registerForDraggedTypes([NSPasteboard.PasteboardType.fileURL])\n  }\n\n  var isReceivingDrag = false {\n      didSet {\n          needsDisplay = true\n      }\n  }\n\n  override func draggingEntered(_ sender: NSDraggingInfo) -> NSDragOperation {\n      return .copy\n  }\n\n  override func draggingExited(_ sender: NSDraggingInfo?) {\n      isReceivingDrag = false\n  }\n\n  override func prepareForDragOperation(_ sender: NSDraggingInfo) -> Bool {\n      return true\n  }\n\n  override func performDragOperation(_ sender: NSDraggingInfo) -> Bool {\n\n      isReceivingDrag = false\n      let pasteBoard = sender.draggingPasteboard\n      guard let image = NSImage(pasteboard: pasteBoard) else {\n          return false\n      }\n      delegate?.processImage(image)\n      return true\n  }\n}\n```\n\n## 文件的读写权限\n\nmacOS开发，文件相关的组件有两个 NSOpenPanel 和 NSSavePanel。前者用于选择文件或者文件夹，后者用于保存单个文件。因为需要批量保存，NSSavePanel 无法实现，所以使用 Data 的 write 方法。\n\n```swift\npublic func write(to url: URL, options: Data.WritingOptions = []) throws\n```\n\n文件读写，需要修改对应 Target 的 Capabilities 中的 App Sanbox - File Access 权限。\n\nUser Selected File 修改为 Read/Write 即可读写。\n\n也可以关闭 App Sanbox 。\n\n```swift\ntry? imageData?.write(to: path.appendingPathComponent(\"icon\\(iconSize.rawValue).png\"))\n```\n\n> 发布到 Mac AppStore 的应用，必须遵守沙盒约定。macOS APP 不需要上架，可以不开启 Sandbox 功能，随意访问 mac 上的文件。\n\n## NSView 设置问题\n\nNSView 没有 backgroundColor 属性，修改背景色需要修改 layer 的。\n\n```swift\nbackgroundView.layer?.backgroundColor = NSColor.white.cgColor\n```\n\n并且需要设置 wantsLayer 生效。\n\n```swift\nbackgroundView.wantsLayer = true\n```\n\n包括设置圆角，也需要设置 wantsLayer。\n\n```swift\nbackgroundView.layer?.cornerRadius = 10\n```\n\n## 关于 Retina 设备生成图片大小问题\n\n```swift\npublic convenience init(size: NSSize, flipped drawingHandlerShouldBeCalledWithFlippedContext: Bool, drawingHandler: @escaping (NSRect) -> Bool)\n```\n\n在 Retina 设备上，NSImage 的初始化方法传递参数 size ，生成的图片的尺寸会是 size 的两倍。不了解，暂时先除以 2 解决。后面找到原因再处理下，如果了解原因欢迎给我留言哈。\n\n\n# 总结\n\n没什么好总结的哈哈。\n\n\n\n> 本文Demo：[https://github.com/sapphirezzz/AppIconReducer](https://github.com/sapphirezzz/AppIconReducer)）\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"mac-app-drag-and-drop-produce-app-icon","published":1,"updated":"2020-02-25T15:23:08.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7qa003207ei1h4977yh","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>拖拽功能<ul>\n<li>Source 、 Destination 和 Dragging Session</li>\n<li>需要处理的事情</li>\n</ul>\n</li>\n<li>Demo 功能实现<ul>\n<li>功能拆解</li>\n<li>实现</li>\n<li>文件的读写权限</li>\n<li>NSView 设置问题</li>\n<li>关于 Retina 设备生成图片大小问题</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司项目的 APP 更换 icon，UI 设计师提供的素材缺少几个尺寸，因为不清楚具体需要哪些尺寸，且经过交流发现，UI 设计师生成不同尺寸时，是一个一个生成的，这样效率比较低，于是想做个小工具提高下这种工作的效率，当作玩玩 macOS 开发咯（之前开发过对接 jira 的批量新建分配任务的小工具且一直在使用）。</p>\n<blockquote>\n<p>关于批量生成 icon 的，朋友推荐了一个<a href=\"http://icon.wuruihong.com\" target=\"_blank\" rel=\"noopener\">在线工具</a>，这个功能已经比较完善，可以了解下。当然，自己开发的话可以定制。</p>\n</blockquote>\n<h1 id=\"拖拽功能\"><a href=\"#拖拽功能\" class=\"headerlink\" title=\"拖拽功能\"></a>拖拽功能</h1><p>讲讲拖拽那点事，更多具体信息可以看👇的官方文档。</p>\n<blockquote>\n<p>苹果官方文档 <a href=\"https://developer.apple.com/documentation/appkit/drag_and_drop\" target=\"_blank\" rel=\"noopener\">Drag and Drop</a></p>\n</blockquote>\n<h2 id=\"Source-、-Destination-和-Dragging-Session\"><a href=\"#Source-、-Destination-和-Dragging-Session\" class=\"headerlink\" title=\"Source 、 Destination 和 Dragging Session\"></a>Source 、 Destination 和 Dragging Session</h2><p>操作拖拽，那么就涉及到三个元素，拖拽的起点，称为源 Source；拖拽的终点，称为目的地 Destination；拖拽的对象，称为 Item 吧。源对应协议 NSDraggingSource，目的地对应协议 NSDraggingDestination；拖拽过程就是一个 Dragging Session；拖拽的对象是 NSDraggingItem，放在 NSPasteboard 中。</p>\n<p>大概过程：</p>\n<ol>\n<li>从 Source 开始拖拽，Dragging Session 生成并进行</li>\n<li>选择拖拽对象，生成拖拽信息，拖拽的数据会存在拖拽粘贴板上</li>\n<li>拖拽放到 Destination，接收到拖拽信息，可以选择拒绝或接收，并进行一些操作</li>\n<li>Dragging Session 结束</li>\n</ol>\n<h2 id=\"需要处理的事情\"><a href=\"#需要处理的事情\" class=\"headerlink\" title=\"需要处理的事情\"></a>需要处理的事情</h2><p>操作拖拽的 NSView 需要实现 NSDraggingSource 协议，拖拽的目的地 NSView 需要实现 NSDraggingDestination 协议。另外可以通过 NSView 的拖拽相关 Extension 去注册支持拖拽的类型 NSPasteboard.PasteboardType。目前支持的类型有几种图片类型、字体、颜色、URL、fileURL 等。拖拽之后，从 NSDraggingInfo 中获取相关信息进行处理。</p>\n<p>协议具体需要实现的方法比较简单，没有什么特别要讲的。</p>\n<h3 id=\"NSDraggingSource\"><a href=\"#NSDraggingSource\" class=\"headerlink\" title=\"NSDraggingSource\"></a>NSDraggingSource</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, sourceOperationMaskFor context: NSDraggingContext)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, willBeginAt screenPoint: NSPoint)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, movedTo screenPoint: NSPoint)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, endedAt screenPoint: NSPoint, operation: NSDragOperation)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ignoreModifierKeys</span><span class=\"params\">(<span class=\"keyword\">for</span> session: NSDraggingSession)</span></span> -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSDraggingDestination\"><a href=\"#NSDraggingDestination\" class=\"headerlink\" title=\"NSDraggingDestination\"></a>NSDraggingDestination</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingUpdated</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingExited</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepareForDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">performDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concludeDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEnded</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wantsPeriodicDraggingUpdates</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">updateDraggingItemsForDrag</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSView-拖拽相关的-Extension\"><a href=\"#NSView-拖拽相关的-Extension\" class=\"headerlink\" title=\"NSView 拖拽相关的 Extension\"></a>NSView 拖拽相关的 Extension</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">beginDraggingSession</span><span class=\"params\">(with items: [NSDraggingItem], event: NSEvent, source: NSDraggingSource)</span></span> -&gt; <span class=\"type\">NSDraggingSession</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">var</span> registeredDraggedTypes: [<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>] &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerForDraggedTypes</span><span class=\"params\">(<span class=\"number\">_</span> newTypes: [NSPasteboard.PasteboardType])</span></span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">unregisterDraggedTypes</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Demo-功能实现\"><a href=\"#Demo-功能实现\" class=\"headerlink\" title=\"Demo 功能实现\"></a>Demo 功能实现</h1><p>简单实现下功能。本文 Demo 详见文章末尾的链接。</p>\n<p><img src=\"/2019/08/03/mac-app-drag-and-drop-produce-app-icon/readme.gif\" alt=\"readme.gif\"></p>\n<h2 id=\"功能拆解\"><a href=\"#功能拆解\" class=\"headerlink\" title=\"功能拆解\"></a>功能拆解</h2><ol>\n<li>需求</li>\n</ol>\n<ul>\n<li>基于提供的大尺寸图片，批量生成不同尺寸的 icon</li>\n</ul>\n<p>好吧，需求总是简单一句话描述，大概所有程序猿都讨厌产品经理这么说哈哈。</p>\n<ol start=\"2\">\n<li>设想用户操作</li>\n</ol>\n<ul>\n<li>设计生成 icon 大尺寸图片</li>\n<li>支持拖拽来指定该文件为生成的基准</li>\n<li>勾选需要的尺寸</li>\n<li>指定生成目录</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>拖拽是从别的文件夹窗口拖拽过来的，所以不需要定义一个 NSView 去实现 NSDraggingSource 协议。</p>\n<p>下面定义 DestinationView，NSView 类型，实现 NSDraggingDestination 协议。因为 NSView 默认扩展了该协议，所以不需要声明扩展。</p>\n<p>定义 Delegate 代理，DestinationViewDelegate，通知外部。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">DestinationViewDelegate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(<span class=\"number\">_</span> image: NSImage)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>awakeFromNib 中注册支持的类型 NSPasteboard.PasteboardType.fileURL</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerForDraggedTypes([<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>.fileURL])</span><br></pre></td></tr></table></figure>\n\n<p>然后实现 NSDraggingDestination 协议几个方法</p>\n<p>draggingEntered 需要判断拖拽的内容是否接收，本 Demo 没有处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> .copy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以进行以下处理：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pasteBoard = sender.draggingPasteboard</span><br><span class=\"line\"><span class=\"keyword\">let</span> accept = <span class=\"type\">NSImage</span>(pasteboard: pasteBoard) != <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> accept ? .copy : <span class=\"type\">NSDragOperation</span>()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The data represented by the image can be copied. 返回 .copy 是为了后面展示图片；</p>\n<p>具体参考 <a href=\"https://developer.apple.com/documentation/appkit/nsdragoperation\" target=\"_blank\" rel=\"noopener\">NSDragoperation</a>。</p>\n</blockquote>\n<p>draggingExited，当拖拽退出时，需要设置 needsDisplay 为 true。</p>\n<blockquote>\n<p>needsDisplay，NSView 用于确定在显示之前是否需要重绘视图。</p>\n</blockquote>\n<p>performDragOperation，判断是否图片，并处理。</p>\n<p>下面是 DestinationView 完整的代码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  DestinationView.swift</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">DestinationViewDelegate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(<span class=\"number\">_</span> image: NSImage)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DestinationView</span>: <span class=\"title\">NSView</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> delegate: <span class=\"type\">DestinationViewDelegate?</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">awakeFromNib</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      registerForDraggedTypes([<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>.fileURL])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isReceivingDrag = <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">          needsDisplay = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> .copy</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingExited</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span> &#123;</span><br><span class=\"line\">      isReceivingDrag = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepareForDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">performDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      isReceivingDrag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> pasteBoard = sender.draggingPasteboard</span><br><span class=\"line\">      <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image = <span class=\"type\">NSImage</span>(pasteboard: pasteBoard) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      delegate?.processImage(image)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件的读写权限\"><a href=\"#文件的读写权限\" class=\"headerlink\" title=\"文件的读写权限\"></a>文件的读写权限</h2><p>macOS开发，文件相关的组件有两个 NSOpenPanel 和 NSSavePanel。前者用于选择文件或者文件夹，后者用于保存单个文件。因为需要批量保存，NSSavePanel 无法实现，所以使用 Data 的 write 方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">write</span><span class=\"params\">(to url: URL, options: Data.WritingOptions = [])</span></span> <span class=\"keyword\">throws</span></span><br></pre></td></tr></table></figure>\n\n<p>文件读写，需要修改对应 Target 的 Capabilities 中的 App Sanbox - File Access 权限。</p>\n<p>User Selected File 修改为 Read/Write 即可读写。</p>\n<p>也可以关闭 App Sanbox 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>? imageData?.write(to: path.appendingPathComponent(<span class=\"string\">\"icon\\(iconSize.rawValue).png\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>发布到 Mac AppStore 的应用，必须遵守沙盒约定。macOS APP 不需要上架，可以不开启 Sandbox 功能，随意访问 mac 上的文件。</p>\n</blockquote>\n<h2 id=\"NSView-设置问题\"><a href=\"#NSView-设置问题\" class=\"headerlink\" title=\"NSView 设置问题\"></a>NSView 设置问题</h2><p>NSView 没有 backgroundColor 属性，修改背景色需要修改 layer 的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.layer?.backgroundColor = <span class=\"type\">NSColor</span>.white.cgColor</span><br></pre></td></tr></table></figure>\n\n<p>并且需要设置 wantsLayer 生效。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.wantsLayer = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>包括设置圆角，也需要设置 wantsLayer。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.layer?.cornerRadius = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于-Retina-设备生成图片大小问题\"><a href=\"#关于-Retina-设备生成图片大小问题\" class=\"headerlink\" title=\"关于 Retina 设备生成图片大小问题\"></a>关于 Retina 设备生成图片大小问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(size: <span class=\"type\">NSSize</span>, flipped drawingHandlerShouldBeCalledWithFlippedContext: <span class=\"type\">Bool</span>, drawingHandler: @escaping (<span class=\"type\">NSRect</span>) -&gt; <span class=\"type\">Bool</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 Retina 设备上，NSImage 的初始化方法传递参数 size ，生成的图片的尺寸会是 size 的两倍。不了解，暂时先除以 2 解决。后面找到原因再处理下，如果了解原因欢迎给我留言哈。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>没什么好总结的哈哈。</p>\n<blockquote>\n<p>本文Demo：<a href=\"https://github.com/sapphirezzz/AppIconReducer\" target=\"_blank\" rel=\"noopener\">https://github.com/sapphirezzz/AppIconReducer</a>）</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>拖拽功能<ul>\n<li>Source 、 Destination 和 Dragging Session</li>\n<li>需要处理的事情</li>\n</ul>\n</li>\n<li>Demo 功能实现<ul>\n<li>功能拆解</li>\n<li>实现</li>\n<li>文件的读写权限</li>\n<li>NSView 设置问题</li>\n<li>关于 Retina 设备生成图片大小问题</li>\n</ul>\n</li>\n<li>总结</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司项目的 APP 更换 icon，UI 设计师提供的素材缺少几个尺寸，因为不清楚具体需要哪些尺寸，且经过交流发现，UI 设计师生成不同尺寸时，是一个一个生成的，这样效率比较低，于是想做个小工具提高下这种工作的效率，当作玩玩 macOS 开发咯（之前开发过对接 jira 的批量新建分配任务的小工具且一直在使用）。</p>\n<blockquote>\n<p>关于批量生成 icon 的，朋友推荐了一个<a href=\"http://icon.wuruihong.com\" target=\"_blank\" rel=\"noopener\">在线工具</a>，这个功能已经比较完善，可以了解下。当然，自己开发的话可以定制。</p>\n</blockquote>\n<h1 id=\"拖拽功能\"><a href=\"#拖拽功能\" class=\"headerlink\" title=\"拖拽功能\"></a>拖拽功能</h1><p>讲讲拖拽那点事，更多具体信息可以看👇的官方文档。</p>\n<blockquote>\n<p>苹果官方文档 <a href=\"https://developer.apple.com/documentation/appkit/drag_and_drop\" target=\"_blank\" rel=\"noopener\">Drag and Drop</a></p>\n</blockquote>\n<h2 id=\"Source-、-Destination-和-Dragging-Session\"><a href=\"#Source-、-Destination-和-Dragging-Session\" class=\"headerlink\" title=\"Source 、 Destination 和 Dragging Session\"></a>Source 、 Destination 和 Dragging Session</h2><p>操作拖拽，那么就涉及到三个元素，拖拽的起点，称为源 Source；拖拽的终点，称为目的地 Destination；拖拽的对象，称为 Item 吧。源对应协议 NSDraggingSource，目的地对应协议 NSDraggingDestination；拖拽过程就是一个 Dragging Session；拖拽的对象是 NSDraggingItem，放在 NSPasteboard 中。</p>\n<p>大概过程：</p>\n<ol>\n<li>从 Source 开始拖拽，Dragging Session 生成并进行</li>\n<li>选择拖拽对象，生成拖拽信息，拖拽的数据会存在拖拽粘贴板上</li>\n<li>拖拽放到 Destination，接收到拖拽信息，可以选择拒绝或接收，并进行一些操作</li>\n<li>Dragging Session 结束</li>\n</ol>\n<h2 id=\"需要处理的事情\"><a href=\"#需要处理的事情\" class=\"headerlink\" title=\"需要处理的事情\"></a>需要处理的事情</h2><p>操作拖拽的 NSView 需要实现 NSDraggingSource 协议，拖拽的目的地 NSView 需要实现 NSDraggingDestination 协议。另外可以通过 NSView 的拖拽相关 Extension 去注册支持拖拽的类型 NSPasteboard.PasteboardType。目前支持的类型有几种图片类型、字体、颜色、URL、fileURL 等。拖拽之后，从 NSDraggingInfo 中获取相关信息进行处理。</p>\n<p>协议具体需要实现的方法比较简单，没有什么特别要讲的。</p>\n<h3 id=\"NSDraggingSource\"><a href=\"#NSDraggingSource\" class=\"headerlink\" title=\"NSDraggingSource\"></a>NSDraggingSource</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, sourceOperationMaskFor context: NSDraggingContext)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, willBeginAt screenPoint: NSPoint)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, movedTo screenPoint: NSPoint)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingSession</span><span class=\"params\">(<span class=\"number\">_</span> session: NSDraggingSession, endedAt screenPoint: NSPoint, operation: NSDragOperation)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ignoreModifierKeys</span><span class=\"params\">(<span class=\"keyword\">for</span> session: NSDraggingSession)</span></span> -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSDraggingDestination\"><a href=\"#NSDraggingDestination\" class=\"headerlink\" title=\"NSDraggingDestination\"></a>NSDraggingDestination</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingUpdated</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingExited</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepareForDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">performDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concludeDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEnded</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wantsPeriodicDraggingUpdates</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">updateDraggingItemsForDrag</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSView-拖拽相关的-Extension\"><a href=\"#NSView-拖拽相关的-Extension\" class=\"headerlink\" title=\"NSView 拖拽相关的 Extension\"></a>NSView 拖拽相关的 Extension</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">beginDraggingSession</span><span class=\"params\">(with items: [NSDraggingItem], event: NSEvent, source: NSDraggingSource)</span></span> -&gt; <span class=\"type\">NSDraggingSession</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">var</span> registeredDraggedTypes: [<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>] &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">registerForDraggedTypes</span><span class=\"params\">(<span class=\"number\">_</span> newTypes: [NSPasteboard.PasteboardType])</span></span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">unregisterDraggedTypes</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Demo-功能实现\"><a href=\"#Demo-功能实现\" class=\"headerlink\" title=\"Demo 功能实现\"></a>Demo 功能实现</h1><p>简单实现下功能。本文 Demo 详见文章末尾的链接。</p>\n<p><img src=\"/2019/08/03/mac-app-drag-and-drop-produce-app-icon/readme.gif\" alt=\"readme.gif\"></p>\n<h2 id=\"功能拆解\"><a href=\"#功能拆解\" class=\"headerlink\" title=\"功能拆解\"></a>功能拆解</h2><ol>\n<li>需求</li>\n</ol>\n<ul>\n<li>基于提供的大尺寸图片，批量生成不同尺寸的 icon</li>\n</ul>\n<p>好吧，需求总是简单一句话描述，大概所有程序猿都讨厌产品经理这么说哈哈。</p>\n<ol start=\"2\">\n<li>设想用户操作</li>\n</ol>\n<ul>\n<li>设计生成 icon 大尺寸图片</li>\n<li>支持拖拽来指定该文件为生成的基准</li>\n<li>勾选需要的尺寸</li>\n<li>指定生成目录</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>拖拽是从别的文件夹窗口拖拽过来的，所以不需要定义一个 NSView 去实现 NSDraggingSource 协议。</p>\n<p>下面定义 DestinationView，NSView 类型，实现 NSDraggingDestination 协议。因为 NSView 默认扩展了该协议，所以不需要声明扩展。</p>\n<p>定义 Delegate 代理，DestinationViewDelegate，通知外部。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">DestinationViewDelegate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(<span class=\"number\">_</span> image: NSImage)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>awakeFromNib 中注册支持的类型 NSPasteboard.PasteboardType.fileURL</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerForDraggedTypes([<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>.fileURL])</span><br></pre></td></tr></table></figure>\n\n<p>然后实现 NSDraggingDestination 协议几个方法</p>\n<p>draggingEntered 需要判断拖拽的内容是否接收，本 Demo 没有处理。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> .copy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以进行以下处理：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pasteBoard = sender.draggingPasteboard</span><br><span class=\"line\"><span class=\"keyword\">let</span> accept = <span class=\"type\">NSImage</span>(pasteboard: pasteBoard) != <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> accept ? .copy : <span class=\"type\">NSDragOperation</span>()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>The data represented by the image can be copied. 返回 .copy 是为了后面展示图片；</p>\n<p>具体参考 <a href=\"https://developer.apple.com/documentation/appkit/nsdragoperation\" target=\"_blank\" rel=\"noopener\">NSDragoperation</a>。</p>\n</blockquote>\n<p>draggingExited，当拖拽退出时，需要设置 needsDisplay 为 true。</p>\n<blockquote>\n<p>needsDisplay，NSView 用于确定在显示之前是否需要重绘视图。</p>\n</blockquote>\n<p>performDragOperation，判断是否图片，并处理。</p>\n<p>下面是 DestinationView 完整的代码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  DestinationView.swift</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Cocoa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">DestinationViewDelegate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processImage</span><span class=\"params\">(<span class=\"number\">_</span> image: NSImage)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DestinationView</span>: <span class=\"title\">NSView</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> delegate: <span class=\"type\">DestinationViewDelegate?</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">awakeFromNib</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      registerForDraggedTypes([<span class=\"type\">NSPasteboard</span>.<span class=\"type\">PasteboardType</span>.fileURL])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isReceivingDrag = <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">          needsDisplay = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingEntered</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">NSDragOperation</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> .copy</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draggingExited</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo?)</span></span> &#123;</span><br><span class=\"line\">      isReceivingDrag = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepareForDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">performDragOperation</span><span class=\"params\">(<span class=\"number\">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      isReceivingDrag = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> pasteBoard = sender.draggingPasteboard</span><br><span class=\"line\">      <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> image = <span class=\"type\">NSImage</span>(pasteboard: pasteBoard) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      delegate?.processImage(image)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件的读写权限\"><a href=\"#文件的读写权限\" class=\"headerlink\" title=\"文件的读写权限\"></a>文件的读写权限</h2><p>macOS开发，文件相关的组件有两个 NSOpenPanel 和 NSSavePanel。前者用于选择文件或者文件夹，后者用于保存单个文件。因为需要批量保存，NSSavePanel 无法实现，所以使用 Data 的 write 方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">write</span><span class=\"params\">(to url: URL, options: Data.WritingOptions = [])</span></span> <span class=\"keyword\">throws</span></span><br></pre></td></tr></table></figure>\n\n<p>文件读写，需要修改对应 Target 的 Capabilities 中的 App Sanbox - File Access 权限。</p>\n<p>User Selected File 修改为 Read/Write 即可读写。</p>\n<p>也可以关闭 App Sanbox 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>? imageData?.write(to: path.appendingPathComponent(<span class=\"string\">\"icon\\(iconSize.rawValue).png\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>发布到 Mac AppStore 的应用，必须遵守沙盒约定。macOS APP 不需要上架，可以不开启 Sandbox 功能，随意访问 mac 上的文件。</p>\n</blockquote>\n<h2 id=\"NSView-设置问题\"><a href=\"#NSView-设置问题\" class=\"headerlink\" title=\"NSView 设置问题\"></a>NSView 设置问题</h2><p>NSView 没有 backgroundColor 属性，修改背景色需要修改 layer 的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.layer?.backgroundColor = <span class=\"type\">NSColor</span>.white.cgColor</span><br></pre></td></tr></table></figure>\n\n<p>并且需要设置 wantsLayer 生效。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.wantsLayer = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>包括设置圆角，也需要设置 wantsLayer。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backgroundView.layer?.cornerRadius = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于-Retina-设备生成图片大小问题\"><a href=\"#关于-Retina-设备生成图片大小问题\" class=\"headerlink\" title=\"关于 Retina 设备生成图片大小问题\"></a>关于 Retina 设备生成图片大小问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(size: <span class=\"type\">NSSize</span>, flipped drawingHandlerShouldBeCalledWithFlippedContext: <span class=\"type\">Bool</span>, drawingHandler: @escaping (<span class=\"type\">NSRect</span>) -&gt; <span class=\"type\">Bool</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在 Retina 设备上，NSImage 的初始化方法传递参数 size ，生成的图片的尺寸会是 size 的两倍。不了解，暂时先除以 2 解决。后面找到原因再处理下，如果了解原因欢迎给我留言哈。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>没什么好总结的哈哈。</p>\n<blockquote>\n<p>本文Demo：<a href=\"https://github.com/sapphirezzz/AppIconReducer\" target=\"_blank\" rel=\"noopener\">https://github.com/sapphirezzz/AppIconReducer</a>）</p>\n</blockquote>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"},{"title":"手把手教你实现视频列表滚动自动播放-短视频列表滚动播放实战","date":"2019-09-22T07:30:00.000Z","keywords":"iOS 短视频 滚动播放 滚动自动播放","description":"简单介绍了包含视频的列表滚动自动播放的方案","_content":"\n# 目录\n\n- 前言\n- 方案实现\n  - 原始需求\n  - 隐藏需求\n  - 方案制定\n  - 具体实现\n- 总结\n- 附录\n\n# 前言\n\n互联网内容已经逐渐从图文阅读往如今火热的短视频更迭，某种程度上短视频有着图文所没有的优势和不可替代性，降低了自我表达的门槛。近期迭代做了个短视频列表滚动自动播放的需求，上线了一段时间。觉得略有趣，简单分享下方案。\n\n本文提供了 Demo ，将方案进行简化处理，只包含核心的功能实现。\n\n> 本文的 Demo 附在文末\n\n# 方案实现\n\n![demo.gif](demo.gif)\n\n介绍下整个方案的思考和实现的一些过程。\n\n## 原始需求\n\n简化如下：\n\n- 自动播放条件\n\nWifi环境下，当视频中心位置从下往上越过屏幕的2/3位置，或从上往下越过屏幕的1/3位置时，视频开始自动播放；\n\n- 停止播放条件\n\n当视频中心位置离开可见区域时，视频自动停止播放。若下一个视频满足开始自动播放的条件，则上一个视频自动停止播放。\n\n- 手动播放\n\n点播放按钮可手动开始播放。开始播放某视频后，其他视频停止播放。\n\n## 隐藏需求\n\n原始需求背后需要考虑的其他情况：\n\n- 页面进入/离开的处理\n- App进入后台/返回前台的处理\n- 从一个视频列表跳转到另一个视频列表的处理\n- 页面包含安全区的处理\n- 列表滚动播放的性能问题\n- 视频循环播放/静音功能\n- 上拉加载更多/下拉刷新等动作触发的滚动的处理\n- 列表 cell 的复用问题\n\n## 方案制定\n\n主要考虑了以下一些方面：\n\n1. 优先考虑的是性能问题，同一个列表中尽量只有一个视频控件\n2. 尽量降低方案的侵入性，目前有多个现有列表需要支持该功能，涉及到多个 controller 和多个 cell ，侵入性低也利于改动和维护\n3. 隐藏需求会影响到自动播放逻辑的调用时机\n\n大致思路如下：\n\n1. 由一个类管理整个 App 的视频滚动播放的相关逻辑，包括视频组件。\n2. 由 controller 监控滚动，触发管理类进行处理。管理类计算当前符合自动播放的视频，播放并将视频组件嵌入 cell 中。\n3. 为了降低侵入性，采用协议实现管理类和 controller、管理类和 cell 间的通信。也利于改动逻辑时只改动到管理类，而不是牵涉各个调用处和 cell。\n\n隐藏需求处理：\n\n1. 页面进入/离开的处理、从一个视频列表跳转到另一个视频列表的处理\n\n在 controller 的生命周期中去调用管理类方法进行处理。离开时停止当前播放中的视频，进入时播放当前列表的视频。进入时判断数据源是否已经获取，已经获取则调用播放。另外在数据源获取后判断是否已经 Appear，是则调用播放。用变量标志避免两个逻辑重复调用。\n\n2. App进入后台/返回前台的处理\n\nApp 进入后台/返回前台不会调用 controller 的生命周期，需要另外处理。\n\n3. 页面包含安全区的处理\n\n在计算视频的相对位置时，将安全区考虑在内进行计算。\n\n4. 列表滚动播放的性能问题\n\n测试**列表滚动停止时**、**实时滚动时**、**滚动降速到一定速度时**等情况下，调用自动播放逻辑的性能和体验，\n\n5. 视频循环播放/静音功能\n\n视频播放完毕的事件需要通过监听 NSNotification.Name.AVPlayerItemDidPlayToEndTime 实现，放在管理类中进行处理。\n\n6. 上拉加载更多/下拉刷新等动作触发的滚动的处理\n\n在这两种情况下，需要停止页面的逻辑调用，直到数据源返回成功或失败为止。\n\n7. 列表 cell 的复用问题\n\n复用时需要重新布置frame、清空数据源等。\n\n## 具体实现\n\n1. **定义管理类 VideoListAutoPlayManager**\n\n\n```swift\nclass VideoListAutoPlayManager {\n    \n    private init() {\n        playerVC.player = AVPlayer()\n        playerVC.showsPlaybackControls = false\n        playerVC.view.backgroundColor = UIColor.clear\n    }\n    static let shared = VideoListAutoPlayManager()\n    \n    private var playerVC: AVPlayerViewController = AVPlayerViewController()\n    private var preOffsetY: CGFloat = 0\n    private var currentPlayingView: VideoPlayable?\n}\n```\n\n需要保存一些信息和状态，所以定义成单例。\n\nAVPlayerViewController 自带控制条，需要隐藏。\n\n视频播放时背景从黑色开始，会导致出现先看到封面，然后黑色，然后再播放视频的问题，设置为透明会让从封面到视频的过渡自然。\n\npreOffsetY 记录当前滚动的 UIScrollView 的 contentOffset.y 。用于在多个视频满足自动播放时，通过判断滚动方向来决定选取哪个视频自动播放。\n\ncurrentPlayingView 记录当前播放中的 cell。用于通知上一个播放的 cell 即将停止播放视频，方便 cell 处理另外的逻辑。\n\n2. **定义协议**\n\n```swift\nprotocol VideoPlayable: UIView {\n    var viewToContainVideo: UIView {get}\n    var urlToPlay: URL? {get}\n    func videoStatusChanged(changeTo isPlaying: Bool)\n}\n\nprotocol VideoListPlayable: UIScrollView {\n    var visibleViews: [VideoPlayable] {get}\n}\n\nextension UITableView: VideoListPlayable {\n    var visibleViews: [VideoPlayable] {\n        let views: [VideoPlayable] = visibleCells.compactMap({ $0 as? VideoPlayable })\n        return views\n    }\n}\nextension UICollectionView: VideoListPlayable {\n    var visibleViews: [VideoPlayable] {\n        let views: [VideoPlayable] = visibleCells.compactMap({ $0 as? VideoPlayable })\n        return views\n    }\n}\n```\n\n第一个协议，VideoPlayable，是存放视频的 cell 需要实现的。实现协议返回需要包含视频的 view ，需要播放的视频 URL，以及用于 VideoListAutoPlayManager 通知 cell 处理视频播放状态变化的调用方法。\n\n第二个协议，VideoListPlayable，是滚动列表需要实现的。实现协议返回滚动列表当前可见的 cell，用于 VideoListPlayable 去判断哪些视频需要自动播放。\n\n两个协议都遵循某个类，UIView 或 UIScrollView，是有些取巧，方便后面取 frame 等。也可以不遵循，然后在协议中返回需要的数据即可。\n\n另外为 UITableView 和 UICollectionView 做了默认实现。\n\n3. **触发滚动播放的处理**\n\n```swift\nfunc scrollViewDidScroll(_ scrollView: VideoListPlayable) {\n\n    let currentOffsetY = scrollView.contentOffset.y\n    let minY = scrollView.frame.height / 3\n    let maxY = minY * 2\n    // 获取在 scrollView 自动播放区域内的视频\n    let autoPlayableViews = scrollView.visibleViews.filter { view in\n        guard let relativeRect = relativeRect(view: view.viewToContainVideo, relativeTo: scrollView), view.urlToPlay != nil else {return false}\n        let containerCenterY = relativeRect.minY + relativeRect.height / 2\n        return (containerCenterY > minY && containerCenterY < maxY)\n    }\n\n    guard let first = autoPlayableViews.first else {\n        // 没有需要自动播放的视频\n        // 移除当前正在离开/已经离开屏幕的视频\n        removeCurrentVideoIfLeavingScreen(scrollView: scrollView)\n        preOffsetY = currentOffsetY\n        return\n    }\n\n    // 取出需要自动播放的视频\n    let viewToPlay: VideoPlayable = autoPlayableViews.reduce(first) { (result, view) in\n        let isScrollToUpper = currentOffsetY < preOffsetY\n        return result.frame.maxY > view.frame.maxY ? (isScrollToUpper ? view : result) : (isScrollToUpper ? result : view)\n    }\n    if let currentPlayingView = currentPlayingView, viewToPlay as UIView == currentPlayingView {\n        // 满足条件的视频正在播放中\n        preOffsetY = currentOffsetY\n        return\n    }\n    removeCurrentVideo(on: scrollView)\n\n    addPlayerView(to: viewToPlay, on: scrollView)\n    preOffsetY = currentOffsetY\n}\n```\n\nVideoListAutoPlayManager 提供该方法用于 controller 需要进行视频自动播放处理时进行调用。\n\n> 外部可以自行决定在什么时机，进行视频自动播放逻辑的触发，不需要是在 scrollViewDidScroll 的时机。\n\n该方法主要逻辑是：\n\n取出当前可见区域中，满足自动播放条件（func relativeRect(view: UIView, relativeTo scrollView: VideoListPlayable) -> CGRect?）的 cell，即相对位置为滚动列表的 1/3 至 2/3 的位置。\n\n如果没有满足条件的，则判断当前是否有播放中的视频，且视频即将或已经离开屏幕，有则停止播放视频，并通知 cell。\n\n如果有满足条件的视频，则根据滚动方向选取视频（列表向上滚动时，播放靠下的视频，反之则播放靠上的视频），移除上一个播放中的视频（通知对应的 cell），切换视频源并播放，通知最新播放的 cell。\n\n4. **手动播放的处理**\n\n```swift\nfunc play(at videoView: VideoPlayable, on scrollView: VideoListPlayable) {\n    removeCurrentVideo(on: scrollView)\n    addPlayerView(to: videoView, on: scrollView)\n}\n```\n\n即移除当前播放中的视频，并将当前手动指定播放的视频进行播放。\n\n5. **添加视频组件**\n\n```swift\nfunc addPlayerView(to view: VideoPlayable, on scrollView: VideoListPlayable) {\n\n    guard let url = view.urlToPlay else {\n        return\n    }\n\n    let avItem = AVPlayerItem(url: url)\n    let avPlayer = AVPlayer(playerItem: avItem)\n    playerVC.player = avPlayer\n    avPlayer.isMuted = true\n    avPlayer.play()\n\n    view.videoStatusChanged(changeTo: true)\n\n    let containerView = view.viewToContainVideo\n    containerView.addSubview(playerVC.view)\n\n    playerVC.view.translatesAutoresizingMaskIntoConstraints = false\n    playerVC.view.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = true\n    playerVC.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = true\n    playerVC.view.leftAnchor.constraint(equalTo: containerView.leftAnchor).isActive = true\n    playerVC.view.rightAnchor.constraint(equalTo: containerView.rightAnchor).isActive = true\n\n    currentPlayingView = view\n}\n```\n\n通过协议获取包含视频的 view，将视频放入其中，通知 cell 进行状态变化处理。\n\n6. 隐藏需求的实现\n\n基本按照上一个部分讲的思路实现，没有将这部分代码放到 Demo 中。\n\n# 总结\n\n目前的方案，cell只需实现协议，添加一个用于包含视频的 view 即可。这样降低了对原代码的侵入性、减少修改和维护的成本，可随时去除该自动播放的特性。另外隐藏需求实际花费的思考和时间会比原始需求多些，需要考虑很多细节。\n\n# 附录\n\n本文Demo：[VideoListPlayDemo](https://github.com/sapphirezzz/VideoListPlayDemo)\n\n\n\n-END-\n欢迎到我的博客交流：[https://zackzheng.info](https://links.jianshu.com/go?to=https%3A%2F%2Fzackzheng.info)\n","source":"_posts/2019-09-22-scrollview-auto-play-video.md","raw":"---\ntitle: 手把手教你实现视频列表滚动自动播放-短视频列表滚动播放实战\ndate: 2019-09-22 15:30:00\ntags: \n     - iOS\ncategories: iOS\nkeywords: iOS 短视频 滚动播放 滚动自动播放\ndescription: 简单介绍了包含视频的列表滚动自动播放的方案\n---\n\n# 目录\n\n- 前言\n- 方案实现\n  - 原始需求\n  - 隐藏需求\n  - 方案制定\n  - 具体实现\n- 总结\n- 附录\n\n# 前言\n\n互联网内容已经逐渐从图文阅读往如今火热的短视频更迭，某种程度上短视频有着图文所没有的优势和不可替代性，降低了自我表达的门槛。近期迭代做了个短视频列表滚动自动播放的需求，上线了一段时间。觉得略有趣，简单分享下方案。\n\n本文提供了 Demo ，将方案进行简化处理，只包含核心的功能实现。\n\n> 本文的 Demo 附在文末\n\n# 方案实现\n\n![demo.gif](demo.gif)\n\n介绍下整个方案的思考和实现的一些过程。\n\n## 原始需求\n\n简化如下：\n\n- 自动播放条件\n\nWifi环境下，当视频中心位置从下往上越过屏幕的2/3位置，或从上往下越过屏幕的1/3位置时，视频开始自动播放；\n\n- 停止播放条件\n\n当视频中心位置离开可见区域时，视频自动停止播放。若下一个视频满足开始自动播放的条件，则上一个视频自动停止播放。\n\n- 手动播放\n\n点播放按钮可手动开始播放。开始播放某视频后，其他视频停止播放。\n\n## 隐藏需求\n\n原始需求背后需要考虑的其他情况：\n\n- 页面进入/离开的处理\n- App进入后台/返回前台的处理\n- 从一个视频列表跳转到另一个视频列表的处理\n- 页面包含安全区的处理\n- 列表滚动播放的性能问题\n- 视频循环播放/静音功能\n- 上拉加载更多/下拉刷新等动作触发的滚动的处理\n- 列表 cell 的复用问题\n\n## 方案制定\n\n主要考虑了以下一些方面：\n\n1. 优先考虑的是性能问题，同一个列表中尽量只有一个视频控件\n2. 尽量降低方案的侵入性，目前有多个现有列表需要支持该功能，涉及到多个 controller 和多个 cell ，侵入性低也利于改动和维护\n3. 隐藏需求会影响到自动播放逻辑的调用时机\n\n大致思路如下：\n\n1. 由一个类管理整个 App 的视频滚动播放的相关逻辑，包括视频组件。\n2. 由 controller 监控滚动，触发管理类进行处理。管理类计算当前符合自动播放的视频，播放并将视频组件嵌入 cell 中。\n3. 为了降低侵入性，采用协议实现管理类和 controller、管理类和 cell 间的通信。也利于改动逻辑时只改动到管理类，而不是牵涉各个调用处和 cell。\n\n隐藏需求处理：\n\n1. 页面进入/离开的处理、从一个视频列表跳转到另一个视频列表的处理\n\n在 controller 的生命周期中去调用管理类方法进行处理。离开时停止当前播放中的视频，进入时播放当前列表的视频。进入时判断数据源是否已经获取，已经获取则调用播放。另外在数据源获取后判断是否已经 Appear，是则调用播放。用变量标志避免两个逻辑重复调用。\n\n2. App进入后台/返回前台的处理\n\nApp 进入后台/返回前台不会调用 controller 的生命周期，需要另外处理。\n\n3. 页面包含安全区的处理\n\n在计算视频的相对位置时，将安全区考虑在内进行计算。\n\n4. 列表滚动播放的性能问题\n\n测试**列表滚动停止时**、**实时滚动时**、**滚动降速到一定速度时**等情况下，调用自动播放逻辑的性能和体验，\n\n5. 视频循环播放/静音功能\n\n视频播放完毕的事件需要通过监听 NSNotification.Name.AVPlayerItemDidPlayToEndTime 实现，放在管理类中进行处理。\n\n6. 上拉加载更多/下拉刷新等动作触发的滚动的处理\n\n在这两种情况下，需要停止页面的逻辑调用，直到数据源返回成功或失败为止。\n\n7. 列表 cell 的复用问题\n\n复用时需要重新布置frame、清空数据源等。\n\n## 具体实现\n\n1. **定义管理类 VideoListAutoPlayManager**\n\n\n```swift\nclass VideoListAutoPlayManager {\n    \n    private init() {\n        playerVC.player = AVPlayer()\n        playerVC.showsPlaybackControls = false\n        playerVC.view.backgroundColor = UIColor.clear\n    }\n    static let shared = VideoListAutoPlayManager()\n    \n    private var playerVC: AVPlayerViewController = AVPlayerViewController()\n    private var preOffsetY: CGFloat = 0\n    private var currentPlayingView: VideoPlayable?\n}\n```\n\n需要保存一些信息和状态，所以定义成单例。\n\nAVPlayerViewController 自带控制条，需要隐藏。\n\n视频播放时背景从黑色开始，会导致出现先看到封面，然后黑色，然后再播放视频的问题，设置为透明会让从封面到视频的过渡自然。\n\npreOffsetY 记录当前滚动的 UIScrollView 的 contentOffset.y 。用于在多个视频满足自动播放时，通过判断滚动方向来决定选取哪个视频自动播放。\n\ncurrentPlayingView 记录当前播放中的 cell。用于通知上一个播放的 cell 即将停止播放视频，方便 cell 处理另外的逻辑。\n\n2. **定义协议**\n\n```swift\nprotocol VideoPlayable: UIView {\n    var viewToContainVideo: UIView {get}\n    var urlToPlay: URL? {get}\n    func videoStatusChanged(changeTo isPlaying: Bool)\n}\n\nprotocol VideoListPlayable: UIScrollView {\n    var visibleViews: [VideoPlayable] {get}\n}\n\nextension UITableView: VideoListPlayable {\n    var visibleViews: [VideoPlayable] {\n        let views: [VideoPlayable] = visibleCells.compactMap({ $0 as? VideoPlayable })\n        return views\n    }\n}\nextension UICollectionView: VideoListPlayable {\n    var visibleViews: [VideoPlayable] {\n        let views: [VideoPlayable] = visibleCells.compactMap({ $0 as? VideoPlayable })\n        return views\n    }\n}\n```\n\n第一个协议，VideoPlayable，是存放视频的 cell 需要实现的。实现协议返回需要包含视频的 view ，需要播放的视频 URL，以及用于 VideoListAutoPlayManager 通知 cell 处理视频播放状态变化的调用方法。\n\n第二个协议，VideoListPlayable，是滚动列表需要实现的。实现协议返回滚动列表当前可见的 cell，用于 VideoListPlayable 去判断哪些视频需要自动播放。\n\n两个协议都遵循某个类，UIView 或 UIScrollView，是有些取巧，方便后面取 frame 等。也可以不遵循，然后在协议中返回需要的数据即可。\n\n另外为 UITableView 和 UICollectionView 做了默认实现。\n\n3. **触发滚动播放的处理**\n\n```swift\nfunc scrollViewDidScroll(_ scrollView: VideoListPlayable) {\n\n    let currentOffsetY = scrollView.contentOffset.y\n    let minY = scrollView.frame.height / 3\n    let maxY = minY * 2\n    // 获取在 scrollView 自动播放区域内的视频\n    let autoPlayableViews = scrollView.visibleViews.filter { view in\n        guard let relativeRect = relativeRect(view: view.viewToContainVideo, relativeTo: scrollView), view.urlToPlay != nil else {return false}\n        let containerCenterY = relativeRect.minY + relativeRect.height / 2\n        return (containerCenterY > minY && containerCenterY < maxY)\n    }\n\n    guard let first = autoPlayableViews.first else {\n        // 没有需要自动播放的视频\n        // 移除当前正在离开/已经离开屏幕的视频\n        removeCurrentVideoIfLeavingScreen(scrollView: scrollView)\n        preOffsetY = currentOffsetY\n        return\n    }\n\n    // 取出需要自动播放的视频\n    let viewToPlay: VideoPlayable = autoPlayableViews.reduce(first) { (result, view) in\n        let isScrollToUpper = currentOffsetY < preOffsetY\n        return result.frame.maxY > view.frame.maxY ? (isScrollToUpper ? view : result) : (isScrollToUpper ? result : view)\n    }\n    if let currentPlayingView = currentPlayingView, viewToPlay as UIView == currentPlayingView {\n        // 满足条件的视频正在播放中\n        preOffsetY = currentOffsetY\n        return\n    }\n    removeCurrentVideo(on: scrollView)\n\n    addPlayerView(to: viewToPlay, on: scrollView)\n    preOffsetY = currentOffsetY\n}\n```\n\nVideoListAutoPlayManager 提供该方法用于 controller 需要进行视频自动播放处理时进行调用。\n\n> 外部可以自行决定在什么时机，进行视频自动播放逻辑的触发，不需要是在 scrollViewDidScroll 的时机。\n\n该方法主要逻辑是：\n\n取出当前可见区域中，满足自动播放条件（func relativeRect(view: UIView, relativeTo scrollView: VideoListPlayable) -> CGRect?）的 cell，即相对位置为滚动列表的 1/3 至 2/3 的位置。\n\n如果没有满足条件的，则判断当前是否有播放中的视频，且视频即将或已经离开屏幕，有则停止播放视频，并通知 cell。\n\n如果有满足条件的视频，则根据滚动方向选取视频（列表向上滚动时，播放靠下的视频，反之则播放靠上的视频），移除上一个播放中的视频（通知对应的 cell），切换视频源并播放，通知最新播放的 cell。\n\n4. **手动播放的处理**\n\n```swift\nfunc play(at videoView: VideoPlayable, on scrollView: VideoListPlayable) {\n    removeCurrentVideo(on: scrollView)\n    addPlayerView(to: videoView, on: scrollView)\n}\n```\n\n即移除当前播放中的视频，并将当前手动指定播放的视频进行播放。\n\n5. **添加视频组件**\n\n```swift\nfunc addPlayerView(to view: VideoPlayable, on scrollView: VideoListPlayable) {\n\n    guard let url = view.urlToPlay else {\n        return\n    }\n\n    let avItem = AVPlayerItem(url: url)\n    let avPlayer = AVPlayer(playerItem: avItem)\n    playerVC.player = avPlayer\n    avPlayer.isMuted = true\n    avPlayer.play()\n\n    view.videoStatusChanged(changeTo: true)\n\n    let containerView = view.viewToContainVideo\n    containerView.addSubview(playerVC.view)\n\n    playerVC.view.translatesAutoresizingMaskIntoConstraints = false\n    playerVC.view.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = true\n    playerVC.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = true\n    playerVC.view.leftAnchor.constraint(equalTo: containerView.leftAnchor).isActive = true\n    playerVC.view.rightAnchor.constraint(equalTo: containerView.rightAnchor).isActive = true\n\n    currentPlayingView = view\n}\n```\n\n通过协议获取包含视频的 view，将视频放入其中，通知 cell 进行状态变化处理。\n\n6. 隐藏需求的实现\n\n基本按照上一个部分讲的思路实现，没有将这部分代码放到 Demo 中。\n\n# 总结\n\n目前的方案，cell只需实现协议，添加一个用于包含视频的 view 即可。这样降低了对原代码的侵入性、减少修改和维护的成本，可随时去除该自动播放的特性。另外隐藏需求实际花费的思考和时间会比原始需求多些，需要考虑很多细节。\n\n# 附录\n\n本文Demo：[VideoListPlayDemo](https://github.com/sapphirezzz/VideoListPlayDemo)\n\n\n\n-END-\n欢迎到我的博客交流：[https://zackzheng.info](https://links.jianshu.com/go?to=https%3A%2F%2Fzackzheng.info)\n","slug":"scrollview-auto-play-video","published":1,"updated":"2020-02-25T15:23:08.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck74fy7qb003507eiskzuodvs","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>方案实现<ul>\n<li>原始需求</li>\n<li>隐藏需求</li>\n<li>方案制定</li>\n<li>具体实现</li>\n</ul>\n</li>\n<li>总结</li>\n<li>附录</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>互联网内容已经逐渐从图文阅读往如今火热的短视频更迭，某种程度上短视频有着图文所没有的优势和不可替代性，降低了自我表达的门槛。近期迭代做了个短视频列表滚动自动播放的需求，上线了一段时间。觉得略有趣，简单分享下方案。</p>\n<p>本文提供了 Demo ，将方案进行简化处理，只包含核心的功能实现。</p>\n<blockquote>\n<p>本文的 Demo 附在文末</p>\n</blockquote>\n<h1 id=\"方案实现\"><a href=\"#方案实现\" class=\"headerlink\" title=\"方案实现\"></a>方案实现</h1><p><img src=\"/2019/09/22/scrollview-auto-play-video/demo.gif\" alt=\"demo.gif\"></p>\n<p>介绍下整个方案的思考和实现的一些过程。</p>\n<h2 id=\"原始需求\"><a href=\"#原始需求\" class=\"headerlink\" title=\"原始需求\"></a>原始需求</h2><p>简化如下：</p>\n<ul>\n<li>自动播放条件</li>\n</ul>\n<p>Wifi环境下，当视频中心位置从下往上越过屏幕的2/3位置，或从上往下越过屏幕的1/3位置时，视频开始自动播放；</p>\n<ul>\n<li>停止播放条件</li>\n</ul>\n<p>当视频中心位置离开可见区域时，视频自动停止播放。若下一个视频满足开始自动播放的条件，则上一个视频自动停止播放。</p>\n<ul>\n<li>手动播放</li>\n</ul>\n<p>点播放按钮可手动开始播放。开始播放某视频后，其他视频停止播放。</p>\n<h2 id=\"隐藏需求\"><a href=\"#隐藏需求\" class=\"headerlink\" title=\"隐藏需求\"></a>隐藏需求</h2><p>原始需求背后需要考虑的其他情况：</p>\n<ul>\n<li>页面进入/离开的处理</li>\n<li>App进入后台/返回前台的处理</li>\n<li>从一个视频列表跳转到另一个视频列表的处理</li>\n<li>页面包含安全区的处理</li>\n<li>列表滚动播放的性能问题</li>\n<li>视频循环播放/静音功能</li>\n<li>上拉加载更多/下拉刷新等动作触发的滚动的处理</li>\n<li>列表 cell 的复用问题</li>\n</ul>\n<h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>主要考虑了以下一些方面：</p>\n<ol>\n<li>优先考虑的是性能问题，同一个列表中尽量只有一个视频控件</li>\n<li>尽量降低方案的侵入性，目前有多个现有列表需要支持该功能，涉及到多个 controller 和多个 cell ，侵入性低也利于改动和维护</li>\n<li>隐藏需求会影响到自动播放逻辑的调用时机</li>\n</ol>\n<p>大致思路如下：</p>\n<ol>\n<li>由一个类管理整个 App 的视频滚动播放的相关逻辑，包括视频组件。</li>\n<li>由 controller 监控滚动，触发管理类进行处理。管理类计算当前符合自动播放的视频，播放并将视频组件嵌入 cell 中。</li>\n<li>为了降低侵入性，采用协议实现管理类和 controller、管理类和 cell 间的通信。也利于改动逻辑时只改动到管理类，而不是牵涉各个调用处和 cell。</li>\n</ol>\n<p>隐藏需求处理：</p>\n<ol>\n<li>页面进入/离开的处理、从一个视频列表跳转到另一个视频列表的处理</li>\n</ol>\n<p>在 controller 的生命周期中去调用管理类方法进行处理。离开时停止当前播放中的视频，进入时播放当前列表的视频。进入时判断数据源是否已经获取，已经获取则调用播放。另外在数据源获取后判断是否已经 Appear，是则调用播放。用变量标志避免两个逻辑重复调用。</p>\n<ol start=\"2\">\n<li>App进入后台/返回前台的处理</li>\n</ol>\n<p>App 进入后台/返回前台不会调用 controller 的生命周期，需要另外处理。</p>\n<ol start=\"3\">\n<li>页面包含安全区的处理</li>\n</ol>\n<p>在计算视频的相对位置时，将安全区考虑在内进行计算。</p>\n<ol start=\"4\">\n<li>列表滚动播放的性能问题</li>\n</ol>\n<p>测试<strong>列表滚动停止时</strong>、<strong>实时滚动时</strong>、<strong>滚动降速到一定速度时</strong>等情况下，调用自动播放逻辑的性能和体验，</p>\n<ol start=\"5\">\n<li>视频循环播放/静音功能</li>\n</ol>\n<p>视频播放完毕的事件需要通过监听 NSNotification.Name.AVPlayerItemDidPlayToEndTime 实现，放在管理类中进行处理。</p>\n<ol start=\"6\">\n<li>上拉加载更多/下拉刷新等动作触发的滚动的处理</li>\n</ol>\n<p>在这两种情况下，需要停止页面的逻辑调用，直到数据源返回成功或失败为止。</p>\n<ol start=\"7\">\n<li>列表 cell 的复用问题</li>\n</ol>\n<p>复用时需要重新布置frame、清空数据源等。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li><strong>定义管理类 VideoListAutoPlayManager</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoListAutoPlayManager</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        playerVC.player = <span class=\"type\">AVPlayer</span>()</span><br><span class=\"line\">        playerVC.showsPlaybackControls = <span class=\"literal\">false</span></span><br><span class=\"line\">        playerVC.view.backgroundColor = <span class=\"type\">UIColor</span>.clear</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared = <span class=\"type\">VideoListAutoPlayManager</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> playerVC: <span class=\"type\">AVPlayerViewController</span> = <span class=\"type\">AVPlayerViewController</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> preOffsetY: <span class=\"type\">CGFloat</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> currentPlayingView: <span class=\"type\">VideoPlayable?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要保存一些信息和状态，所以定义成单例。</p>\n<p>AVPlayerViewController 自带控制条，需要隐藏。</p>\n<p>视频播放时背景从黑色开始，会导致出现先看到封面，然后黑色，然后再播放视频的问题，设置为透明会让从封面到视频的过渡自然。</p>\n<p>preOffsetY 记录当前滚动的 UIScrollView 的 contentOffset.y 。用于在多个视频满足自动播放时，通过判断滚动方向来决定选取哪个视频自动播放。</p>\n<p>currentPlayingView 记录当前播放中的 cell。用于通知上一个播放的 cell 即将停止播放视频，方便 cell 处理另外的逻辑。</p>\n<ol start=\"2\">\n<li><strong>定义协议</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">VideoPlayable</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> viewToContainVideo: <span class=\"type\">UIView</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlToPlay: <span class=\"type\">URL?</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">videoStatusChanged</span><span class=\"params\">(changeTo isPlaying: Bool)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">VideoListPlayable</span>: <span class=\"title\">UIScrollView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UITableView</span>: <span class=\"title\">VideoListPlayable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> views: [<span class=\"type\">VideoPlayable</span>] = visibleCells.compactMap(&#123; $<span class=\"number\">0</span> <span class=\"keyword\">as</span>? <span class=\"type\">VideoPlayable</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> views</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionView</span>: <span class=\"title\">VideoListPlayable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> views: [<span class=\"type\">VideoPlayable</span>] = visibleCells.compactMap(&#123; $<span class=\"number\">0</span> <span class=\"keyword\">as</span>? <span class=\"type\">VideoPlayable</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> views</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一个协议，VideoPlayable，是存放视频的 cell 需要实现的。实现协议返回需要包含视频的 view ，需要播放的视频 URL，以及用于 VideoListAutoPlayManager 通知 cell 处理视频播放状态变化的调用方法。</p>\n<p>第二个协议，VideoListPlayable，是滚动列表需要实现的。实现协议返回滚动列表当前可见的 cell，用于 VideoListPlayable 去判断哪些视频需要自动播放。</p>\n<p>两个协议都遵循某个类，UIView 或 UIScrollView，是有些取巧，方便后面取 frame 等。也可以不遵循，然后在协议中返回需要的数据即可。</p>\n<p>另外为 UITableView 和 UICollectionView 做了默认实现。</p>\n<ol start=\"3\">\n<li><strong>触发滚动播放的处理</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentOffsetY = scrollView.contentOffset.y</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minY = scrollView.frame.height / <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxY = minY * <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取在 scrollView 自动播放区域内的视频</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> autoPlayableViews = scrollView.visibleViews.<span class=\"built_in\">filter</span> &#123; view <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> relativeRect = relativeRect(view: view.viewToContainVideo, relativeTo: scrollView), view.urlToPlay != <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> containerCenterY = relativeRect.minY + relativeRect.height / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (containerCenterY &gt; minY &amp;&amp; containerCenterY &lt; maxY)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> first = autoPlayableViews.first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有需要自动播放的视频</span></span><br><span class=\"line\">        <span class=\"comment\">// 移除当前正在离开/已经离开屏幕的视频</span></span><br><span class=\"line\">        removeCurrentVideoIfLeavingScreen(scrollView: scrollView)</span><br><span class=\"line\">        preOffsetY = currentOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出需要自动播放的视频</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> viewToPlay: <span class=\"type\">VideoPlayable</span> = autoPlayableViews.<span class=\"built_in\">reduce</span>(first) &#123; (result, view) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> isScrollToUpper = currentOffsetY &lt; preOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.frame.maxY &gt; view.frame.maxY ? (isScrollToUpper ? view : result) : (isScrollToUpper ? result : view)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> currentPlayingView = currentPlayingView, viewToPlay <span class=\"keyword\">as</span> <span class=\"type\">UIView</span> == currentPlayingView &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 满足条件的视频正在播放中</span></span><br><span class=\"line\">        preOffsetY = currentOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    removeCurrentVideo(on: scrollView)</span><br><span class=\"line\"></span><br><span class=\"line\">    addPlayerView(to: viewToPlay, on: scrollView)</span><br><span class=\"line\">    preOffsetY = currentOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VideoListAutoPlayManager 提供该方法用于 controller 需要进行视频自动播放处理时进行调用。</p>\n<blockquote>\n<p>外部可以自行决定在什么时机，进行视频自动播放逻辑的触发，不需要是在 scrollViewDidScroll 的时机。</p>\n</blockquote>\n<p>该方法主要逻辑是：</p>\n<p>取出当前可见区域中，满足自动播放条件（func relativeRect(view: UIView, relativeTo scrollView: VideoListPlayable) -&gt; CGRect?）的 cell，即相对位置为滚动列表的 1/3 至 2/3 的位置。</p>\n<p>如果没有满足条件的，则判断当前是否有播放中的视频，且视频即将或已经离开屏幕，有则停止播放视频，并通知 cell。</p>\n<p>如果有满足条件的视频，则根据滚动方向选取视频（列表向上滚动时，播放靠下的视频，反之则播放靠上的视频），移除上一个播放中的视频（通知对应的 cell），切换视频源并播放，通知最新播放的 cell。</p>\n<ol start=\"4\">\n<li><strong>手动播放的处理</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">play</span><span class=\"params\">(at videoView: VideoPlayable, on scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\">    removeCurrentVideo(on: scrollView)</span><br><span class=\"line\">    addPlayerView(to: videoView, on: scrollView)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>即移除当前播放中的视频，并将当前手动指定播放的视频进行播放。</p>\n<ol start=\"5\">\n<li><strong>添加视频组件</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addPlayerView</span><span class=\"params\">(to view: VideoPlayable, on scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> url = view.urlToPlay <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> avItem = <span class=\"type\">AVPlayerItem</span>(url: url)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> avPlayer = <span class=\"type\">AVPlayer</span>(playerItem: avItem)</span><br><span class=\"line\">    playerVC.player = avPlayer</span><br><span class=\"line\">    avPlayer.isMuted = <span class=\"literal\">true</span></span><br><span class=\"line\">    avPlayer.play()</span><br><span class=\"line\"></span><br><span class=\"line\">    view.videoStatusChanged(changeTo: <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> containerView = view.viewToContainVideo</span><br><span class=\"line\">    containerView.addSubview(playerVC.view)</span><br><span class=\"line\"></span><br><span class=\"line\">    playerVC.view.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    playerVC.view.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.leftAnchor.constraint(equalTo: containerView.leftAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.rightAnchor.constraint(equalTo: containerView.rightAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    currentPlayingView = view</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过协议获取包含视频的 view，将视频放入其中，通知 cell 进行状态变化处理。</p>\n<ol start=\"6\">\n<li>隐藏需求的实现</li>\n</ol>\n<p>基本按照上一个部分讲的思路实现，没有将这部分代码放到 Demo 中。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>目前的方案，cell只需实现协议，添加一个用于包含视频的 view 即可。这样降低了对原代码的侵入性、减少修改和维护的成本，可随时去除该自动播放的特性。另外隐藏需求实际花费的思考和时间会比原始需求多些，需要考虑很多细节。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p>本文Demo：<a href=\"https://github.com/sapphirezzz/VideoListPlayDemo\" target=\"_blank\" rel=\"noopener\">VideoListPlayDemo</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzackzheng.info\" target=\"_blank\" rel=\"noopener\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>前言</li>\n<li>方案实现<ul>\n<li>原始需求</li>\n<li>隐藏需求</li>\n<li>方案制定</li>\n<li>具体实现</li>\n</ul>\n</li>\n<li>总结</li>\n<li>附录</li>\n</ul>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>互联网内容已经逐渐从图文阅读往如今火热的短视频更迭，某种程度上短视频有着图文所没有的优势和不可替代性，降低了自我表达的门槛。近期迭代做了个短视频列表滚动自动播放的需求，上线了一段时间。觉得略有趣，简单分享下方案。</p>\n<p>本文提供了 Demo ，将方案进行简化处理，只包含核心的功能实现。</p>\n<blockquote>\n<p>本文的 Demo 附在文末</p>\n</blockquote>\n<h1 id=\"方案实现\"><a href=\"#方案实现\" class=\"headerlink\" title=\"方案实现\"></a>方案实现</h1><p><img src=\"/2019/09/22/scrollview-auto-play-video/demo.gif\" alt=\"demo.gif\"></p>\n<p>介绍下整个方案的思考和实现的一些过程。</p>\n<h2 id=\"原始需求\"><a href=\"#原始需求\" class=\"headerlink\" title=\"原始需求\"></a>原始需求</h2><p>简化如下：</p>\n<ul>\n<li>自动播放条件</li>\n</ul>\n<p>Wifi环境下，当视频中心位置从下往上越过屏幕的2/3位置，或从上往下越过屏幕的1/3位置时，视频开始自动播放；</p>\n<ul>\n<li>停止播放条件</li>\n</ul>\n<p>当视频中心位置离开可见区域时，视频自动停止播放。若下一个视频满足开始自动播放的条件，则上一个视频自动停止播放。</p>\n<ul>\n<li>手动播放</li>\n</ul>\n<p>点播放按钮可手动开始播放。开始播放某视频后，其他视频停止播放。</p>\n<h2 id=\"隐藏需求\"><a href=\"#隐藏需求\" class=\"headerlink\" title=\"隐藏需求\"></a>隐藏需求</h2><p>原始需求背后需要考虑的其他情况：</p>\n<ul>\n<li>页面进入/离开的处理</li>\n<li>App进入后台/返回前台的处理</li>\n<li>从一个视频列表跳转到另一个视频列表的处理</li>\n<li>页面包含安全区的处理</li>\n<li>列表滚动播放的性能问题</li>\n<li>视频循环播放/静音功能</li>\n<li>上拉加载更多/下拉刷新等动作触发的滚动的处理</li>\n<li>列表 cell 的复用问题</li>\n</ul>\n<h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>主要考虑了以下一些方面：</p>\n<ol>\n<li>优先考虑的是性能问题，同一个列表中尽量只有一个视频控件</li>\n<li>尽量降低方案的侵入性，目前有多个现有列表需要支持该功能，涉及到多个 controller 和多个 cell ，侵入性低也利于改动和维护</li>\n<li>隐藏需求会影响到自动播放逻辑的调用时机</li>\n</ol>\n<p>大致思路如下：</p>\n<ol>\n<li>由一个类管理整个 App 的视频滚动播放的相关逻辑，包括视频组件。</li>\n<li>由 controller 监控滚动，触发管理类进行处理。管理类计算当前符合自动播放的视频，播放并将视频组件嵌入 cell 中。</li>\n<li>为了降低侵入性，采用协议实现管理类和 controller、管理类和 cell 间的通信。也利于改动逻辑时只改动到管理类，而不是牵涉各个调用处和 cell。</li>\n</ol>\n<p>隐藏需求处理：</p>\n<ol>\n<li>页面进入/离开的处理、从一个视频列表跳转到另一个视频列表的处理</li>\n</ol>\n<p>在 controller 的生命周期中去调用管理类方法进行处理。离开时停止当前播放中的视频，进入时播放当前列表的视频。进入时判断数据源是否已经获取，已经获取则调用播放。另外在数据源获取后判断是否已经 Appear，是则调用播放。用变量标志避免两个逻辑重复调用。</p>\n<ol start=\"2\">\n<li>App进入后台/返回前台的处理</li>\n</ol>\n<p>App 进入后台/返回前台不会调用 controller 的生命周期，需要另外处理。</p>\n<ol start=\"3\">\n<li>页面包含安全区的处理</li>\n</ol>\n<p>在计算视频的相对位置时，将安全区考虑在内进行计算。</p>\n<ol start=\"4\">\n<li>列表滚动播放的性能问题</li>\n</ol>\n<p>测试<strong>列表滚动停止时</strong>、<strong>实时滚动时</strong>、<strong>滚动降速到一定速度时</strong>等情况下，调用自动播放逻辑的性能和体验，</p>\n<ol start=\"5\">\n<li>视频循环播放/静音功能</li>\n</ol>\n<p>视频播放完毕的事件需要通过监听 NSNotification.Name.AVPlayerItemDidPlayToEndTime 实现，放在管理类中进行处理。</p>\n<ol start=\"6\">\n<li>上拉加载更多/下拉刷新等动作触发的滚动的处理</li>\n</ol>\n<p>在这两种情况下，需要停止页面的逻辑调用，直到数据源返回成功或失败为止。</p>\n<ol start=\"7\">\n<li>列表 cell 的复用问题</li>\n</ol>\n<p>复用时需要重新布置frame、清空数据源等。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li><strong>定义管理类 VideoListAutoPlayManager</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoListAutoPlayManager</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        playerVC.player = <span class=\"type\">AVPlayer</span>()</span><br><span class=\"line\">        playerVC.showsPlaybackControls = <span class=\"literal\">false</span></span><br><span class=\"line\">        playerVC.view.backgroundColor = <span class=\"type\">UIColor</span>.clear</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared = <span class=\"type\">VideoListAutoPlayManager</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> playerVC: <span class=\"type\">AVPlayerViewController</span> = <span class=\"type\">AVPlayerViewController</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> preOffsetY: <span class=\"type\">CGFloat</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> currentPlayingView: <span class=\"type\">VideoPlayable?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要保存一些信息和状态，所以定义成单例。</p>\n<p>AVPlayerViewController 自带控制条，需要隐藏。</p>\n<p>视频播放时背景从黑色开始，会导致出现先看到封面，然后黑色，然后再播放视频的问题，设置为透明会让从封面到视频的过渡自然。</p>\n<p>preOffsetY 记录当前滚动的 UIScrollView 的 contentOffset.y 。用于在多个视频满足自动播放时，通过判断滚动方向来决定选取哪个视频自动播放。</p>\n<p>currentPlayingView 记录当前播放中的 cell。用于通知上一个播放的 cell 即将停止播放视频，方便 cell 处理另外的逻辑。</p>\n<ol start=\"2\">\n<li><strong>定义协议</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">VideoPlayable</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> viewToContainVideo: <span class=\"type\">UIView</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> urlToPlay: <span class=\"type\">URL?</span> &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">videoStatusChanged</span><span class=\"params\">(changeTo isPlaying: Bool)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">VideoListPlayable</span>: <span class=\"title\">UIScrollView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UITableView</span>: <span class=\"title\">VideoListPlayable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> views: [<span class=\"type\">VideoPlayable</span>] = visibleCells.compactMap(&#123; $<span class=\"number\">0</span> <span class=\"keyword\">as</span>? <span class=\"type\">VideoPlayable</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> views</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">UICollectionView</span>: <span class=\"title\">VideoListPlayable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> visibleViews: [<span class=\"type\">VideoPlayable</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> views: [<span class=\"type\">VideoPlayable</span>] = visibleCells.compactMap(&#123; $<span class=\"number\">0</span> <span class=\"keyword\">as</span>? <span class=\"type\">VideoPlayable</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> views</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一个协议，VideoPlayable，是存放视频的 cell 需要实现的。实现协议返回需要包含视频的 view ，需要播放的视频 URL，以及用于 VideoListAutoPlayManager 通知 cell 处理视频播放状态变化的调用方法。</p>\n<p>第二个协议，VideoListPlayable，是滚动列表需要实现的。实现协议返回滚动列表当前可见的 cell，用于 VideoListPlayable 去判断哪些视频需要自动播放。</p>\n<p>两个协议都遵循某个类，UIView 或 UIScrollView，是有些取巧，方便后面取 frame 等。也可以不遵循，然后在协议中返回需要的数据即可。</p>\n<p>另外为 UITableView 和 UICollectionView 做了默认实现。</p>\n<ol start=\"3\">\n<li><strong>触发滚动播放的处理</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentOffsetY = scrollView.contentOffset.y</span><br><span class=\"line\">    <span class=\"keyword\">let</span> minY = scrollView.frame.height / <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxY = minY * <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取在 scrollView 自动播放区域内的视频</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> autoPlayableViews = scrollView.visibleViews.<span class=\"built_in\">filter</span> &#123; view <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> relativeRect = relativeRect(view: view.viewToContainVideo, relativeTo: scrollView), view.urlToPlay != <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> containerCenterY = relativeRect.minY + relativeRect.height / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (containerCenterY &gt; minY &amp;&amp; containerCenterY &lt; maxY)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> first = autoPlayableViews.first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有需要自动播放的视频</span></span><br><span class=\"line\">        <span class=\"comment\">// 移除当前正在离开/已经离开屏幕的视频</span></span><br><span class=\"line\">        removeCurrentVideoIfLeavingScreen(scrollView: scrollView)</span><br><span class=\"line\">        preOffsetY = currentOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出需要自动播放的视频</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> viewToPlay: <span class=\"type\">VideoPlayable</span> = autoPlayableViews.<span class=\"built_in\">reduce</span>(first) &#123; (result, view) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> isScrollToUpper = currentOffsetY &lt; preOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.frame.maxY &gt; view.frame.maxY ? (isScrollToUpper ? view : result) : (isScrollToUpper ? result : view)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> currentPlayingView = currentPlayingView, viewToPlay <span class=\"keyword\">as</span> <span class=\"type\">UIView</span> == currentPlayingView &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 满足条件的视频正在播放中</span></span><br><span class=\"line\">        preOffsetY = currentOffsetY</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    removeCurrentVideo(on: scrollView)</span><br><span class=\"line\"></span><br><span class=\"line\">    addPlayerView(to: viewToPlay, on: scrollView)</span><br><span class=\"line\">    preOffsetY = currentOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VideoListAutoPlayManager 提供该方法用于 controller 需要进行视频自动播放处理时进行调用。</p>\n<blockquote>\n<p>外部可以自行决定在什么时机，进行视频自动播放逻辑的触发，不需要是在 scrollViewDidScroll 的时机。</p>\n</blockquote>\n<p>该方法主要逻辑是：</p>\n<p>取出当前可见区域中，满足自动播放条件（func relativeRect(view: UIView, relativeTo scrollView: VideoListPlayable) -&gt; CGRect?）的 cell，即相对位置为滚动列表的 1/3 至 2/3 的位置。</p>\n<p>如果没有满足条件的，则判断当前是否有播放中的视频，且视频即将或已经离开屏幕，有则停止播放视频，并通知 cell。</p>\n<p>如果有满足条件的视频，则根据滚动方向选取视频（列表向上滚动时，播放靠下的视频，反之则播放靠上的视频），移除上一个播放中的视频（通知对应的 cell），切换视频源并播放，通知最新播放的 cell。</p>\n<ol start=\"4\">\n<li><strong>手动播放的处理</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">play</span><span class=\"params\">(at videoView: VideoPlayable, on scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\">    removeCurrentVideo(on: scrollView)</span><br><span class=\"line\">    addPlayerView(to: videoView, on: scrollView)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>即移除当前播放中的视频，并将当前手动指定播放的视频进行播放。</p>\n<ol start=\"5\">\n<li><strong>添加视频组件</strong></li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addPlayerView</span><span class=\"params\">(to view: VideoPlayable, on scrollView: VideoListPlayable)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> url = view.urlToPlay <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> avItem = <span class=\"type\">AVPlayerItem</span>(url: url)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> avPlayer = <span class=\"type\">AVPlayer</span>(playerItem: avItem)</span><br><span class=\"line\">    playerVC.player = avPlayer</span><br><span class=\"line\">    avPlayer.isMuted = <span class=\"literal\">true</span></span><br><span class=\"line\">    avPlayer.play()</span><br><span class=\"line\"></span><br><span class=\"line\">    view.videoStatusChanged(changeTo: <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> containerView = view.viewToContainVideo</span><br><span class=\"line\">    containerView.addSubview(playerVC.view)</span><br><span class=\"line\"></span><br><span class=\"line\">    playerVC.view.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">    playerVC.view.topAnchor.constraint(equalTo: containerView.topAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.leftAnchor.constraint(equalTo: containerView.leftAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\">    playerVC.view.rightAnchor.constraint(equalTo: containerView.rightAnchor).isActive = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    currentPlayingView = view</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过协议获取包含视频的 view，将视频放入其中，通知 cell 进行状态变化处理。</p>\n<ol start=\"6\">\n<li>隐藏需求的实现</li>\n</ol>\n<p>基本按照上一个部分讲的思路实现，没有将这部分代码放到 Demo 中。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>目前的方案，cell只需实现协议，添加一个用于包含视频的 view 即可。这样降低了对原代码的侵入性、减少修改和维护的成本，可随时去除该自动播放的特性。另外隐藏需求实际花费的思考和时间会比原始需求多些，需要考虑很多细节。</p>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p>本文Demo：<a href=\"https://github.com/sapphirezzz/VideoListPlayDemo\" target=\"_blank\" rel=\"noopener\">VideoListPlayDemo</a></p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fzackzheng.info\" target=\"_blank\" rel=\"noopener\">https://zackzheng.info</a></p>\n"},{"title":"2020年，亲情最浓厚的春节","date":"2020-02-25T15:25:00.000Z","description":"2020年春节疫情下的亲情感悟","_content":"\n夜深，人静，最适抒情。\n\n每每思绪脑海过，待到提笔时，那些片段却不知所踪，像飞絮散去，只能寻得一丝半片。\n\n\n\n## 疫情\n\n2020年，注定是我们经历过最不平凡的一年。灾难电影、生化电影里才有的情节，从没想过会这么真真切切地，发生在我们身上，至今仍觉得突如其来，但，就是发生了。\n\n\n\n慢慢的，街上的人戴起口罩。\n慢慢的，上街的人越来越少。\n慢慢的，没什么人外出。\n群众争抢口罩、酒精、醋、消毒杀菌用品，甚至买双黄连。\n担心空气，担心接触到的东西。\n躲在家里，屯粮食，屯肉菜。\n每天关注最新进展。\n这些，不就像电影里的情节吗？\n\n\n\n这次疫情，无疑给我们每个人、各行各业、整个社会、整个国家、乃至全人类造成了巨大的伤害和损失。\n\n感谢那些冒着生命危险在一线作战的医护人员！感谢那些无偿捐赠物资钱财，或者参与援助的个人、集体、公司、国家，也感谢那些在后台默默无闻地作出奉献的人。\n\n愿疫情早点结束，社会恢复原有的秩序和模样，大家恢复原有的生活！\n\n\n\n## 疫情下的亲情变化\n\n这次疫情，从某些角度看，却也带来了很多好的变化。其中一个比较细微的，就是亲情。\n\n因为这次疫情，\n我们和亲人多了几倍的相处时间；\n我们和亲人多了十分亲密；\n我们和亲人多了一个共同话题；\n我们和亲人多了十分关心和叮嘱；\n......\n\n\n\n## 子欲养而亲不待\n\n亲情，对我们来说，可能是最想表达，也是最难表达的。奇葩说很多话题，辩论着辩论着，就会谈起亲情，然后每次谈起亲情，都会比较沉重。可能大家都觉得，有些想得太少，有些懂得太迟，有些做得不够。\n\n有一期忘记什么辩题了，但我听到一句话，从此深刻印在我脑海：子欲养而亲不待。\n\n出自孔子家语，意思是子女想赡养父母，父母却已离去。这是告诫我们，行孝道要及时，要趁着父母健在的时候，而不要等到父母去世的那一天。\n\n听到那会，我被震撼了！这是多么悲情的描述啊！儿女等到懂事、懂得得孝顺父母、懂得如何孝顺父母的时候，父母却已经不在了。这是多么悲痛！世间最大的遗憾和追悔，也莫过于此了吧！\n\n\n\n活到了现在一把年纪，才后知后觉，应该怎么去表达对亲人的爱。我到了而立之年，但父母已经到了花甲之年。如果人生九十载，那么我已经过了三分之一，父母过了三分之二。用这种赤裸地计算似乎太过残忍，但让我更能切肤之痛般地体会和行动。时间真的走得飞快，有时一回头，可能真的很晚了。\n\n\n\n去年，老爸说他的耳朵（听觉）开始不灵了，需要说比较大声才听得到。那一瞬间，我心里热潮翻腾，泪水差点从眼眶中流出。每次听到妈妈说，她身体哪里不舒服时，我就怪自己不能陪伴他们左右，还好有哥哥在家乡工作，可以照顾他们。\n\n\n\n## 爸爸的小愿望\n\n还记得去年年中吧，不记得提起了什么事，然后老爸说，他最想去两个地方——北京和南京，去这两个城市看看。具体原因不大记得，大致是和革命历史、国家历史相关吧。\n\n于是我和老婆就一直惦记着这件事，留意着一些相关的旅游信息。\n原本打算年后就安排和爸妈一起去一趟北京。可惜刚好赶上疫情。\n疫情后，我们就出发！\n\n\n\n## 一家人的春节\n\n今年的春节，是我和老婆第一次一起回家过年，所以爸妈和老哥都很开心。\n因为疫情原因，所以在家呆的天数多了，不能外出每天和父母相处的时间也长了。\n\n\n\n- 爸妈提前做的准备\n\n老爸提前把我们房间褥被清洗干净，床头换上了新的插座（带 USB）方便睡前手机充电，并在床头加上了开关控制卧室灯，不用走到房间门去关灯。老妈准备了很多食物和饮料，整天盼着我们何时订票何时回去。\n\n\n\n- 老哥为爸妈添置的东西\n\n今年回到家，看到电视换了，换了个65寸的，相比以前的旧式，又薄又大，看起电视舒服多，主要是为了妈妈。她经常需要看电视，而旧式电视又比较小，岁数也开始大了，所以很难看清，比较伤眼睛。现在大电视来了，老爸老妈很开心！\n\n还买了个小米小爱触屏音箱，可以让它定闹钟，打开电视，放白噪音，等等。\n过滤水壶，因为家里加装厨下净水器比较麻烦，所以买了可以过滤水，更干净，也更放心爸妈的健康。\nLED灯泡，将屋子所有的照明都换了一遍，更亮堂一些。\n摄像头，可以监控门口和家里，这样有什么突发事情也可以看得到。\n\n都是小米有品平台上的，老哥也迷上米家了哈哈。\n\n\n\n- 给老妈买手机的坎坷\n\n年前老妈的手机经常卡机了，跟她说给她买个新的，她总是推辞。\n回到家后，看了下手机，真的好卡，也用了三年多，我就下单买了个新的。\n可惜刚好赶上疫情，快递发的很慢，每天我都打开看看，焦急地等待。\n刚好在我回广州的那天，快递才到家，还好有老哥帮忙迁移东西和配置好手机。\n我也算放下心了，总算为老妈解决了一件事情。\n\n\n\n- 更长时间地相处\n\n大概在外习惯了，所以回家我、老婆和哥哥都用普通话交流，交流了很多。老爸跟丈人说，看着三个年轻人交谈，虽然说着普通话理解得比较慢，但是很欣慰很开心。\n\n那些天，基本上吃完饭坐在一起聊天，看疫情报告，看新闻，一起喝喝茶，玩玩娱乐节目，说说家乡的事，说说外面的见闻。\n\n那些天，老婆帮着老妈处理家务，和老妈相处融洽，又是个好帮手。老妈也是很开心。\n\n那些天，我们教会了老爸玩 UNO，教会了老爸玩麻将扑克，老爸也学得很快，并且和老爸老妈一起玩“叫2”连续好多天。虽然老爸没说，但我能看到他脸上，透露出的欣慰和喜悦。一家和睦融融，喜喜乐乐，天伦之乐大概就是这个意思吧！\n\n那些天，我们跟父母说着哪里哪里封路了，哪里哪里经过得测体温。老爸也看新闻，说哪里也有疫情了，哪个国家也有发现情况。\n\n那些天，我们像父母叮嘱小孩一样的，跟爸妈说，少出门，多囤着点菜，出门要戴口罩，回来要洗手。\n\n那些天，老爸开始学用导航开车，并且让我给他买了个手机导航架，可以把手机固定在车上。老爸虽然年纪大了，但是好学，学东西也很快。在广州坐地铁，只要坐上两个来回，他就已经懂得自己坐了；米家的摄像头说一下，他也懂得看监控、调整大小、横屏等等。这些，我很开心！\n\n\n\n## 结语\n\n关于父母，关于亲情，还有很多感悟，但现在零零碎碎没想起来。\n\n可能到了30岁的年纪了，思考生活变得更多、更深了吧。\n\n今年，绝对是我过得最温馨的一个春节了！\n\n我想，对于你们和家人来说，一定也是有着特殊的意义吧！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","source":"_posts/2020-02-25-2020-family.md","raw":"---\ntitle: 2020年，亲情最浓厚的春节\ndate: 2020-02-25 23:25:00\ntags: \n     - life\ncategories: life\ndescription: 2020年春节疫情下的亲情感悟\n---\n\n夜深，人静，最适抒情。\n\n每每思绪脑海过，待到提笔时，那些片段却不知所踪，像飞絮散去，只能寻得一丝半片。\n\n\n\n## 疫情\n\n2020年，注定是我们经历过最不平凡的一年。灾难电影、生化电影里才有的情节，从没想过会这么真真切切地，发生在我们身上，至今仍觉得突如其来，但，就是发生了。\n\n\n\n慢慢的，街上的人戴起口罩。\n慢慢的，上街的人越来越少。\n慢慢的，没什么人外出。\n群众争抢口罩、酒精、醋、消毒杀菌用品，甚至买双黄连。\n担心空气，担心接触到的东西。\n躲在家里，屯粮食，屯肉菜。\n每天关注最新进展。\n这些，不就像电影里的情节吗？\n\n\n\n这次疫情，无疑给我们每个人、各行各业、整个社会、整个国家、乃至全人类造成了巨大的伤害和损失。\n\n感谢那些冒着生命危险在一线作战的医护人员！感谢那些无偿捐赠物资钱财，或者参与援助的个人、集体、公司、国家，也感谢那些在后台默默无闻地作出奉献的人。\n\n愿疫情早点结束，社会恢复原有的秩序和模样，大家恢复原有的生活！\n\n\n\n## 疫情下的亲情变化\n\n这次疫情，从某些角度看，却也带来了很多好的变化。其中一个比较细微的，就是亲情。\n\n因为这次疫情，\n我们和亲人多了几倍的相处时间；\n我们和亲人多了十分亲密；\n我们和亲人多了一个共同话题；\n我们和亲人多了十分关心和叮嘱；\n......\n\n\n\n## 子欲养而亲不待\n\n亲情，对我们来说，可能是最想表达，也是最难表达的。奇葩说很多话题，辩论着辩论着，就会谈起亲情，然后每次谈起亲情，都会比较沉重。可能大家都觉得，有些想得太少，有些懂得太迟，有些做得不够。\n\n有一期忘记什么辩题了，但我听到一句话，从此深刻印在我脑海：子欲养而亲不待。\n\n出自孔子家语，意思是子女想赡养父母，父母却已离去。这是告诫我们，行孝道要及时，要趁着父母健在的时候，而不要等到父母去世的那一天。\n\n听到那会，我被震撼了！这是多么悲情的描述啊！儿女等到懂事、懂得得孝顺父母、懂得如何孝顺父母的时候，父母却已经不在了。这是多么悲痛！世间最大的遗憾和追悔，也莫过于此了吧！\n\n\n\n活到了现在一把年纪，才后知后觉，应该怎么去表达对亲人的爱。我到了而立之年，但父母已经到了花甲之年。如果人生九十载，那么我已经过了三分之一，父母过了三分之二。用这种赤裸地计算似乎太过残忍，但让我更能切肤之痛般地体会和行动。时间真的走得飞快，有时一回头，可能真的很晚了。\n\n\n\n去年，老爸说他的耳朵（听觉）开始不灵了，需要说比较大声才听得到。那一瞬间，我心里热潮翻腾，泪水差点从眼眶中流出。每次听到妈妈说，她身体哪里不舒服时，我就怪自己不能陪伴他们左右，还好有哥哥在家乡工作，可以照顾他们。\n\n\n\n## 爸爸的小愿望\n\n还记得去年年中吧，不记得提起了什么事，然后老爸说，他最想去两个地方——北京和南京，去这两个城市看看。具体原因不大记得，大致是和革命历史、国家历史相关吧。\n\n于是我和老婆就一直惦记着这件事，留意着一些相关的旅游信息。\n原本打算年后就安排和爸妈一起去一趟北京。可惜刚好赶上疫情。\n疫情后，我们就出发！\n\n\n\n## 一家人的春节\n\n今年的春节，是我和老婆第一次一起回家过年，所以爸妈和老哥都很开心。\n因为疫情原因，所以在家呆的天数多了，不能外出每天和父母相处的时间也长了。\n\n\n\n- 爸妈提前做的准备\n\n老爸提前把我们房间褥被清洗干净，床头换上了新的插座（带 USB）方便睡前手机充电，并在床头加上了开关控制卧室灯，不用走到房间门去关灯。老妈准备了很多食物和饮料，整天盼着我们何时订票何时回去。\n\n\n\n- 老哥为爸妈添置的东西\n\n今年回到家，看到电视换了，换了个65寸的，相比以前的旧式，又薄又大，看起电视舒服多，主要是为了妈妈。她经常需要看电视，而旧式电视又比较小，岁数也开始大了，所以很难看清，比较伤眼睛。现在大电视来了，老爸老妈很开心！\n\n还买了个小米小爱触屏音箱，可以让它定闹钟，打开电视，放白噪音，等等。\n过滤水壶，因为家里加装厨下净水器比较麻烦，所以买了可以过滤水，更干净，也更放心爸妈的健康。\nLED灯泡，将屋子所有的照明都换了一遍，更亮堂一些。\n摄像头，可以监控门口和家里，这样有什么突发事情也可以看得到。\n\n都是小米有品平台上的，老哥也迷上米家了哈哈。\n\n\n\n- 给老妈买手机的坎坷\n\n年前老妈的手机经常卡机了，跟她说给她买个新的，她总是推辞。\n回到家后，看了下手机，真的好卡，也用了三年多，我就下单买了个新的。\n可惜刚好赶上疫情，快递发的很慢，每天我都打开看看，焦急地等待。\n刚好在我回广州的那天，快递才到家，还好有老哥帮忙迁移东西和配置好手机。\n我也算放下心了，总算为老妈解决了一件事情。\n\n\n\n- 更长时间地相处\n\n大概在外习惯了，所以回家我、老婆和哥哥都用普通话交流，交流了很多。老爸跟丈人说，看着三个年轻人交谈，虽然说着普通话理解得比较慢，但是很欣慰很开心。\n\n那些天，基本上吃完饭坐在一起聊天，看疫情报告，看新闻，一起喝喝茶，玩玩娱乐节目，说说家乡的事，说说外面的见闻。\n\n那些天，老婆帮着老妈处理家务，和老妈相处融洽，又是个好帮手。老妈也是很开心。\n\n那些天，我们教会了老爸玩 UNO，教会了老爸玩麻将扑克，老爸也学得很快，并且和老爸老妈一起玩“叫2”连续好多天。虽然老爸没说，但我能看到他脸上，透露出的欣慰和喜悦。一家和睦融融，喜喜乐乐，天伦之乐大概就是这个意思吧！\n\n那些天，我们跟父母说着哪里哪里封路了，哪里哪里经过得测体温。老爸也看新闻，说哪里也有疫情了，哪个国家也有发现情况。\n\n那些天，我们像父母叮嘱小孩一样的，跟爸妈说，少出门，多囤着点菜，出门要戴口罩，回来要洗手。\n\n那些天，老爸开始学用导航开车，并且让我给他买了个手机导航架，可以把手机固定在车上。老爸虽然年纪大了，但是好学，学东西也很快。在广州坐地铁，只要坐上两个来回，他就已经懂得自己坐了；米家的摄像头说一下，他也懂得看监控、调整大小、横屏等等。这些，我很开心！\n\n\n\n## 结语\n\n关于父母，关于亲情，还有很多感悟，但现在零零碎碎没想起来。\n\n可能到了30岁的年纪了，思考生活变得更多、更深了吧。\n\n今年，绝对是我过得最温馨的一个春节了！\n\n我想，对于你们和家人来说，一定也是有着特殊的意义吧！\n\n\n\n-END-\n欢迎到我的博客交流：https://zackzheng.info","slug":"2020-family","published":1,"updated":"2020-02-27T07:55:47.437Z","_id":"ck74fy7qc003a07eimpdebfwc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>夜深，人静，最适抒情。</p>\n<p>每每思绪脑海过，待到提笔时，那些片段却不知所踪，像飞絮散去，只能寻得一丝半片。</p>\n<h2 id=\"疫情\"><a href=\"#疫情\" class=\"headerlink\" title=\"疫情\"></a>疫情</h2><p>2020年，注定是我们经历过最不平凡的一年。灾难电影、生化电影里才有的情节，从没想过会这么真真切切地，发生在我们身上，至今仍觉得突如其来，但，就是发生了。</p>\n<p>慢慢的，街上的人戴起口罩。<br>慢慢的，上街的人越来越少。<br>慢慢的，没什么人外出。<br>群众争抢口罩、酒精、醋、消毒杀菌用品，甚至买双黄连。<br>担心空气，担心接触到的东西。<br>躲在家里，屯粮食，屯肉菜。<br>每天关注最新进展。<br>这些，不就像电影里的情节吗？</p>\n<p>这次疫情，无疑给我们每个人、各行各业、整个社会、整个国家、乃至全人类造成了巨大的伤害和损失。</p>\n<p>感谢那些冒着生命危险在一线作战的医护人员！感谢那些无偿捐赠物资钱财，或者参与援助的个人、集体、公司、国家，也感谢那些在后台默默无闻地作出奉献的人。</p>\n<p>愿疫情早点结束，社会恢复原有的秩序和模样，大家恢复原有的生活！</p>\n<h2 id=\"疫情下的亲情变化\"><a href=\"#疫情下的亲情变化\" class=\"headerlink\" title=\"疫情下的亲情变化\"></a>疫情下的亲情变化</h2><p>这次疫情，从某些角度看，却也带来了很多好的变化。其中一个比较细微的，就是亲情。</p>\n<p>因为这次疫情，<br>我们和亲人多了几倍的相处时间；<br>我们和亲人多了十分亲密；<br>我们和亲人多了一个共同话题；<br>我们和亲人多了十分关心和叮嘱；<br>……</p>\n<h2 id=\"子欲养而亲不待\"><a href=\"#子欲养而亲不待\" class=\"headerlink\" title=\"子欲养而亲不待\"></a>子欲养而亲不待</h2><p>亲情，对我们来说，可能是最想表达，也是最难表达的。奇葩说很多话题，辩论着辩论着，就会谈起亲情，然后每次谈起亲情，都会比较沉重。可能大家都觉得，有些想得太少，有些懂得太迟，有些做得不够。</p>\n<p>有一期忘记什么辩题了，但我听到一句话，从此深刻印在我脑海：子欲养而亲不待。</p>\n<p>出自孔子家语，意思是子女想赡养父母，父母却已离去。这是告诫我们，行孝道要及时，要趁着父母健在的时候，而不要等到父母去世的那一天。</p>\n<p>听到那会，我被震撼了！这是多么悲情的描述啊！儿女等到懂事、懂得得孝顺父母、懂得如何孝顺父母的时候，父母却已经不在了。这是多么悲痛！世间最大的遗憾和追悔，也莫过于此了吧！</p>\n<p>活到了现在一把年纪，才后知后觉，应该怎么去表达对亲人的爱。我到了而立之年，但父母已经到了花甲之年。如果人生九十载，那么我已经过了三分之一，父母过了三分之二。用这种赤裸地计算似乎太过残忍，但让我更能切肤之痛般地体会和行动。时间真的走得飞快，有时一回头，可能真的很晚了。</p>\n<p>去年，老爸说他的耳朵（听觉）开始不灵了，需要说比较大声才听得到。那一瞬间，我心里热潮翻腾，泪水差点从眼眶中流出。每次听到妈妈说，她身体哪里不舒服时，我就怪自己不能陪伴他们左右，还好有哥哥在家乡工作，可以照顾他们。</p>\n<h2 id=\"爸爸的小愿望\"><a href=\"#爸爸的小愿望\" class=\"headerlink\" title=\"爸爸的小愿望\"></a>爸爸的小愿望</h2><p>还记得去年年中吧，不记得提起了什么事，然后老爸说，他最想去两个地方——北京和南京，去这两个城市看看。具体原因不大记得，大致是和革命历史、国家历史相关吧。</p>\n<p>于是我和老婆就一直惦记着这件事，留意着一些相关的旅游信息。<br>原本打算年后就安排和爸妈一起去一趟北京。可惜刚好赶上疫情。<br>疫情后，我们就出发！</p>\n<h2 id=\"一家人的春节\"><a href=\"#一家人的春节\" class=\"headerlink\" title=\"一家人的春节\"></a>一家人的春节</h2><p>今年的春节，是我和老婆第一次一起回家过年，所以爸妈和老哥都很开心。<br>因为疫情原因，所以在家呆的天数多了，不能外出每天和父母相处的时间也长了。</p>\n<ul>\n<li>爸妈提前做的准备</li>\n</ul>\n<p>老爸提前把我们房间褥被清洗干净，床头换上了新的插座（带 USB）方便睡前手机充电，并在床头加上了开关控制卧室灯，不用走到房间门去关灯。老妈准备了很多食物和饮料，整天盼着我们何时订票何时回去。</p>\n<ul>\n<li>老哥为爸妈添置的东西</li>\n</ul>\n<p>今年回到家，看到电视换了，换了个65寸的，相比以前的旧式，又薄又大，看起电视舒服多，主要是为了妈妈。她经常需要看电视，而旧式电视又比较小，岁数也开始大了，所以很难看清，比较伤眼睛。现在大电视来了，老爸老妈很开心！</p>\n<p>还买了个小米小爱触屏音箱，可以让它定闹钟，打开电视，放白噪音，等等。<br>过滤水壶，因为家里加装厨下净水器比较麻烦，所以买了可以过滤水，更干净，也更放心爸妈的健康。<br>LED灯泡，将屋子所有的照明都换了一遍，更亮堂一些。<br>摄像头，可以监控门口和家里，这样有什么突发事情也可以看得到。</p>\n<p>都是小米有品平台上的，老哥也迷上米家了哈哈。</p>\n<ul>\n<li>给老妈买手机的坎坷</li>\n</ul>\n<p>年前老妈的手机经常卡机了，跟她说给她买个新的，她总是推辞。<br>回到家后，看了下手机，真的好卡，也用了三年多，我就下单买了个新的。<br>可惜刚好赶上疫情，快递发的很慢，每天我都打开看看，焦急地等待。<br>刚好在我回广州的那天，快递才到家，还好有老哥帮忙迁移东西和配置好手机。<br>我也算放下心了，总算为老妈解决了一件事情。</p>\n<ul>\n<li>更长时间地相处</li>\n</ul>\n<p>大概在外习惯了，所以回家我、老婆和哥哥都用普通话交流，交流了很多。老爸跟丈人说，看着三个年轻人交谈，虽然说着普通话理解得比较慢，但是很欣慰很开心。</p>\n<p>那些天，基本上吃完饭坐在一起聊天，看疫情报告，看新闻，一起喝喝茶，玩玩娱乐节目，说说家乡的事，说说外面的见闻。</p>\n<p>那些天，老婆帮着老妈处理家务，和老妈相处融洽，又是个好帮手。老妈也是很开心。</p>\n<p>那些天，我们教会了老爸玩 UNO，教会了老爸玩麻将扑克，老爸也学得很快，并且和老爸老妈一起玩“叫2”连续好多天。虽然老爸没说，但我能看到他脸上，透露出的欣慰和喜悦。一家和睦融融，喜喜乐乐，天伦之乐大概就是这个意思吧！</p>\n<p>那些天，我们跟父母说着哪里哪里封路了，哪里哪里经过得测体温。老爸也看新闻，说哪里也有疫情了，哪个国家也有发现情况。</p>\n<p>那些天，我们像父母叮嘱小孩一样的，跟爸妈说，少出门，多囤着点菜，出门要戴口罩，回来要洗手。</p>\n<p>那些天，老爸开始学用导航开车，并且让我给他买了个手机导航架，可以把手机固定在车上。老爸虽然年纪大了，但是好学，学东西也很快。在广州坐地铁，只要坐上两个来回，他就已经懂得自己坐了；米家的摄像头说一下，他也懂得看监控、调整大小、横屏等等。这些，我很开心！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>关于父母，关于亲情，还有很多感悟，但现在零零碎碎没想起来。</p>\n<p>可能到了30岁的年纪了，思考生活变得更多、更深了吧。</p>\n<p>今年，绝对是我过得最温馨的一个春节了！</p>\n<p>我想，对于你们和家人来说，一定也是有着特殊的意义吧！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>夜深，人静，最适抒情。</p>\n<p>每每思绪脑海过，待到提笔时，那些片段却不知所踪，像飞絮散去，只能寻得一丝半片。</p>\n<h2 id=\"疫情\"><a href=\"#疫情\" class=\"headerlink\" title=\"疫情\"></a>疫情</h2><p>2020年，注定是我们经历过最不平凡的一年。灾难电影、生化电影里才有的情节，从没想过会这么真真切切地，发生在我们身上，至今仍觉得突如其来，但，就是发生了。</p>\n<p>慢慢的，街上的人戴起口罩。<br>慢慢的，上街的人越来越少。<br>慢慢的，没什么人外出。<br>群众争抢口罩、酒精、醋、消毒杀菌用品，甚至买双黄连。<br>担心空气，担心接触到的东西。<br>躲在家里，屯粮食，屯肉菜。<br>每天关注最新进展。<br>这些，不就像电影里的情节吗？</p>\n<p>这次疫情，无疑给我们每个人、各行各业、整个社会、整个国家、乃至全人类造成了巨大的伤害和损失。</p>\n<p>感谢那些冒着生命危险在一线作战的医护人员！感谢那些无偿捐赠物资钱财，或者参与援助的个人、集体、公司、国家，也感谢那些在后台默默无闻地作出奉献的人。</p>\n<p>愿疫情早点结束，社会恢复原有的秩序和模样，大家恢复原有的生活！</p>\n<h2 id=\"疫情下的亲情变化\"><a href=\"#疫情下的亲情变化\" class=\"headerlink\" title=\"疫情下的亲情变化\"></a>疫情下的亲情变化</h2><p>这次疫情，从某些角度看，却也带来了很多好的变化。其中一个比较细微的，就是亲情。</p>\n<p>因为这次疫情，<br>我们和亲人多了几倍的相处时间；<br>我们和亲人多了十分亲密；<br>我们和亲人多了一个共同话题；<br>我们和亲人多了十分关心和叮嘱；<br>……</p>\n<h2 id=\"子欲养而亲不待\"><a href=\"#子欲养而亲不待\" class=\"headerlink\" title=\"子欲养而亲不待\"></a>子欲养而亲不待</h2><p>亲情，对我们来说，可能是最想表达，也是最难表达的。奇葩说很多话题，辩论着辩论着，就会谈起亲情，然后每次谈起亲情，都会比较沉重。可能大家都觉得，有些想得太少，有些懂得太迟，有些做得不够。</p>\n<p>有一期忘记什么辩题了，但我听到一句话，从此深刻印在我脑海：子欲养而亲不待。</p>\n<p>出自孔子家语，意思是子女想赡养父母，父母却已离去。这是告诫我们，行孝道要及时，要趁着父母健在的时候，而不要等到父母去世的那一天。</p>\n<p>听到那会，我被震撼了！这是多么悲情的描述啊！儿女等到懂事、懂得得孝顺父母、懂得如何孝顺父母的时候，父母却已经不在了。这是多么悲痛！世间最大的遗憾和追悔，也莫过于此了吧！</p>\n<p>活到了现在一把年纪，才后知后觉，应该怎么去表达对亲人的爱。我到了而立之年，但父母已经到了花甲之年。如果人生九十载，那么我已经过了三分之一，父母过了三分之二。用这种赤裸地计算似乎太过残忍，但让我更能切肤之痛般地体会和行动。时间真的走得飞快，有时一回头，可能真的很晚了。</p>\n<p>去年，老爸说他的耳朵（听觉）开始不灵了，需要说比较大声才听得到。那一瞬间，我心里热潮翻腾，泪水差点从眼眶中流出。每次听到妈妈说，她身体哪里不舒服时，我就怪自己不能陪伴他们左右，还好有哥哥在家乡工作，可以照顾他们。</p>\n<h2 id=\"爸爸的小愿望\"><a href=\"#爸爸的小愿望\" class=\"headerlink\" title=\"爸爸的小愿望\"></a>爸爸的小愿望</h2><p>还记得去年年中吧，不记得提起了什么事，然后老爸说，他最想去两个地方——北京和南京，去这两个城市看看。具体原因不大记得，大致是和革命历史、国家历史相关吧。</p>\n<p>于是我和老婆就一直惦记着这件事，留意着一些相关的旅游信息。<br>原本打算年后就安排和爸妈一起去一趟北京。可惜刚好赶上疫情。<br>疫情后，我们就出发！</p>\n<h2 id=\"一家人的春节\"><a href=\"#一家人的春节\" class=\"headerlink\" title=\"一家人的春节\"></a>一家人的春节</h2><p>今年的春节，是我和老婆第一次一起回家过年，所以爸妈和老哥都很开心。<br>因为疫情原因，所以在家呆的天数多了，不能外出每天和父母相处的时间也长了。</p>\n<ul>\n<li>爸妈提前做的准备</li>\n</ul>\n<p>老爸提前把我们房间褥被清洗干净，床头换上了新的插座（带 USB）方便睡前手机充电，并在床头加上了开关控制卧室灯，不用走到房间门去关灯。老妈准备了很多食物和饮料，整天盼着我们何时订票何时回去。</p>\n<ul>\n<li>老哥为爸妈添置的东西</li>\n</ul>\n<p>今年回到家，看到电视换了，换了个65寸的，相比以前的旧式，又薄又大，看起电视舒服多，主要是为了妈妈。她经常需要看电视，而旧式电视又比较小，岁数也开始大了，所以很难看清，比较伤眼睛。现在大电视来了，老爸老妈很开心！</p>\n<p>还买了个小米小爱触屏音箱，可以让它定闹钟，打开电视，放白噪音，等等。<br>过滤水壶，因为家里加装厨下净水器比较麻烦，所以买了可以过滤水，更干净，也更放心爸妈的健康。<br>LED灯泡，将屋子所有的照明都换了一遍，更亮堂一些。<br>摄像头，可以监控门口和家里，这样有什么突发事情也可以看得到。</p>\n<p>都是小米有品平台上的，老哥也迷上米家了哈哈。</p>\n<ul>\n<li>给老妈买手机的坎坷</li>\n</ul>\n<p>年前老妈的手机经常卡机了，跟她说给她买个新的，她总是推辞。<br>回到家后，看了下手机，真的好卡，也用了三年多，我就下单买了个新的。<br>可惜刚好赶上疫情，快递发的很慢，每天我都打开看看，焦急地等待。<br>刚好在我回广州的那天，快递才到家，还好有老哥帮忙迁移东西和配置好手机。<br>我也算放下心了，总算为老妈解决了一件事情。</p>\n<ul>\n<li>更长时间地相处</li>\n</ul>\n<p>大概在外习惯了，所以回家我、老婆和哥哥都用普通话交流，交流了很多。老爸跟丈人说，看着三个年轻人交谈，虽然说着普通话理解得比较慢，但是很欣慰很开心。</p>\n<p>那些天，基本上吃完饭坐在一起聊天，看疫情报告，看新闻，一起喝喝茶，玩玩娱乐节目，说说家乡的事，说说外面的见闻。</p>\n<p>那些天，老婆帮着老妈处理家务，和老妈相处融洽，又是个好帮手。老妈也是很开心。</p>\n<p>那些天，我们教会了老爸玩 UNO，教会了老爸玩麻将扑克，老爸也学得很快，并且和老爸老妈一起玩“叫2”连续好多天。虽然老爸没说，但我能看到他脸上，透露出的欣慰和喜悦。一家和睦融融，喜喜乐乐，天伦之乐大概就是这个意思吧！</p>\n<p>那些天，我们跟父母说着哪里哪里封路了，哪里哪里经过得测体温。老爸也看新闻，说哪里也有疫情了，哪个国家也有发现情况。</p>\n<p>那些天，我们像父母叮嘱小孩一样的，跟爸妈说，少出门，多囤着点菜，出门要戴口罩，回来要洗手。</p>\n<p>那些天，老爸开始学用导航开车，并且让我给他买了个手机导航架，可以把手机固定在车上。老爸虽然年纪大了，但是好学，学东西也很快。在广州坐地铁，只要坐上两个来回，他就已经懂得自己坐了；米家的摄像头说一下，他也懂得看监控、调整大小、横屏等等。这些，我很开心！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>关于父母，关于亲情，还有很多感悟，但现在零零碎碎没想起来。</p>\n<p>可能到了30岁的年纪了，思考生活变得更多、更深了吧。</p>\n<p>今年，绝对是我过得最温馨的一个春节了！</p>\n<p>我想，对于你们和家人来说，一定也是有着特殊的意义吧！</p>\n<p>-END-<br>欢迎到我的博客交流：<a href=\"https://zackzheng.info\">https://zackzheng.info</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424135311.jpg","slug":"20190424135311.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150404.jpg","slug":"20190424150404.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150422.jpg","slug":"20190424150422.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424150437.jpg","slug":"20190424150437.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0},{"_id":"source/_posts/2016-01-17-ios-devices-info/304530-f1e621f5f6cd6666.gif","slug":"304530-f1e621f5f6cd6666.gif","post":"ck74fy7pv001n07eimfuc6tl8","modified":0,"renderable":0},{"_id":"source/_posts/2016-07-31-ios-live-comment-praise/304530-9c6fd4a095528f98.gif","slug":"304530-9c6fd4a095528f98.gif","post":"ck74fy7q4002j07eijs4wz4y6","modified":0,"renderable":0},{"_id":"source/_posts/2019-08-03-mac-app-drag-and-drop-produce-app-icon/readme.gif","slug":"readme.gif","post":"ck74fy7qa003207ei1h4977yh","modified":0,"renderable":0},{"_id":"source/_posts/2019-09-22-scrollview-auto-play-video/demo.gif","slug":"demo.gif","post":"ck74fy7qb003507eiskzuodvs","modified":0,"renderable":0},{"_id":"source/_posts/2016-05-31-ios-in-app-purchase-iap/304530-8e271b6afd1bc2eb.png","slug":"304530-8e271b6afd1bc2eb.png","post":"ck74fy7q3002c07eiae44dddi","modified":0,"renderable":0},{"_id":"source/_posts/2016-05-31-ios-in-app-purchase-iap/304530-e6031ed92ab8fac0.png","slug":"304530-e6031ed92ab8fac0.png","post":"ck74fy7q3002c07eiae44dddi","modified":0,"renderable":0},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424135633.jpg","slug":"20190424135633.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0},{"_id":"source/_posts/2019-04-25-create-xcode-plug-in-by-source-editor-extension/20190424145603.jpg","slug":"20190424145603.jpg","post":"ck74fy7q9002y07eiwn1g3fo2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck74fy7p6000107eikz1xx57q","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pj000f07eiwqpaa9dp"},{"post_id":"ck74fy7pg000c07eioekxdo1u","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pm000l07eiigmt6tyl"},{"post_id":"ck74fy7p9000307eixteg8hyf","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pn000q07ei1yysz62e"},{"post_id":"ck74fy7ph000d07eizpkvgvnr","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7po000t07ei6wk1622u"},{"post_id":"ck74fy7pk000i07eijejotmlw","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pp000y07eizk6chgh6"},{"post_id":"ck74fy7pc000607eil6glyie0","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pq001107eiob5or4k9"},{"post_id":"ck74fy7pl000k07eiaxbr7ihm","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pr001607eitesjngq3"},{"post_id":"ck74fy7pd000707eitvy0wj5t","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7ps001907eil6ciwcud"},{"post_id":"ck74fy7pn000s07eien9f3c74","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pt001d07ei0v5xley4"},{"post_id":"ck74fy7po000x07eikm6miy4q","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pu001g07eigzcwpbip"},{"post_id":"ck74fy7pe000807eid9499im3","category_id":"ck74fy7po000u07eid7lxus7y","_id":"ck74fy7pv001j07eii51ph2dj"},{"post_id":"ck74fy7pp001007ei02aqfw2u","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7pw001o07ei6lp6ciax"},{"post_id":"ck74fy7pr001507ein7w3vbnf","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7px001r07ei0etvkkn8"},{"post_id":"ck74fy7pm000p07eixj5t586x","category_id":"ck74fy7po000u07eid7lxus7y","_id":"ck74fy7py001w07eid2zokuk6"},{"post_id":"ck74fy7pr001807eippt7j1ey","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7pz001z07eiacgd4jf9"},{"post_id":"ck74fy7ps001c07ei2rco2dyz","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7q0002307eiwpzhgpdy"},{"post_id":"ck74fy7pu001i07eih138wsvp","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7q1002607eih55r4kcg"},{"post_id":"ck74fy7pw001q07eii1kdn128","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q2002a07ei8gkq225g"},{"post_id":"ck74fy7pt001f07ei9u9qtpx0","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q3002d07ei4jio5hqo"},{"post_id":"ck74fy7px001u07eieax4giut","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q4002h07eiwgjdxfhx"},{"post_id":"ck74fy7py001y07eivf93nm7x","category_id":"ck74fy7po000u07eid7lxus7y","_id":"ck74fy7q5002k07eiddwabqxv"},{"post_id":"ck74fy7pv001n07eimfuc6tl8","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q6002o07eivt78oiyt"},{"post_id":"ck74fy7q0002207eim9ak5dtp","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7q7002r07eiup7oim5u"},{"post_id":"ck74fy7q1002507ei3fcaokkn","category_id":"ck74fy7pb000407eifclv4o6a","_id":"ck74fy7q8002u07ei2te0fhjc"},{"post_id":"ck74fy7q2002907eixg1s7tg5","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q9002x07eic3us371m"},{"post_id":"ck74fy7q3002c07eiae44dddi","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7q9002z07ei37qx3h4n"},{"post_id":"ck74fy7q4002g07eim4jimwye","category_id":"ck74fy7po000u07eid7lxus7y","_id":"ck74fy7qa003307eivoqfjucq"},{"post_id":"ck74fy7q4002j07eijs4wz4y6","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qb003607eidnbv7tge"},{"post_id":"ck74fy7q5002n07ei6qcnsora","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qc003b07eiuuuojtil"},{"post_id":"ck74fy7q6002q07eiaqikggj1","category_id":"ck74fy7po000u07eid7lxus7y","_id":"ck74fy7qd003d07ei5u9hjkwk"},{"post_id":"ck74fy7q7002t07ei31js8d33","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qd003g07eih7yq3twm"},{"post_id":"ck74fy7q8002w07eiqljkflpq","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qd003i07eivrpxqyx0"},{"post_id":"ck74fy7q9002y07eiwn1g3fo2","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qe003k07eifsw4o35w"},{"post_id":"ck74fy7qb003507eiskzuodvs","category_id":"ck74fy7pv001l07eiyqhlgh5l","_id":"ck74fy7qe003n07ei48ty37f6"},{"post_id":"ck74fy7qc003a07eimpdebfwc","category_id":"ck74fy7pm000m07eig5y32biu","_id":"ck74fy7qe003p07eiq76o0pkw"},{"post_id":"ck74fy7qa003207ei1h4977yh","category_id":"ck74fy7qc003807ei022mrayk","_id":"ck74fy7qf003s07eil8gekydr"}],"PostTag":[{"post_id":"ck74fy7p6000107eikz1xx57q","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pg000b07eim9a1h7cj"},{"post_id":"ck74fy7pg000c07eioekxdo1u","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pk000h07eiuj6e5jgv"},{"post_id":"ck74fy7p9000307eixteg8hyf","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pl000j07eidkevvhui"},{"post_id":"ck74fy7ph000d07eizpkvgvnr","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pm000o07eifxsy33x6"},{"post_id":"ck74fy7pk000i07eijejotmlw","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pn000r07eio96xiueh"},{"post_id":"ck74fy7pc000607eil6glyie0","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7po000w07eidt8l4heu"},{"post_id":"ck74fy7pl000k07eiaxbr7ihm","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pp000z07eikqdilhug"},{"post_id":"ck74fy7pd000707eitvy0wj5t","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7pq001407eif3r5nm99"},{"post_id":"ck74fy7pn000s07eien9f3c74","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7pr001707ei6t9a80y5"},{"post_id":"ck74fy7po000x07eikm6miy4q","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7ps001a07ei0nnma0f3"},{"post_id":"ck74fy7pe000807eid9499im3","tag_id":"ck74fy7po000v07eipb24yrsj","_id":"ck74fy7pt001e07ei7ekncatw"},{"post_id":"ck74fy7pm000p07eixj5t586x","tag_id":"ck74fy7pq001307eipfrl6u3v","_id":"ck74fy7pu001h07ei5sxxx5qw"},{"post_id":"ck74fy7pr001807eippt7j1ey","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7pv001m07eilxlnd55c"},{"post_id":"ck74fy7ps001c07ei2rco2dyz","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7pw001p07ei3wrh0lgk"},{"post_id":"ck74fy7pp001007ei02aqfw2u","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7px001t07eiz3rmebca"},{"post_id":"ck74fy7pp001007ei02aqfw2u","tag_id":"ck74fy7ps001b07ei2loan2wa","_id":"ck74fy7py001x07eipqovpnji"},{"post_id":"ck74fy7pu001i07eih138wsvp","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7pz002107eiyukl3616"},{"post_id":"ck74fy7pr001507ein7w3vbnf","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7q0002407ei1dccuwm1"},{"post_id":"ck74fy7pr001507ein7w3vbnf","tag_id":"ck74fy7pv001k07eiprp0gdev","_id":"ck74fy7q1002807eim3lqukut"},{"post_id":"ck74fy7pt001f07ei9u9qtpx0","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7q2002b07eit1inkycc"},{"post_id":"ck74fy7q0002207eim9ak5dtp","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7q3002f07eipctsgddy"},{"post_id":"ck74fy7pv001n07eimfuc6tl8","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7q4002i07eie2aq6k09"},{"post_id":"ck74fy7q2002907eixg1s7tg5","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7q5002l07ei0zpjomeb"},{"post_id":"ck74fy7pw001q07eii1kdn128","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7q6002p07eii9br2gli"},{"post_id":"ck74fy7pw001q07eii1kdn128","tag_id":"ck74fy7q3002e07eirfib34g9","_id":"ck74fy7q7002s07ei2366rl8l"},{"post_id":"ck74fy7q8002w07eiqljkflpq","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qa003107eifjnwslhq"},{"post_id":"ck74fy7px001u07eieax4giut","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qb003407eiffcu4nv1"},{"post_id":"ck74fy7px001u07eieax4giut","tag_id":"ck74fy7q5002m07ei8i5lpe3l","_id":"ck74fy7qc003907eibf4a59g4"},{"post_id":"ck74fy7px001u07eieax4giut","tag_id":"ck74fy7q8002v07eiexhj6sg5","_id":"ck74fy7qd003c07eisn2gwpoq"},{"post_id":"ck74fy7py001y07eivf93nm7x","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qd003e07eiy15id86h"},{"post_id":"ck74fy7py001y07eivf93nm7x","tag_id":"ck74fy7qa003007ei28l9petf","_id":"ck74fy7qd003h07eiermatq4n"},{"post_id":"ck74fy7qb003507eiskzuodvs","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qe003j07eiv7ejpi9j"},{"post_id":"ck74fy7qc003a07eimpdebfwc","tag_id":"ck74fy7pm000n07eiziz4klau","_id":"ck74fy7qe003m07ei2e1efjqh"},{"post_id":"ck74fy7q1002507ei3fcaokkn","tag_id":"ck74fy7pq001307eipfrl6u3v","_id":"ck74fy7qe003o07ei30kw5xdo"},{"post_id":"ck74fy7q1002507ei3fcaokkn","tag_id":"ck74fy7qc003707ei86k8cy0n","_id":"ck74fy7qf003r07ei2o23q2m9"},{"post_id":"ck74fy7q1002507ei3fcaokkn","tag_id":"ck74fy7pc000507eiggqayipf","_id":"ck74fy7qf003t07ei3flwzyck"},{"post_id":"ck74fy7q3002c07eiae44dddi","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qf003v07eijhol1rsm"},{"post_id":"ck74fy7q3002c07eiae44dddi","tag_id":"ck74fy7qd003f07eivpz5gvlj","_id":"ck74fy7qf003w07einndt7d4h"},{"post_id":"ck74fy7q4002g07eim4jimwye","tag_id":"ck74fy7q8002v07eiexhj6sg5","_id":"ck74fy7qf003y07ei38tpwbkr"},{"post_id":"ck74fy7q4002j07eijs4wz4y6","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qf003z07ei8il5iug3"},{"post_id":"ck74fy7q4002j07eijs4wz4y6","tag_id":"ck74fy7qe003q07ei47n73b20","_id":"ck74fy7qf004007eiidmphnmo"},{"post_id":"ck74fy7q5002n07ei6qcnsora","tag_id":"ck74fy7qf003u07eiumvdym59","_id":"ck74fy7qg004207ei7vwzpygo"},{"post_id":"ck74fy7q5002n07ei6qcnsora","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qg004307eithc7fefj"},{"post_id":"ck74fy7q6002q07eiaqikggj1","tag_id":"ck74fy7qf003x07ei36376qen","_id":"ck74fy7qg004507eix1sto43z"},{"post_id":"ck74fy7q6002q07eiaqikggj1","tag_id":"ck74fy7po000v07eipb24yrsj","_id":"ck74fy7qj004607eikdv7y95a"},{"post_id":"ck74fy7q7002t07ei31js8d33","tag_id":"ck74fy7qf004107eibfrdzfbh","_id":"ck74fy7qj004807ei8c6v3b1n"},{"post_id":"ck74fy7q7002t07ei31js8d33","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qj004907ei7ekb3ihl"},{"post_id":"ck74fy7q9002y07eiwn1g3fo2","tag_id":"ck74fy7qg004407eiaey1ax7y","_id":"ck74fy7qj004a07eiuy55dqh3"},{"post_id":"ck74fy7q9002y07eiwn1g3fo2","tag_id":"ck74fy7px001s07eianr499aj","_id":"ck74fy7qj004b07eix43ore2e"},{"post_id":"ck74fy7qa003207ei1h4977yh","tag_id":"ck74fy7qj004707eiutimtbar","_id":"ck74fy7qj004c07eif9c7q38r"}],"Tag":[{"name":"Octopress","_id":"ck74fy7pc000507eiggqayipf"},{"name":"life","_id":"ck74fy7pm000n07eiziz4klau"},{"name":"git","_id":"ck74fy7po000v07eipb24yrsj"},{"name":"blog","_id":"ck74fy7pq001307eipfrl6u3v"},{"name":"SEO","_id":"ck74fy7ps001b07ei2loan2wa"},{"name":"Sitemap","_id":"ck74fy7pv001k07eiprp0gdev"},{"name":"iOS","_id":"ck74fy7px001s07eianr499aj"},{"name":"Universal Links","_id":"ck74fy7q3002e07eirfib34g9"},{"name":"持续集成","_id":"ck74fy7q5002m07ei8i5lpe3l"},{"name":"shell","_id":"ck74fy7q8002v07eiexhj6sg5"},{"name":"图片压缩","_id":"ck74fy7qa003007ei28l9petf"},{"name":"Hexo","_id":"ck74fy7qc003707ei86k8cy0n"},{"name":"IAP","_id":"ck74fy7qd003f07eivpz5gvlj"},{"name":"直播","_id":"ck74fy7qe003q07ei47n73b20"},{"name":"CocoaPods","_id":"ck74fy7qf003u07eiumvdym59"},{"name":"ssh","_id":"ck74fy7qf003x07ei36376qen"},{"name":"swift","_id":"ck74fy7qf004107eibfrdzfbh"},{"name":"Xcode插件","_id":"ck74fy7qg004407eiaey1ax7y"},{"name":"macOS","_id":"ck74fy7qj004707eiutimtbar"}]}}